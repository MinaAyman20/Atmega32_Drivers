
Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ae  000001a8  2**0
                  ALLOC
  2 .comment      0000002f  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000207  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000215  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000984  00000000  00000000  00000255  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000557  00000000  00000000  00000bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000206  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001338  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a8  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000f6  000000f6  000001ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001548  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    00000026  000000ae  000000ae  00000182  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .bss.counter  00000001  00800060  00800060  000001d8  2**0
                  ALLOC
 15 .text.PORT_voidPortInit 0000000c  000000ea  000000ea  000001be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  000000fe  000000fe  000001d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  00000100  00000100  000001d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  00000102  00000102  000001d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  000000d4  000000d4  000001a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  000000fa  000000fa  000001ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  40:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 61       	ori	r16, 0x10	; 16
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 57 00 	call	0xae	; 0xae <_etext>
  a6:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

000000f6 <__bad_interrupt>:
  f6:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000ae <main>:

u8 counter = 0;

int main(void)
{
	 PORT_voidPortInit();
  ae:	0e 94 75 00 	call	0xea	; 0xea <PORT_voidPortInit>
    while(1)
    {
		while(GET_BIT(PINB,0) == 0);                        //to mahowa mash mtdas 3alih mat3mlsh 7aga
  b2:	b0 9b       	sbis	0x16, 0	; 22
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <main+0x4>
		counter++;                                          //awl mahy5rog mn alwhile aly fatt hyzwd al counter
  b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ba:	8f 5f       	subi	r24, 0xFF	; 255
  bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		while(GET_BIT(PINB,0) == 1 );                          //tol mahowa matdas 3alih mat3mlsh 7aga ma7na zwdna 5las f al 5twa aly fatt
  c0:	b0 99       	sbic	0x16, 0	; 22
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <main+0x12>
		
		if(counter>15)
  c4:	80 31       	cpi	r24, 0x10	; 16
  c6:	10 f0       	brcs	.+4      	; 0xcc <main+0x1e>
		{
			counter = 0;
  c8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		PORTA = counter;
  cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d0:	8b bb       	out	0x1b, r24	; 27
       
    }
  d2:	ef cf       	rjmp	.-34     	; 0xb2 <main+0x4>

Disassembly of section .text.PORT_voidPortInit:

000000ea <PORT_voidPortInit>:
          #define MPORT_PORTB_PIN7_DIR    PORT_HIGH
          #define MPORT_PORTB_PIN7_PORT   PORT_LOW

        #endif       

        DDRA = CONCAT_BITS(
  ea:	8f e0       	ldi	r24, 0x0F	; 15
  ec:	8a bb       	out	0x1a, r24	; 26
         MPORT_PORTA_PIN3_DIR,
         MPORT_PORTA_PIN2_DIR,
         MPORT_PORTA_PIN1_DIR,
         MPORT_PORTA_PIN0_DIR);

        DDRB = CONCAT_BITS(
  ee:	17 ba       	out	0x17, r1	; 23
         MPORT_PORTB_PIN3_DIR,
         MPORT_PORTB_PIN2_DIR,
         MPORT_PORTB_PIN1_DIR,
         MPORT_PORTB_PIN0_DIR);

        PORTA = CONCAT_BITS (
  f0:	1b ba       	out	0x1b, r1	; 27
        MPORT_PORTA_PIN2_PORT,
        MPORT_PORTA_PIN1_PORT,
        MPORT_PORTA_PIN0_PORT);   


        PORTB = CONCAT_BITS (
  f2:	18 ba       	out	0x18, r1	; 24
  f4:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000000fe <_fini>:
  fe:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000100 <__funcs_on_exit>:
 100:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000102 <__simulator_exit>:
 102:	08 95       	ret

Disassembly of section .text.exit:

000000d4 <exit>:
  d4:	ec 01       	movw	r28, r24
  d6:	0e 94 80 00 	call	0x100	; 0x100 <__funcs_on_exit>
  da:	0e 94 7f 00 	call	0xfe	; 0xfe <_fini>
  de:	ce 01       	movw	r24, r28
  e0:	0e 94 81 00 	call	0x102	; 0x102 <__simulator_exit>
  e4:	ce 01       	movw	r24, r28
  e6:	0e 94 7d 00 	call	0xfa	; 0xfa <_Exit>

Disassembly of section .text._Exit:

000000fa <_Exit>:
  fa:	0e 94 55 00 	call	0xaa	; 0xaa <_exit>
