
HTEMP_SENSOR_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000062b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000214  00800060  000062b6  0000634a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000063  00800274  00800274  0000655e  2**0
                  ALLOC
  3 .stab         00004da0  00000000  00000000  00006560  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003eba  00000000  00000000  0000b300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000f1ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d0  00000000  00000000  0000f33a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002b67  00000000  00000000  0000f50a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001266  00000000  00000000  00012071  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001231  00000000  00000000  000132d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00014508  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000031d  00000000  00000000  000146a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000020f4  00000000  00000000  000149c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  00016ab9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 97 13 	jmp	0x272e	; 0x272e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	f2 e6       	ldi	r31, 0x62	; 98
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3d       	cpi	r26, 0xD7	; 215
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <main>
      8a:	0c 94 59 31 	jmp	0x62b2	; 0x62b2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 2e 10 	call	0x205c	; 0x205c <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__subsf3>
      be:	0e 94 8e 10 	call	0x211c	; 0x211c <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 8e 10 	call	0x211c	; 0x211c <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__udivdi3>:
      ea:	ae e5       	ldi	r26, 0x5E	; 94
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 22 31 	jmp	0x6244	; 0x6244 <__prologue_saves__>
      f6:	a8 e0       	ldi	r26, 0x08	; 8
      f8:	4e 01       	movw	r8, r28
      fa:	08 94       	sec
      fc:	81 1c       	adc	r8, r1
      fe:	91 1c       	adc	r9, r1
     100:	f4 01       	movw	r30, r8
     102:	6a 2e       	mov	r6, r26
     104:	11 92       	st	Z+, r1
     106:	6a 94       	dec	r6
     108:	e9 f7       	brne	.-6      	; 0x104 <__udivdi3+0x1a>
     10a:	29 83       	std	Y+1, r18	; 0x01
     10c:	3a 83       	std	Y+2, r19	; 0x02
     10e:	4b 83       	std	Y+3, r20	; 0x03
     110:	5c 83       	std	Y+4, r21	; 0x04
     112:	6d 83       	std	Y+5, r22	; 0x05
     114:	7e 83       	std	Y+6, r23	; 0x06
     116:	8f 83       	std	Y+7, r24	; 0x07
     118:	98 87       	std	Y+8, r25	; 0x08
     11a:	ce 01       	movw	r24, r28
     11c:	09 96       	adiw	r24, 0x09	; 9
     11e:	fc 01       	movw	r30, r24
     120:	11 92       	st	Z+, r1
     122:	aa 95       	dec	r26
     124:	e9 f7       	brne	.-6      	; 0x120 <__udivdi3+0x36>
     126:	a9 86       	std	Y+9, r10	; 0x09
     128:	ba 86       	std	Y+10, r11	; 0x0a
     12a:	cb 86       	std	Y+11, r12	; 0x0b
     12c:	dc 86       	std	Y+12, r13	; 0x0c
     12e:	ed 86       	std	Y+13, r14	; 0x0d
     130:	fe 86       	std	Y+14, r15	; 0x0e
     132:	0f 87       	std	Y+15, r16	; 0x0f
     134:	18 8b       	std	Y+16, r17	; 0x10
     136:	29 84       	ldd	r2, Y+9	; 0x09
     138:	3a 84       	ldd	r3, Y+10	; 0x0a
     13a:	4b 84       	ldd	r4, Y+11	; 0x0b
     13c:	5c 84       	ldd	r5, Y+12	; 0x0c
     13e:	ed 84       	ldd	r14, Y+13	; 0x0d
     140:	fe 84       	ldd	r15, Y+14	; 0x0e
     142:	0f 85       	ldd	r16, Y+15	; 0x0f
     144:	18 89       	ldd	r17, Y+16	; 0x10
     146:	69 80       	ldd	r6, Y+1	; 0x01
     148:	7a 80       	ldd	r7, Y+2	; 0x02
     14a:	8b 80       	ldd	r8, Y+3	; 0x03
     14c:	9c 80       	ldd	r9, Y+4	; 0x04
     14e:	6d a6       	std	Y+45, r6	; 0x2d
     150:	7e a6       	std	Y+46, r7	; 0x2e
     152:	8f a6       	std	Y+47, r8	; 0x2f
     154:	98 aa       	std	Y+48, r9	; 0x30
     156:	6d 80       	ldd	r6, Y+5	; 0x05
     158:	7e 80       	ldd	r7, Y+6	; 0x06
     15a:	8f 80       	ldd	r8, Y+7	; 0x07
     15c:	98 84       	ldd	r9, Y+8	; 0x08
     15e:	e1 14       	cp	r14, r1
     160:	f1 04       	cpc	r15, r1
     162:	01 05       	cpc	r16, r1
     164:	11 05       	cpc	r17, r1
     166:	09 f0       	breq	.+2      	; 0x16a <__udivdi3+0x80>
     168:	b3 c3       	rjmp	.+1894   	; 0x8d0 <__stack+0x71>
     16a:	62 14       	cp	r6, r2
     16c:	73 04       	cpc	r7, r3
     16e:	84 04       	cpc	r8, r4
     170:	95 04       	cpc	r9, r5
     172:	08 f0       	brcs	.+2      	; 0x176 <__udivdi3+0x8c>
     174:	3d c1       	rjmp	.+634    	; 0x3f0 <__udivdi3+0x306>
     176:	00 e0       	ldi	r16, 0x00	; 0
     178:	20 16       	cp	r2, r16
     17a:	00 e0       	ldi	r16, 0x00	; 0
     17c:	30 06       	cpc	r3, r16
     17e:	01 e0       	ldi	r16, 0x01	; 1
     180:	40 06       	cpc	r4, r16
     182:	00 e0       	ldi	r16, 0x00	; 0
     184:	50 06       	cpc	r5, r16
     186:	88 f4       	brcc	.+34     	; 0x1aa <__udivdi3+0xc0>
     188:	1f ef       	ldi	r17, 0xFF	; 255
     18a:	21 16       	cp	r2, r17
     18c:	31 04       	cpc	r3, r1
     18e:	41 04       	cpc	r4, r1
     190:	51 04       	cpc	r5, r1
     192:	39 f0       	breq	.+14     	; 0x1a2 <__udivdi3+0xb8>
     194:	30 f0       	brcs	.+12     	; 0x1a2 <__udivdi3+0xb8>
     196:	48 e0       	ldi	r20, 0x08	; 8
     198:	e4 2e       	mov	r14, r20
     19a:	f1 2c       	mov	r15, r1
     19c:	01 2d       	mov	r16, r1
     19e:	11 2d       	mov	r17, r1
     1a0:	18 c0       	rjmp	.+48     	; 0x1d2 <__udivdi3+0xe8>
     1a2:	ee 24       	eor	r14, r14
     1a4:	ff 24       	eor	r15, r15
     1a6:	87 01       	movw	r16, r14
     1a8:	14 c0       	rjmp	.+40     	; 0x1d2 <__udivdi3+0xe8>
     1aa:	20 e0       	ldi	r18, 0x00	; 0
     1ac:	22 16       	cp	r2, r18
     1ae:	20 e0       	ldi	r18, 0x00	; 0
     1b0:	32 06       	cpc	r3, r18
     1b2:	20 e0       	ldi	r18, 0x00	; 0
     1b4:	42 06       	cpc	r4, r18
     1b6:	21 e0       	ldi	r18, 0x01	; 1
     1b8:	52 06       	cpc	r5, r18
     1ba:	30 f0       	brcs	.+12     	; 0x1c8 <__udivdi3+0xde>
     1bc:	38 e1       	ldi	r19, 0x18	; 24
     1be:	e3 2e       	mov	r14, r19
     1c0:	f1 2c       	mov	r15, r1
     1c2:	01 2d       	mov	r16, r1
     1c4:	11 2d       	mov	r17, r1
     1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <__udivdi3+0xe8>
     1c8:	20 e1       	ldi	r18, 0x10	; 16
     1ca:	e2 2e       	mov	r14, r18
     1cc:	f1 2c       	mov	r15, r1
     1ce:	01 2d       	mov	r16, r1
     1d0:	11 2d       	mov	r17, r1
     1d2:	d2 01       	movw	r26, r4
     1d4:	c1 01       	movw	r24, r2
     1d6:	0e 2c       	mov	r0, r14
     1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <__udivdi3+0xf8>
     1da:	b6 95       	lsr	r27
     1dc:	a7 95       	ror	r26
     1de:	97 95       	ror	r25
     1e0:	87 95       	ror	r24
     1e2:	0a 94       	dec	r0
     1e4:	d2 f7       	brpl	.-12     	; 0x1da <__udivdi3+0xf0>
     1e6:	87 50       	subi	r24, 0x07	; 7
     1e8:	9f 4f       	sbci	r25, 0xFF	; 255
     1ea:	dc 01       	movw	r26, r24
     1ec:	2c 91       	ld	r18, X
     1ee:	80 e2       	ldi	r24, 0x20	; 32
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	a0 e0       	ldi	r26, 0x00	; 0
     1f4:	b0 e0       	ldi	r27, 0x00	; 0
     1f6:	8e 19       	sub	r24, r14
     1f8:	9f 09       	sbc	r25, r15
     1fa:	a0 0b       	sbc	r26, r16
     1fc:	b1 0b       	sbc	r27, r17
     1fe:	7c 01       	movw	r14, r24
     200:	8d 01       	movw	r16, r26
     202:	e2 1a       	sub	r14, r18
     204:	f1 08       	sbc	r15, r1
     206:	01 09       	sbc	r16, r1
     208:	11 09       	sbc	r17, r1
     20a:	e1 14       	cp	r14, r1
     20c:	f1 04       	cpc	r15, r1
     20e:	01 05       	cpc	r16, r1
     210:	11 05       	cpc	r17, r1
     212:	a1 f1       	breq	.+104    	; 0x27c <__udivdi3+0x192>
     214:	0e 2c       	mov	r0, r14
     216:	04 c0       	rjmp	.+8      	; 0x220 <__udivdi3+0x136>
     218:	22 0c       	add	r2, r2
     21a:	33 1c       	adc	r3, r3
     21c:	44 1c       	adc	r4, r4
     21e:	55 1c       	adc	r5, r5
     220:	0a 94       	dec	r0
     222:	d2 f7       	brpl	.-12     	; 0x218 <__udivdi3+0x12e>
     224:	a4 01       	movw	r20, r8
     226:	93 01       	movw	r18, r6
     228:	0e 2c       	mov	r0, r14
     22a:	04 c0       	rjmp	.+8      	; 0x234 <__udivdi3+0x14a>
     22c:	22 0f       	add	r18, r18
     22e:	33 1f       	adc	r19, r19
     230:	44 1f       	adc	r20, r20
     232:	55 1f       	adc	r21, r21
     234:	0a 94       	dec	r0
     236:	d2 f7       	brpl	.-12     	; 0x22c <__udivdi3+0x142>
     238:	80 e2       	ldi	r24, 0x20	; 32
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	8e 19       	sub	r24, r14
     23e:	9f 09       	sbc	r25, r15
     240:	6d a4       	ldd	r6, Y+45	; 0x2d
     242:	7e a4       	ldd	r7, Y+46	; 0x2e
     244:	8f a4       	ldd	r8, Y+47	; 0x2f
     246:	98 a8       	ldd	r9, Y+48	; 0x30
     248:	04 c0       	rjmp	.+8      	; 0x252 <__udivdi3+0x168>
     24a:	96 94       	lsr	r9
     24c:	87 94       	ror	r8
     24e:	77 94       	ror	r7
     250:	67 94       	ror	r6
     252:	8a 95       	dec	r24
     254:	d2 f7       	brpl	.-12     	; 0x24a <__udivdi3+0x160>
     256:	62 2a       	or	r6, r18
     258:	73 2a       	or	r7, r19
     25a:	84 2a       	or	r8, r20
     25c:	95 2a       	or	r9, r21
     25e:	ad a4       	ldd	r10, Y+45	; 0x2d
     260:	be a4       	ldd	r11, Y+46	; 0x2e
     262:	cf a4       	ldd	r12, Y+47	; 0x2f
     264:	d8 a8       	ldd	r13, Y+48	; 0x30
     266:	04 c0       	rjmp	.+8      	; 0x270 <__udivdi3+0x186>
     268:	aa 0c       	add	r10, r10
     26a:	bb 1c       	adc	r11, r11
     26c:	cc 1c       	adc	r12, r12
     26e:	dd 1c       	adc	r13, r13
     270:	ea 94       	dec	r14
     272:	d2 f7       	brpl	.-12     	; 0x268 <__udivdi3+0x17e>
     274:	ad a6       	std	Y+45, r10	; 0x2d
     276:	be a6       	std	Y+46, r11	; 0x2e
     278:	cf a6       	std	Y+47, r12	; 0x2f
     27a:	d8 aa       	std	Y+48, r13	; 0x30
     27c:	62 01       	movw	r12, r4
     27e:	ee 24       	eor	r14, r14
     280:	ff 24       	eor	r15, r15
     282:	cd aa       	std	Y+53, r12	; 0x35
     284:	de aa       	std	Y+54, r13	; 0x36
     286:	ef aa       	std	Y+55, r14	; 0x37
     288:	f8 ae       	std	Y+56, r15	; 0x38
     28a:	92 01       	movw	r18, r4
     28c:	81 01       	movw	r16, r2
     28e:	20 70       	andi	r18, 0x00	; 0
     290:	30 70       	andi	r19, 0x00	; 0
     292:	09 af       	std	Y+57, r16	; 0x39
     294:	1a af       	std	Y+58, r17	; 0x3a
     296:	2b af       	std	Y+59, r18	; 0x3b
     298:	3c af       	std	Y+60, r19	; 0x3c
     29a:	c4 01       	movw	r24, r8
     29c:	b3 01       	movw	r22, r6
     29e:	a7 01       	movw	r20, r14
     2a0:	96 01       	movw	r18, r12
     2a2:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
     2a6:	7b 01       	movw	r14, r22
     2a8:	8c 01       	movw	r16, r24
     2aa:	c4 01       	movw	r24, r8
     2ac:	b3 01       	movw	r22, r6
     2ae:	2d a9       	ldd	r18, Y+53	; 0x35
     2b0:	3e a9       	ldd	r19, Y+54	; 0x36
     2b2:	4f a9       	ldd	r20, Y+55	; 0x37
     2b4:	58 ad       	ldd	r21, Y+56	; 0x38
     2b6:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
     2ba:	c9 01       	movw	r24, r18
     2bc:	da 01       	movw	r26, r20
     2be:	3c 01       	movw	r6, r24
     2c0:	4d 01       	movw	r8, r26
     2c2:	c4 01       	movw	r24, r8
     2c4:	b3 01       	movw	r22, r6
     2c6:	29 ad       	ldd	r18, Y+57	; 0x39
     2c8:	3a ad       	ldd	r19, Y+58	; 0x3a
     2ca:	4b ad       	ldd	r20, Y+59	; 0x3b
     2cc:	5c ad       	ldd	r21, Y+60	; 0x3c
     2ce:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
     2d2:	9b 01       	movw	r18, r22
     2d4:	ac 01       	movw	r20, r24
     2d6:	87 01       	movw	r16, r14
     2d8:	ff 24       	eor	r15, r15
     2da:	ee 24       	eor	r14, r14
     2dc:	ad a4       	ldd	r10, Y+45	; 0x2d
     2de:	be a4       	ldd	r11, Y+46	; 0x2e
     2e0:	cf a4       	ldd	r12, Y+47	; 0x2f
     2e2:	d8 a8       	ldd	r13, Y+48	; 0x30
     2e4:	c6 01       	movw	r24, r12
     2e6:	aa 27       	eor	r26, r26
     2e8:	bb 27       	eor	r27, r27
     2ea:	57 01       	movw	r10, r14
     2ec:	68 01       	movw	r12, r16
     2ee:	a8 2a       	or	r10, r24
     2f0:	b9 2a       	or	r11, r25
     2f2:	ca 2a       	or	r12, r26
     2f4:	db 2a       	or	r13, r27
     2f6:	a2 16       	cp	r10, r18
     2f8:	b3 06       	cpc	r11, r19
     2fa:	c4 06       	cpc	r12, r20
     2fc:	d5 06       	cpc	r13, r21
     2fe:	e0 f4       	brcc	.+56     	; 0x338 <__udivdi3+0x24e>
     300:	08 94       	sec
     302:	61 08       	sbc	r6, r1
     304:	71 08       	sbc	r7, r1
     306:	81 08       	sbc	r8, r1
     308:	91 08       	sbc	r9, r1
     30a:	a2 0c       	add	r10, r2
     30c:	b3 1c       	adc	r11, r3
     30e:	c4 1c       	adc	r12, r4
     310:	d5 1c       	adc	r13, r5
     312:	a2 14       	cp	r10, r2
     314:	b3 04       	cpc	r11, r3
     316:	c4 04       	cpc	r12, r4
     318:	d5 04       	cpc	r13, r5
     31a:	70 f0       	brcs	.+28     	; 0x338 <__udivdi3+0x24e>
     31c:	a2 16       	cp	r10, r18
     31e:	b3 06       	cpc	r11, r19
     320:	c4 06       	cpc	r12, r20
     322:	d5 06       	cpc	r13, r21
     324:	48 f4       	brcc	.+18     	; 0x338 <__udivdi3+0x24e>
     326:	08 94       	sec
     328:	61 08       	sbc	r6, r1
     32a:	71 08       	sbc	r7, r1
     32c:	81 08       	sbc	r8, r1
     32e:	91 08       	sbc	r9, r1
     330:	a2 0c       	add	r10, r2
     332:	b3 1c       	adc	r11, r3
     334:	c4 1c       	adc	r12, r4
     336:	d5 1c       	adc	r13, r5
     338:	a2 1a       	sub	r10, r18
     33a:	b3 0a       	sbc	r11, r19
     33c:	c4 0a       	sbc	r12, r20
     33e:	d5 0a       	sbc	r13, r21
     340:	c6 01       	movw	r24, r12
     342:	b5 01       	movw	r22, r10
     344:	2d a9       	ldd	r18, Y+53	; 0x35
     346:	3e a9       	ldd	r19, Y+54	; 0x36
     348:	4f a9       	ldd	r20, Y+55	; 0x37
     34a:	58 ad       	ldd	r21, Y+56	; 0x38
     34c:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
     350:	7b 01       	movw	r14, r22
     352:	8c 01       	movw	r16, r24
     354:	c6 01       	movw	r24, r12
     356:	b5 01       	movw	r22, r10
     358:	2d a9       	ldd	r18, Y+53	; 0x35
     35a:	3e a9       	ldd	r19, Y+54	; 0x36
     35c:	4f a9       	ldd	r20, Y+55	; 0x37
     35e:	58 ad       	ldd	r21, Y+56	; 0x38
     360:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
     364:	c9 01       	movw	r24, r18
     366:	da 01       	movw	r26, r20
     368:	5c 01       	movw	r10, r24
     36a:	6d 01       	movw	r12, r26
     36c:	c6 01       	movw	r24, r12
     36e:	b5 01       	movw	r22, r10
     370:	29 ad       	ldd	r18, Y+57	; 0x39
     372:	3a ad       	ldd	r19, Y+58	; 0x3a
     374:	4b ad       	ldd	r20, Y+59	; 0x3b
     376:	5c ad       	ldd	r21, Y+60	; 0x3c
     378:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
     37c:	9b 01       	movw	r18, r22
     37e:	ac 01       	movw	r20, r24
     380:	87 01       	movw	r16, r14
     382:	ff 24       	eor	r15, r15
     384:	ee 24       	eor	r14, r14
     386:	8d a5       	ldd	r24, Y+45	; 0x2d
     388:	9e a5       	ldd	r25, Y+46	; 0x2e
     38a:	af a5       	ldd	r26, Y+47	; 0x2f
     38c:	b8 a9       	ldd	r27, Y+48	; 0x30
     38e:	a0 70       	andi	r26, 0x00	; 0
     390:	b0 70       	andi	r27, 0x00	; 0
     392:	e8 2a       	or	r14, r24
     394:	f9 2a       	or	r15, r25
     396:	0a 2b       	or	r16, r26
     398:	1b 2b       	or	r17, r27
     39a:	e2 16       	cp	r14, r18
     39c:	f3 06       	cpc	r15, r19
     39e:	04 07       	cpc	r16, r20
     3a0:	15 07       	cpc	r17, r21
     3a2:	c0 f4       	brcc	.+48     	; 0x3d4 <__udivdi3+0x2ea>
     3a4:	08 94       	sec
     3a6:	a1 08       	sbc	r10, r1
     3a8:	b1 08       	sbc	r11, r1
     3aa:	c1 08       	sbc	r12, r1
     3ac:	d1 08       	sbc	r13, r1
     3ae:	e2 0c       	add	r14, r2
     3b0:	f3 1c       	adc	r15, r3
     3b2:	04 1d       	adc	r16, r4
     3b4:	15 1d       	adc	r17, r5
     3b6:	e2 14       	cp	r14, r2
     3b8:	f3 04       	cpc	r15, r3
     3ba:	04 05       	cpc	r16, r4
     3bc:	15 05       	cpc	r17, r5
     3be:	50 f0       	brcs	.+20     	; 0x3d4 <__udivdi3+0x2ea>
     3c0:	e2 16       	cp	r14, r18
     3c2:	f3 06       	cpc	r15, r19
     3c4:	04 07       	cpc	r16, r20
     3c6:	15 07       	cpc	r17, r21
     3c8:	28 f4       	brcc	.+10     	; 0x3d4 <__udivdi3+0x2ea>
     3ca:	08 94       	sec
     3cc:	a1 08       	sbc	r10, r1
     3ce:	b1 08       	sbc	r11, r1
     3d0:	c1 08       	sbc	r12, r1
     3d2:	d1 08       	sbc	r13, r1
     3d4:	d3 01       	movw	r26, r6
     3d6:	99 27       	eor	r25, r25
     3d8:	88 27       	eor	r24, r24
     3da:	86 01       	movw	r16, r12
     3dc:	75 01       	movw	r14, r10
     3de:	e8 2a       	or	r14, r24
     3e0:	f9 2a       	or	r15, r25
     3e2:	0a 2b       	or	r16, r26
     3e4:	1b 2b       	or	r17, r27
     3e6:	e9 aa       	std	Y+49, r14	; 0x31
     3e8:	fa aa       	std	Y+50, r15	; 0x32
     3ea:	0b ab       	std	Y+51, r16	; 0x33
     3ec:	1c ab       	std	Y+52, r17	; 0x34
     3ee:	cf c4       	rjmp	.+2462   	; 0xd8e <__stack+0x52f>
     3f0:	21 14       	cp	r2, r1
     3f2:	31 04       	cpc	r3, r1
     3f4:	41 04       	cpc	r4, r1
     3f6:	51 04       	cpc	r5, r1
     3f8:	71 f4       	brne	.+28     	; 0x416 <__udivdi3+0x32c>
     3fa:	61 e0       	ldi	r22, 0x01	; 1
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	40 e0       	ldi	r20, 0x00	; 0
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
     40e:	c9 01       	movw	r24, r18
     410:	da 01       	movw	r26, r20
     412:	1c 01       	movw	r2, r24
     414:	2d 01       	movw	r4, r26
     416:	00 e0       	ldi	r16, 0x00	; 0
     418:	20 16       	cp	r2, r16
     41a:	00 e0       	ldi	r16, 0x00	; 0
     41c:	30 06       	cpc	r3, r16
     41e:	01 e0       	ldi	r16, 0x01	; 1
     420:	40 06       	cpc	r4, r16
     422:	00 e0       	ldi	r16, 0x00	; 0
     424:	50 06       	cpc	r5, r16
     426:	88 f4       	brcc	.+34     	; 0x44a <__udivdi3+0x360>
     428:	1f ef       	ldi	r17, 0xFF	; 255
     42a:	21 16       	cp	r2, r17
     42c:	31 04       	cpc	r3, r1
     42e:	41 04       	cpc	r4, r1
     430:	51 04       	cpc	r5, r1
     432:	31 f0       	breq	.+12     	; 0x440 <__udivdi3+0x356>
     434:	28 f0       	brcs	.+10     	; 0x440 <__udivdi3+0x356>
     436:	48 e0       	ldi	r20, 0x08	; 8
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	70 e0       	ldi	r23, 0x00	; 0
     43e:	17 c0       	rjmp	.+46     	; 0x46e <__udivdi3+0x384>
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	12 c0       	rjmp	.+36     	; 0x46e <__udivdi3+0x384>
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	22 16       	cp	r2, r18
     44e:	20 e0       	ldi	r18, 0x00	; 0
     450:	32 06       	cpc	r3, r18
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	42 06       	cpc	r4, r18
     456:	21 e0       	ldi	r18, 0x01	; 1
     458:	52 06       	cpc	r5, r18
     45a:	28 f0       	brcs	.+10     	; 0x466 <__udivdi3+0x37c>
     45c:	48 e1       	ldi	r20, 0x18	; 24
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	04 c0       	rjmp	.+8      	; 0x46e <__udivdi3+0x384>
     466:	40 e1       	ldi	r20, 0x10	; 16
     468:	50 e0       	ldi	r21, 0x00	; 0
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	d2 01       	movw	r26, r4
     470:	c1 01       	movw	r24, r2
     472:	04 2e       	mov	r0, r20
     474:	04 c0       	rjmp	.+8      	; 0x47e <__udivdi3+0x394>
     476:	b6 95       	lsr	r27
     478:	a7 95       	ror	r26
     47a:	97 95       	ror	r25
     47c:	87 95       	ror	r24
     47e:	0a 94       	dec	r0
     480:	d2 f7       	brpl	.-12     	; 0x476 <__udivdi3+0x38c>
     482:	87 50       	subi	r24, 0x07	; 7
     484:	9f 4f       	sbci	r25, 0xFF	; 255
     486:	dc 01       	movw	r26, r24
     488:	2c 91       	ld	r18, X
     48a:	e0 e2       	ldi	r30, 0x20	; 32
     48c:	ee 2e       	mov	r14, r30
     48e:	f1 2c       	mov	r15, r1
     490:	01 2d       	mov	r16, r1
     492:	11 2d       	mov	r17, r1
     494:	d8 01       	movw	r26, r16
     496:	c7 01       	movw	r24, r14
     498:	84 1b       	sub	r24, r20
     49a:	95 0b       	sbc	r25, r21
     49c:	a6 0b       	sbc	r26, r22
     49e:	b7 0b       	sbc	r27, r23
     4a0:	82 1b       	sub	r24, r18
     4a2:	91 09       	sbc	r25, r1
     4a4:	a1 09       	sbc	r26, r1
     4a6:	b1 09       	sbc	r27, r1
     4a8:	00 97       	sbiw	r24, 0x00	; 0
     4aa:	a1 05       	cpc	r26, r1
     4ac:	b1 05       	cpc	r27, r1
     4ae:	61 f4       	brne	.+24     	; 0x4c8 <__udivdi3+0x3de>
     4b0:	64 01       	movw	r12, r8
     4b2:	53 01       	movw	r10, r6
     4b4:	a2 18       	sub	r10, r2
     4b6:	b3 08       	sbc	r11, r3
     4b8:	c4 08       	sbc	r12, r4
     4ba:	d5 08       	sbc	r13, r5
     4bc:	31 e0       	ldi	r19, 0x01	; 1
     4be:	63 2e       	mov	r6, r19
     4c0:	71 2c       	mov	r7, r1
     4c2:	81 2c       	mov	r8, r1
     4c4:	91 2c       	mov	r9, r1
     4c6:	1e c1       	rjmp	.+572    	; 0x704 <__udivdi3+0x61a>
     4c8:	6f 96       	adiw	r28, 0x1f	; 31
     4ca:	8f af       	std	Y+63, r24	; 0x3f
     4cc:	6f 97       	sbiw	r28, 0x1f	; 31
     4ce:	08 2e       	mov	r0, r24
     4d0:	04 c0       	rjmp	.+8      	; 0x4da <__udivdi3+0x3f0>
     4d2:	22 0c       	add	r2, r2
     4d4:	33 1c       	adc	r3, r3
     4d6:	44 1c       	adc	r4, r4
     4d8:	55 1c       	adc	r5, r5
     4da:	0a 94       	dec	r0
     4dc:	d2 f7       	brpl	.-12     	; 0x4d2 <__udivdi3+0x3e8>
     4de:	ee 2d       	mov	r30, r14
     4e0:	e8 1b       	sub	r30, r24
     4e2:	64 01       	movw	r12, r8
     4e4:	53 01       	movw	r10, r6
     4e6:	0e 2e       	mov	r0, r30
     4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <__udivdi3+0x408>
     4ea:	d6 94       	lsr	r13
     4ec:	c7 94       	ror	r12
     4ee:	b7 94       	ror	r11
     4f0:	a7 94       	ror	r10
     4f2:	0a 94       	dec	r0
     4f4:	d2 f7       	brpl	.-12     	; 0x4ea <__udivdi3+0x400>
     4f6:	a4 01       	movw	r20, r8
     4f8:	93 01       	movw	r18, r6
     4fa:	6f 96       	adiw	r28, 0x1f	; 31
     4fc:	0f ac       	ldd	r0, Y+63	; 0x3f
     4fe:	6f 97       	sbiw	r28, 0x1f	; 31
     500:	04 c0       	rjmp	.+8      	; 0x50a <__udivdi3+0x420>
     502:	22 0f       	add	r18, r18
     504:	33 1f       	adc	r19, r19
     506:	44 1f       	adc	r20, r20
     508:	55 1f       	adc	r21, r21
     50a:	0a 94       	dec	r0
     50c:	d2 f7       	brpl	.-12     	; 0x502 <__udivdi3+0x418>
     50e:	6d a4       	ldd	r6, Y+45	; 0x2d
     510:	7e a4       	ldd	r7, Y+46	; 0x2e
     512:	8f a4       	ldd	r8, Y+47	; 0x2f
     514:	98 a8       	ldd	r9, Y+48	; 0x30
     516:	0e 2e       	mov	r0, r30
     518:	04 c0       	rjmp	.+8      	; 0x522 <__udivdi3+0x438>
     51a:	96 94       	lsr	r9
     51c:	87 94       	ror	r8
     51e:	77 94       	ror	r7
     520:	67 94       	ror	r6
     522:	0a 94       	dec	r0
     524:	d2 f7       	brpl	.-12     	; 0x51a <__udivdi3+0x430>
     526:	84 01       	movw	r16, r8
     528:	73 01       	movw	r14, r6
     52a:	e2 2a       	or	r14, r18
     52c:	f3 2a       	or	r15, r19
     52e:	04 2b       	or	r16, r20
     530:	15 2b       	or	r17, r21
     532:	e9 a6       	std	Y+41, r14	; 0x29
     534:	fa a6       	std	Y+42, r15	; 0x2a
     536:	0b a7       	std	Y+43, r16	; 0x2b
     538:	1c a7       	std	Y+44, r17	; 0x2c
     53a:	32 01       	movw	r6, r4
     53c:	88 24       	eor	r8, r8
     53e:	99 24       	eor	r9, r9
     540:	92 01       	movw	r18, r4
     542:	81 01       	movw	r16, r2
     544:	20 70       	andi	r18, 0x00	; 0
     546:	30 70       	andi	r19, 0x00	; 0
     548:	21 96       	adiw	r28, 0x01	; 1
     54a:	0c af       	std	Y+60, r16	; 0x3c
     54c:	1d af       	std	Y+61, r17	; 0x3d
     54e:	2e af       	std	Y+62, r18	; 0x3e
     550:	3f af       	std	Y+63, r19	; 0x3f
     552:	21 97       	sbiw	r28, 0x01	; 1
     554:	c6 01       	movw	r24, r12
     556:	b5 01       	movw	r22, r10
     558:	a4 01       	movw	r20, r8
     55a:	93 01       	movw	r18, r6
     55c:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
     560:	7b 01       	movw	r14, r22
     562:	8c 01       	movw	r16, r24
     564:	c6 01       	movw	r24, r12
     566:	b5 01       	movw	r22, r10
     568:	a4 01       	movw	r20, r8
     56a:	93 01       	movw	r18, r6
     56c:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
     570:	c9 01       	movw	r24, r18
     572:	da 01       	movw	r26, r20
     574:	25 96       	adiw	r28, 0x05	; 5
     576:	8c af       	std	Y+60, r24	; 0x3c
     578:	9d af       	std	Y+61, r25	; 0x3d
     57a:	ae af       	std	Y+62, r26	; 0x3e
     57c:	bf af       	std	Y+63, r27	; 0x3f
     57e:	25 97       	sbiw	r28, 0x05	; 5
     580:	bc 01       	movw	r22, r24
     582:	cd 01       	movw	r24, r26
     584:	21 96       	adiw	r28, 0x01	; 1
     586:	2c ad       	ldd	r18, Y+60	; 0x3c
     588:	3d ad       	ldd	r19, Y+61	; 0x3d
     58a:	4e ad       	ldd	r20, Y+62	; 0x3e
     58c:	5f ad       	ldd	r21, Y+63	; 0x3f
     58e:	21 97       	sbiw	r28, 0x01	; 1
     590:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
     594:	9b 01       	movw	r18, r22
     596:	ac 01       	movw	r20, r24
     598:	87 01       	movw	r16, r14
     59a:	ff 24       	eor	r15, r15
     59c:	ee 24       	eor	r14, r14
     59e:	a9 a4       	ldd	r10, Y+41	; 0x29
     5a0:	ba a4       	ldd	r11, Y+42	; 0x2a
     5a2:	cb a4       	ldd	r12, Y+43	; 0x2b
     5a4:	dc a4       	ldd	r13, Y+44	; 0x2c
     5a6:	c6 01       	movw	r24, r12
     5a8:	aa 27       	eor	r26, r26
     5aa:	bb 27       	eor	r27, r27
     5ac:	5c 01       	movw	r10, r24
     5ae:	6d 01       	movw	r12, r26
     5b0:	ae 28       	or	r10, r14
     5b2:	bf 28       	or	r11, r15
     5b4:	c0 2a       	or	r12, r16
     5b6:	d1 2a       	or	r13, r17
     5b8:	a2 16       	cp	r10, r18
     5ba:	b3 06       	cpc	r11, r19
     5bc:	c4 06       	cpc	r12, r20
     5be:	d5 06       	cpc	r13, r21
     5c0:	60 f5       	brcc	.+88     	; 0x61a <__udivdi3+0x530>
     5c2:	25 96       	adiw	r28, 0x05	; 5
     5c4:	6c ad       	ldd	r22, Y+60	; 0x3c
     5c6:	7d ad       	ldd	r23, Y+61	; 0x3d
     5c8:	8e ad       	ldd	r24, Y+62	; 0x3e
     5ca:	9f ad       	ldd	r25, Y+63	; 0x3f
     5cc:	25 97       	sbiw	r28, 0x05	; 5
     5ce:	61 50       	subi	r22, 0x01	; 1
     5d0:	70 40       	sbci	r23, 0x00	; 0
     5d2:	80 40       	sbci	r24, 0x00	; 0
     5d4:	90 40       	sbci	r25, 0x00	; 0
     5d6:	25 96       	adiw	r28, 0x05	; 5
     5d8:	6c af       	std	Y+60, r22	; 0x3c
     5da:	7d af       	std	Y+61, r23	; 0x3d
     5dc:	8e af       	std	Y+62, r24	; 0x3e
     5de:	9f af       	std	Y+63, r25	; 0x3f
     5e0:	25 97       	sbiw	r28, 0x05	; 5
     5e2:	a2 0c       	add	r10, r2
     5e4:	b3 1c       	adc	r11, r3
     5e6:	c4 1c       	adc	r12, r4
     5e8:	d5 1c       	adc	r13, r5
     5ea:	a2 14       	cp	r10, r2
     5ec:	b3 04       	cpc	r11, r3
     5ee:	c4 04       	cpc	r12, r4
     5f0:	d5 04       	cpc	r13, r5
     5f2:	98 f0       	brcs	.+38     	; 0x61a <__udivdi3+0x530>
     5f4:	a2 16       	cp	r10, r18
     5f6:	b3 06       	cpc	r11, r19
     5f8:	c4 06       	cpc	r12, r20
     5fa:	d5 06       	cpc	r13, r21
     5fc:	70 f4       	brcc	.+28     	; 0x61a <__udivdi3+0x530>
     5fe:	61 50       	subi	r22, 0x01	; 1
     600:	70 40       	sbci	r23, 0x00	; 0
     602:	80 40       	sbci	r24, 0x00	; 0
     604:	90 40       	sbci	r25, 0x00	; 0
     606:	25 96       	adiw	r28, 0x05	; 5
     608:	6c af       	std	Y+60, r22	; 0x3c
     60a:	7d af       	std	Y+61, r23	; 0x3d
     60c:	8e af       	std	Y+62, r24	; 0x3e
     60e:	9f af       	std	Y+63, r25	; 0x3f
     610:	25 97       	sbiw	r28, 0x05	; 5
     612:	a2 0c       	add	r10, r2
     614:	b3 1c       	adc	r11, r3
     616:	c4 1c       	adc	r12, r4
     618:	d5 1c       	adc	r13, r5
     61a:	a2 1a       	sub	r10, r18
     61c:	b3 0a       	sbc	r11, r19
     61e:	c4 0a       	sbc	r12, r20
     620:	d5 0a       	sbc	r13, r21
     622:	c6 01       	movw	r24, r12
     624:	b5 01       	movw	r22, r10
     626:	a4 01       	movw	r20, r8
     628:	93 01       	movw	r18, r6
     62a:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
     62e:	7b 01       	movw	r14, r22
     630:	8c 01       	movw	r16, r24
     632:	c6 01       	movw	r24, r12
     634:	b5 01       	movw	r22, r10
     636:	a4 01       	movw	r20, r8
     638:	93 01       	movw	r18, r6
     63a:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
     63e:	c9 01       	movw	r24, r18
     640:	da 01       	movw	r26, r20
     642:	3c 01       	movw	r6, r24
     644:	4d 01       	movw	r8, r26
     646:	c4 01       	movw	r24, r8
     648:	b3 01       	movw	r22, r6
     64a:	21 96       	adiw	r28, 0x01	; 1
     64c:	2c ad       	ldd	r18, Y+60	; 0x3c
     64e:	3d ad       	ldd	r19, Y+61	; 0x3d
     650:	4e ad       	ldd	r20, Y+62	; 0x3e
     652:	5f ad       	ldd	r21, Y+63	; 0x3f
     654:	21 97       	sbiw	r28, 0x01	; 1
     656:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
     65a:	9b 01       	movw	r18, r22
     65c:	ac 01       	movw	r20, r24
     65e:	87 01       	movw	r16, r14
     660:	ff 24       	eor	r15, r15
     662:	ee 24       	eor	r14, r14
     664:	89 a5       	ldd	r24, Y+41	; 0x29
     666:	9a a5       	ldd	r25, Y+42	; 0x2a
     668:	ab a5       	ldd	r26, Y+43	; 0x2b
     66a:	bc a5       	ldd	r27, Y+44	; 0x2c
     66c:	a0 70       	andi	r26, 0x00	; 0
     66e:	b0 70       	andi	r27, 0x00	; 0
     670:	57 01       	movw	r10, r14
     672:	68 01       	movw	r12, r16
     674:	a8 2a       	or	r10, r24
     676:	b9 2a       	or	r11, r25
     678:	ca 2a       	or	r12, r26
     67a:	db 2a       	or	r13, r27
     67c:	a2 16       	cp	r10, r18
     67e:	b3 06       	cpc	r11, r19
     680:	c4 06       	cpc	r12, r20
     682:	d5 06       	cpc	r13, r21
     684:	e0 f4       	brcc	.+56     	; 0x6be <__udivdi3+0x5d4>
     686:	08 94       	sec
     688:	61 08       	sbc	r6, r1
     68a:	71 08       	sbc	r7, r1
     68c:	81 08       	sbc	r8, r1
     68e:	91 08       	sbc	r9, r1
     690:	a2 0c       	add	r10, r2
     692:	b3 1c       	adc	r11, r3
     694:	c4 1c       	adc	r12, r4
     696:	d5 1c       	adc	r13, r5
     698:	a2 14       	cp	r10, r2
     69a:	b3 04       	cpc	r11, r3
     69c:	c4 04       	cpc	r12, r4
     69e:	d5 04       	cpc	r13, r5
     6a0:	70 f0       	brcs	.+28     	; 0x6be <__udivdi3+0x5d4>
     6a2:	a2 16       	cp	r10, r18
     6a4:	b3 06       	cpc	r11, r19
     6a6:	c4 06       	cpc	r12, r20
     6a8:	d5 06       	cpc	r13, r21
     6aa:	48 f4       	brcc	.+18     	; 0x6be <__udivdi3+0x5d4>
     6ac:	08 94       	sec
     6ae:	61 08       	sbc	r6, r1
     6b0:	71 08       	sbc	r7, r1
     6b2:	81 08       	sbc	r8, r1
     6b4:	91 08       	sbc	r9, r1
     6b6:	a2 0c       	add	r10, r2
     6b8:	b3 1c       	adc	r11, r3
     6ba:	c4 1c       	adc	r12, r4
     6bc:	d5 1c       	adc	r13, r5
     6be:	8d a5       	ldd	r24, Y+45	; 0x2d
     6c0:	9e a5       	ldd	r25, Y+46	; 0x2e
     6c2:	af a5       	ldd	r26, Y+47	; 0x2f
     6c4:	b8 a9       	ldd	r27, Y+48	; 0x30
     6c6:	6f 96       	adiw	r28, 0x1f	; 31
     6c8:	0f ac       	ldd	r0, Y+63	; 0x3f
     6ca:	6f 97       	sbiw	r28, 0x1f	; 31
     6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <__udivdi3+0x5ec>
     6ce:	88 0f       	add	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	aa 1f       	adc	r26, r26
     6d4:	bb 1f       	adc	r27, r27
     6d6:	0a 94       	dec	r0
     6d8:	d2 f7       	brpl	.-12     	; 0x6ce <__udivdi3+0x5e4>
     6da:	8d a7       	std	Y+45, r24	; 0x2d
     6dc:	9e a7       	std	Y+46, r25	; 0x2e
     6de:	af a7       	std	Y+47, r26	; 0x2f
     6e0:	b8 ab       	std	Y+48, r27	; 0x30
     6e2:	a2 1a       	sub	r10, r18
     6e4:	b3 0a       	sbc	r11, r19
     6e6:	c4 0a       	sbc	r12, r20
     6e8:	d5 0a       	sbc	r13, r21
     6ea:	25 96       	adiw	r28, 0x05	; 5
     6ec:	ec ac       	ldd	r14, Y+60	; 0x3c
     6ee:	fd ac       	ldd	r15, Y+61	; 0x3d
     6f0:	0e ad       	ldd	r16, Y+62	; 0x3e
     6f2:	1f ad       	ldd	r17, Y+63	; 0x3f
     6f4:	25 97       	sbiw	r28, 0x05	; 5
     6f6:	d7 01       	movw	r26, r14
     6f8:	99 27       	eor	r25, r25
     6fa:	88 27       	eor	r24, r24
     6fc:	68 2a       	or	r6, r24
     6fe:	79 2a       	or	r7, r25
     700:	8a 2a       	or	r8, r26
     702:	9b 2a       	or	r9, r27
     704:	82 01       	movw	r16, r4
     706:	22 27       	eor	r18, r18
     708:	33 27       	eor	r19, r19
     70a:	29 96       	adiw	r28, 0x09	; 9
     70c:	0c af       	std	Y+60, r16	; 0x3c
     70e:	1d af       	std	Y+61, r17	; 0x3d
     710:	2e af       	std	Y+62, r18	; 0x3e
     712:	3f af       	std	Y+63, r19	; 0x3f
     714:	29 97       	sbiw	r28, 0x09	; 9
     716:	a2 01       	movw	r20, r4
     718:	91 01       	movw	r18, r2
     71a:	40 70       	andi	r20, 0x00	; 0
     71c:	50 70       	andi	r21, 0x00	; 0
     71e:	2d 96       	adiw	r28, 0x0d	; 13
     720:	2c af       	std	Y+60, r18	; 0x3c
     722:	3d af       	std	Y+61, r19	; 0x3d
     724:	4e af       	std	Y+62, r20	; 0x3e
     726:	5f af       	std	Y+63, r21	; 0x3f
     728:	2d 97       	sbiw	r28, 0x0d	; 13
     72a:	c6 01       	movw	r24, r12
     72c:	b5 01       	movw	r22, r10
     72e:	29 96       	adiw	r28, 0x09	; 9
     730:	2c ad       	ldd	r18, Y+60	; 0x3c
     732:	3d ad       	ldd	r19, Y+61	; 0x3d
     734:	4e ad       	ldd	r20, Y+62	; 0x3e
     736:	5f ad       	ldd	r21, Y+63	; 0x3f
     738:	29 97       	sbiw	r28, 0x09	; 9
     73a:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
     73e:	7b 01       	movw	r14, r22
     740:	8c 01       	movw	r16, r24
     742:	c6 01       	movw	r24, r12
     744:	b5 01       	movw	r22, r10
     746:	29 96       	adiw	r28, 0x09	; 9
     748:	2c ad       	ldd	r18, Y+60	; 0x3c
     74a:	3d ad       	ldd	r19, Y+61	; 0x3d
     74c:	4e ad       	ldd	r20, Y+62	; 0x3e
     74e:	5f ad       	ldd	r21, Y+63	; 0x3f
     750:	29 97       	sbiw	r28, 0x09	; 9
     752:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
     756:	c9 01       	movw	r24, r18
     758:	da 01       	movw	r26, r20
     75a:	61 96       	adiw	r28, 0x11	; 17
     75c:	8c af       	std	Y+60, r24	; 0x3c
     75e:	9d af       	std	Y+61, r25	; 0x3d
     760:	ae af       	std	Y+62, r26	; 0x3e
     762:	bf af       	std	Y+63, r27	; 0x3f
     764:	61 97       	sbiw	r28, 0x11	; 17
     766:	bc 01       	movw	r22, r24
     768:	cd 01       	movw	r24, r26
     76a:	2d 96       	adiw	r28, 0x0d	; 13
     76c:	2c ad       	ldd	r18, Y+60	; 0x3c
     76e:	3d ad       	ldd	r19, Y+61	; 0x3d
     770:	4e ad       	ldd	r20, Y+62	; 0x3e
     772:	5f ad       	ldd	r21, Y+63	; 0x3f
     774:	2d 97       	sbiw	r28, 0x0d	; 13
     776:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
     77a:	9b 01       	movw	r18, r22
     77c:	ac 01       	movw	r20, r24
     77e:	87 01       	movw	r16, r14
     780:	ff 24       	eor	r15, r15
     782:	ee 24       	eor	r14, r14
     784:	ad a4       	ldd	r10, Y+45	; 0x2d
     786:	be a4       	ldd	r11, Y+46	; 0x2e
     788:	cf a4       	ldd	r12, Y+47	; 0x2f
     78a:	d8 a8       	ldd	r13, Y+48	; 0x30
     78c:	c6 01       	movw	r24, r12
     78e:	aa 27       	eor	r26, r26
     790:	bb 27       	eor	r27, r27
     792:	57 01       	movw	r10, r14
     794:	68 01       	movw	r12, r16
     796:	a8 2a       	or	r10, r24
     798:	b9 2a       	or	r11, r25
     79a:	ca 2a       	or	r12, r26
     79c:	db 2a       	or	r13, r27
     79e:	a2 16       	cp	r10, r18
     7a0:	b3 06       	cpc	r11, r19
     7a2:	c4 06       	cpc	r12, r20
     7a4:	d5 06       	cpc	r13, r21
     7a6:	60 f5       	brcc	.+88     	; 0x800 <__udivdi3+0x716>
     7a8:	61 96       	adiw	r28, 0x11	; 17
     7aa:	6c ad       	ldd	r22, Y+60	; 0x3c
     7ac:	7d ad       	ldd	r23, Y+61	; 0x3d
     7ae:	8e ad       	ldd	r24, Y+62	; 0x3e
     7b0:	9f ad       	ldd	r25, Y+63	; 0x3f
     7b2:	61 97       	sbiw	r28, 0x11	; 17
     7b4:	61 50       	subi	r22, 0x01	; 1
     7b6:	70 40       	sbci	r23, 0x00	; 0
     7b8:	80 40       	sbci	r24, 0x00	; 0
     7ba:	90 40       	sbci	r25, 0x00	; 0
     7bc:	61 96       	adiw	r28, 0x11	; 17
     7be:	6c af       	std	Y+60, r22	; 0x3c
     7c0:	7d af       	std	Y+61, r23	; 0x3d
     7c2:	8e af       	std	Y+62, r24	; 0x3e
     7c4:	9f af       	std	Y+63, r25	; 0x3f
     7c6:	61 97       	sbiw	r28, 0x11	; 17
     7c8:	a2 0c       	add	r10, r2
     7ca:	b3 1c       	adc	r11, r3
     7cc:	c4 1c       	adc	r12, r4
     7ce:	d5 1c       	adc	r13, r5
     7d0:	a2 14       	cp	r10, r2
     7d2:	b3 04       	cpc	r11, r3
     7d4:	c4 04       	cpc	r12, r4
     7d6:	d5 04       	cpc	r13, r5
     7d8:	98 f0       	brcs	.+38     	; 0x800 <__udivdi3+0x716>
     7da:	a2 16       	cp	r10, r18
     7dc:	b3 06       	cpc	r11, r19
     7de:	c4 06       	cpc	r12, r20
     7e0:	d5 06       	cpc	r13, r21
     7e2:	70 f4       	brcc	.+28     	; 0x800 <__udivdi3+0x716>
     7e4:	61 50       	subi	r22, 0x01	; 1
     7e6:	70 40       	sbci	r23, 0x00	; 0
     7e8:	80 40       	sbci	r24, 0x00	; 0
     7ea:	90 40       	sbci	r25, 0x00	; 0
     7ec:	61 96       	adiw	r28, 0x11	; 17
     7ee:	6c af       	std	Y+60, r22	; 0x3c
     7f0:	7d af       	std	Y+61, r23	; 0x3d
     7f2:	8e af       	std	Y+62, r24	; 0x3e
     7f4:	9f af       	std	Y+63, r25	; 0x3f
     7f6:	61 97       	sbiw	r28, 0x11	; 17
     7f8:	a2 0c       	add	r10, r2
     7fa:	b3 1c       	adc	r11, r3
     7fc:	c4 1c       	adc	r12, r4
     7fe:	d5 1c       	adc	r13, r5
     800:	a2 1a       	sub	r10, r18
     802:	b3 0a       	sbc	r11, r19
     804:	c4 0a       	sbc	r12, r20
     806:	d5 0a       	sbc	r13, r21
     808:	c6 01       	movw	r24, r12
     80a:	b5 01       	movw	r22, r10
     80c:	29 96       	adiw	r28, 0x09	; 9
     80e:	2c ad       	ldd	r18, Y+60	; 0x3c
     810:	3d ad       	ldd	r19, Y+61	; 0x3d
     812:	4e ad       	ldd	r20, Y+62	; 0x3e
     814:	5f ad       	ldd	r21, Y+63	; 0x3f
     816:	29 97       	sbiw	r28, 0x09	; 9
     818:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
     81c:	7b 01       	movw	r14, r22
     81e:	8c 01       	movw	r16, r24
     820:	c6 01       	movw	r24, r12
     822:	b5 01       	movw	r22, r10
     824:	29 96       	adiw	r28, 0x09	; 9
     826:	2c ad       	ldd	r18, Y+60	; 0x3c
     828:	3d ad       	ldd	r19, Y+61	; 0x3d
     82a:	4e ad       	ldd	r20, Y+62	; 0x3e
     82c:	5f ad       	ldd	r21, Y+63	; 0x3f
     82e:	29 97       	sbiw	r28, 0x09	; 9
     830:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
     834:	c9 01       	movw	r24, r18
     836:	da 01       	movw	r26, r20
     838:	5c 01       	movw	r10, r24
     83a:	6d 01       	movw	r12, r26
     83c:	c6 01       	movw	r24, r12
     83e:	b5 01       	movw	r22, r10
     840:	2d 96       	adiw	r28, 0x0d	; 13
     842:	2c ad       	ldd	r18, Y+60	; 0x3c
     844:	3d ad       	ldd	r19, Y+61	; 0x3d
     846:	4e ad       	ldd	r20, Y+62	; 0x3e
     848:	5f ad       	ldd	r21, Y+63	; 0x3f
     84a:	2d 97       	sbiw	r28, 0x0d	; 13
     84c:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
     850:	9b 01       	movw	r18, r22
     852:	ac 01       	movw	r20, r24
     854:	87 01       	movw	r16, r14
     856:	ff 24       	eor	r15, r15
     858:	ee 24       	eor	r14, r14
     85a:	8d a5       	ldd	r24, Y+45	; 0x2d
     85c:	9e a5       	ldd	r25, Y+46	; 0x2e
     85e:	af a5       	ldd	r26, Y+47	; 0x2f
     860:	b8 a9       	ldd	r27, Y+48	; 0x30
     862:	a0 70       	andi	r26, 0x00	; 0
     864:	b0 70       	andi	r27, 0x00	; 0
     866:	e8 2a       	or	r14, r24
     868:	f9 2a       	or	r15, r25
     86a:	0a 2b       	or	r16, r26
     86c:	1b 2b       	or	r17, r27
     86e:	e2 16       	cp	r14, r18
     870:	f3 06       	cpc	r15, r19
     872:	04 07       	cpc	r16, r20
     874:	15 07       	cpc	r17, r21
     876:	c0 f4       	brcc	.+48     	; 0x8a8 <__stack+0x49>
     878:	08 94       	sec
     87a:	a1 08       	sbc	r10, r1
     87c:	b1 08       	sbc	r11, r1
     87e:	c1 08       	sbc	r12, r1
     880:	d1 08       	sbc	r13, r1
     882:	e2 0c       	add	r14, r2
     884:	f3 1c       	adc	r15, r3
     886:	04 1d       	adc	r16, r4
     888:	15 1d       	adc	r17, r5
     88a:	e2 14       	cp	r14, r2
     88c:	f3 04       	cpc	r15, r3
     88e:	04 05       	cpc	r16, r4
     890:	15 05       	cpc	r17, r5
     892:	50 f0       	brcs	.+20     	; 0x8a8 <__stack+0x49>
     894:	e2 16       	cp	r14, r18
     896:	f3 06       	cpc	r15, r19
     898:	04 07       	cpc	r16, r20
     89a:	15 07       	cpc	r17, r21
     89c:	28 f4       	brcc	.+10     	; 0x8a8 <__stack+0x49>
     89e:	08 94       	sec
     8a0:	a1 08       	sbc	r10, r1
     8a2:	b1 08       	sbc	r11, r1
     8a4:	c1 08       	sbc	r12, r1
     8a6:	d1 08       	sbc	r13, r1
     8a8:	61 96       	adiw	r28, 0x11	; 17
     8aa:	ec ac       	ldd	r14, Y+60	; 0x3c
     8ac:	fd ac       	ldd	r15, Y+61	; 0x3d
     8ae:	0e ad       	ldd	r16, Y+62	; 0x3e
     8b0:	1f ad       	ldd	r17, Y+63	; 0x3f
     8b2:	61 97       	sbiw	r28, 0x11	; 17
     8b4:	d7 01       	movw	r26, r14
     8b6:	99 27       	eor	r25, r25
     8b8:	88 27       	eor	r24, r24
     8ba:	96 01       	movw	r18, r12
     8bc:	85 01       	movw	r16, r10
     8be:	08 2b       	or	r16, r24
     8c0:	19 2b       	or	r17, r25
     8c2:	2a 2b       	or	r18, r26
     8c4:	3b 2b       	or	r19, r27
     8c6:	09 ab       	std	Y+49, r16	; 0x31
     8c8:	1a ab       	std	Y+50, r17	; 0x32
     8ca:	2b ab       	std	Y+51, r18	; 0x33
     8cc:	3c ab       	std	Y+52, r19	; 0x34
     8ce:	62 c2       	rjmp	.+1220   	; 0xd94 <__stack+0x535>
     8d0:	6e 14       	cp	r6, r14
     8d2:	7f 04       	cpc	r7, r15
     8d4:	80 06       	cpc	r8, r16
     8d6:	91 06       	cpc	r9, r17
     8d8:	08 f4       	brcc	.+2      	; 0x8dc <__stack+0x7d>
     8da:	51 c2       	rjmp	.+1186   	; 0xd7e <__stack+0x51f>
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	e2 16       	cp	r14, r18
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	f2 06       	cpc	r15, r18
     8e4:	21 e0       	ldi	r18, 0x01	; 1
     8e6:	02 07       	cpc	r16, r18
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	12 07       	cpc	r17, r18
     8ec:	88 f4       	brcc	.+34     	; 0x910 <__stack+0xb1>
     8ee:	3f ef       	ldi	r19, 0xFF	; 255
     8f0:	e3 16       	cp	r14, r19
     8f2:	f1 04       	cpc	r15, r1
     8f4:	01 05       	cpc	r16, r1
     8f6:	11 05       	cpc	r17, r1
     8f8:	31 f0       	breq	.+12     	; 0x906 <__stack+0xa7>
     8fa:	28 f0       	brcs	.+10     	; 0x906 <__stack+0xa7>
     8fc:	48 e0       	ldi	r20, 0x08	; 8
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	17 c0       	rjmp	.+46     	; 0x934 <__stack+0xd5>
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	12 c0       	rjmp	.+36     	; 0x934 <__stack+0xd5>
     910:	40 e0       	ldi	r20, 0x00	; 0
     912:	e4 16       	cp	r14, r20
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	f4 06       	cpc	r15, r20
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	04 07       	cpc	r16, r20
     91c:	41 e0       	ldi	r20, 0x01	; 1
     91e:	14 07       	cpc	r17, r20
     920:	28 f0       	brcs	.+10     	; 0x92c <__stack+0xcd>
     922:	48 e1       	ldi	r20, 0x18	; 24
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__stack+0xd5>
     92c:	40 e1       	ldi	r20, 0x10	; 16
     92e:	50 e0       	ldi	r21, 0x00	; 0
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	d8 01       	movw	r26, r16
     936:	c7 01       	movw	r24, r14
     938:	04 2e       	mov	r0, r20
     93a:	04 c0       	rjmp	.+8      	; 0x944 <__stack+0xe5>
     93c:	b6 95       	lsr	r27
     93e:	a7 95       	ror	r26
     940:	97 95       	ror	r25
     942:	87 95       	ror	r24
     944:	0a 94       	dec	r0
     946:	d2 f7       	brpl	.-12     	; 0x93c <__stack+0xdd>
     948:	87 50       	subi	r24, 0x07	; 7
     94a:	9f 4f       	sbci	r25, 0xFF	; 255
     94c:	dc 01       	movw	r26, r24
     94e:	2c 91       	ld	r18, X
     950:	30 e2       	ldi	r19, 0x20	; 32
     952:	a3 2e       	mov	r10, r19
     954:	b1 2c       	mov	r11, r1
     956:	c1 2c       	mov	r12, r1
     958:	d1 2c       	mov	r13, r1
     95a:	d6 01       	movw	r26, r12
     95c:	c5 01       	movw	r24, r10
     95e:	84 1b       	sub	r24, r20
     960:	95 0b       	sbc	r25, r21
     962:	a6 0b       	sbc	r26, r22
     964:	b7 0b       	sbc	r27, r23
     966:	82 1b       	sub	r24, r18
     968:	91 09       	sbc	r25, r1
     96a:	a1 09       	sbc	r26, r1
     96c:	b1 09       	sbc	r27, r1
     96e:	00 97       	sbiw	r24, 0x00	; 0
     970:	a1 05       	cpc	r26, r1
     972:	b1 05       	cpc	r27, r1
     974:	89 f4       	brne	.+34     	; 0x998 <__stack+0x139>
     976:	e6 14       	cp	r14, r6
     978:	f7 04       	cpc	r15, r7
     97a:	08 05       	cpc	r16, r8
     97c:	19 05       	cpc	r17, r9
     97e:	08 f4       	brcc	.+2      	; 0x982 <__stack+0x123>
     980:	f2 c1       	rjmp	.+996    	; 0xd66 <__stack+0x507>
     982:	6d a4       	ldd	r6, Y+45	; 0x2d
     984:	7e a4       	ldd	r7, Y+46	; 0x2e
     986:	8f a4       	ldd	r8, Y+47	; 0x2f
     988:	98 a8       	ldd	r9, Y+48	; 0x30
     98a:	62 14       	cp	r6, r2
     98c:	73 04       	cpc	r7, r3
     98e:	84 04       	cpc	r8, r4
     990:	95 04       	cpc	r9, r5
     992:	08 f0       	brcs	.+2      	; 0x996 <__stack+0x137>
     994:	e8 c1       	rjmp	.+976    	; 0xd66 <__stack+0x507>
     996:	f3 c1       	rjmp	.+998    	; 0xd7e <__stack+0x51f>
     998:	6e 96       	adiw	r28, 0x1e	; 30
     99a:	8f af       	std	Y+63, r24	; 0x3f
     99c:	6e 97       	sbiw	r28, 0x1e	; 30
     99e:	08 2e       	mov	r0, r24
     9a0:	04 c0       	rjmp	.+8      	; 0x9aa <__stack+0x14b>
     9a2:	ee 0c       	add	r14, r14
     9a4:	ff 1c       	adc	r15, r15
     9a6:	00 1f       	adc	r16, r16
     9a8:	11 1f       	adc	r17, r17
     9aa:	0a 94       	dec	r0
     9ac:	d2 f7       	brpl	.-12     	; 0x9a2 <__stack+0x143>
     9ae:	6a 2d       	mov	r22, r10
     9b0:	68 1b       	sub	r22, r24
     9b2:	d2 01       	movw	r26, r4
     9b4:	c1 01       	movw	r24, r2
     9b6:	06 2e       	mov	r0, r22
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <__stack+0x163>
     9ba:	b6 95       	lsr	r27
     9bc:	a7 95       	ror	r26
     9be:	97 95       	ror	r25
     9c0:	87 95       	ror	r24
     9c2:	0a 94       	dec	r0
     9c4:	d2 f7       	brpl	.-12     	; 0x9ba <__stack+0x15b>
     9c6:	5c 01       	movw	r10, r24
     9c8:	6d 01       	movw	r12, r26
     9ca:	ae 28       	or	r10, r14
     9cc:	bf 28       	or	r11, r15
     9ce:	c0 2a       	or	r12, r16
     9d0:	d1 2a       	or	r13, r17
     9d2:	ad a2       	std	Y+37, r10	; 0x25
     9d4:	be a2       	std	Y+38, r11	; 0x26
     9d6:	cf a2       	std	Y+39, r12	; 0x27
     9d8:	d8 a6       	std	Y+40, r13	; 0x28
     9da:	72 01       	movw	r14, r4
     9dc:	61 01       	movw	r12, r2
     9de:	6e 96       	adiw	r28, 0x1e	; 30
     9e0:	0f ac       	ldd	r0, Y+63	; 0x3f
     9e2:	6e 97       	sbiw	r28, 0x1e	; 30
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__stack+0x18f>
     9e6:	cc 0c       	add	r12, r12
     9e8:	dd 1c       	adc	r13, r13
     9ea:	ee 1c       	adc	r14, r14
     9ec:	ff 1c       	adc	r15, r15
     9ee:	0a 94       	dec	r0
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__stack+0x187>
     9f2:	c9 a2       	std	Y+33, r12	; 0x21
     9f4:	da a2       	std	Y+34, r13	; 0x22
     9f6:	eb a2       	std	Y+35, r14	; 0x23
     9f8:	fc a2       	std	Y+36, r15	; 0x24
     9fa:	64 01       	movw	r12, r8
     9fc:	53 01       	movw	r10, r6
     9fe:	06 2e       	mov	r0, r22
     a00:	04 c0       	rjmp	.+8      	; 0xa0a <__stack+0x1ab>
     a02:	d6 94       	lsr	r13
     a04:	c7 94       	ror	r12
     a06:	b7 94       	ror	r11
     a08:	a7 94       	ror	r10
     a0a:	0a 94       	dec	r0
     a0c:	d2 f7       	brpl	.-12     	; 0xa02 <__stack+0x1a3>
     a0e:	d4 01       	movw	r26, r8
     a10:	c3 01       	movw	r24, r6
     a12:	6e 96       	adiw	r28, 0x1e	; 30
     a14:	0f ac       	ldd	r0, Y+63	; 0x3f
     a16:	6e 97       	sbiw	r28, 0x1e	; 30
     a18:	04 c0       	rjmp	.+8      	; 0xa22 <__stack+0x1c3>
     a1a:	88 0f       	add	r24, r24
     a1c:	99 1f       	adc	r25, r25
     a1e:	aa 1f       	adc	r26, r26
     a20:	bb 1f       	adc	r27, r27
     a22:	0a 94       	dec	r0
     a24:	d2 f7       	brpl	.-12     	; 0xa1a <__stack+0x1bb>
     a26:	ed a4       	ldd	r14, Y+45	; 0x2d
     a28:	fe a4       	ldd	r15, Y+46	; 0x2e
     a2a:	0f a5       	ldd	r16, Y+47	; 0x2f
     a2c:	18 a9       	ldd	r17, Y+48	; 0x30
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__stack+0x1d9>
     a30:	16 95       	lsr	r17
     a32:	07 95       	ror	r16
     a34:	f7 94       	ror	r15
     a36:	e7 94       	ror	r14
     a38:	6a 95       	dec	r22
     a3a:	d2 f7       	brpl	.-12     	; 0xa30 <__stack+0x1d1>
     a3c:	37 01       	movw	r6, r14
     a3e:	48 01       	movw	r8, r16
     a40:	68 2a       	or	r6, r24
     a42:	79 2a       	or	r7, r25
     a44:	8a 2a       	or	r8, r26
     a46:	9b 2a       	or	r9, r27
     a48:	6d 8e       	std	Y+29, r6	; 0x1d
     a4a:	7e 8e       	std	Y+30, r7	; 0x1e
     a4c:	8f 8e       	std	Y+31, r8	; 0x1f
     a4e:	98 a2       	std	Y+32, r9	; 0x20
     a50:	ed a0       	ldd	r14, Y+37	; 0x25
     a52:	fe a0       	ldd	r15, Y+38	; 0x26
     a54:	0f a1       	ldd	r16, Y+39	; 0x27
     a56:	18 a5       	ldd	r17, Y+40	; 0x28
     a58:	38 01       	movw	r6, r16
     a5a:	88 24       	eor	r8, r8
     a5c:	99 24       	eor	r9, r9
     a5e:	98 01       	movw	r18, r16
     a60:	87 01       	movw	r16, r14
     a62:	20 70       	andi	r18, 0x00	; 0
     a64:	30 70       	andi	r19, 0x00	; 0
     a66:	65 96       	adiw	r28, 0x15	; 21
     a68:	0c af       	std	Y+60, r16	; 0x3c
     a6a:	1d af       	std	Y+61, r17	; 0x3d
     a6c:	2e af       	std	Y+62, r18	; 0x3e
     a6e:	3f af       	std	Y+63, r19	; 0x3f
     a70:	65 97       	sbiw	r28, 0x15	; 21
     a72:	c6 01       	movw	r24, r12
     a74:	b5 01       	movw	r22, r10
     a76:	a4 01       	movw	r20, r8
     a78:	93 01       	movw	r18, r6
     a7a:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
     a7e:	7b 01       	movw	r14, r22
     a80:	8c 01       	movw	r16, r24
     a82:	c6 01       	movw	r24, r12
     a84:	b5 01       	movw	r22, r10
     a86:	a4 01       	movw	r20, r8
     a88:	93 01       	movw	r18, r6
     a8a:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
     a8e:	c9 01       	movw	r24, r18
     a90:	da 01       	movw	r26, r20
     a92:	1c 01       	movw	r2, r24
     a94:	2d 01       	movw	r4, r26
     a96:	c2 01       	movw	r24, r4
     a98:	b1 01       	movw	r22, r2
     a9a:	65 96       	adiw	r28, 0x15	; 21
     a9c:	2c ad       	ldd	r18, Y+60	; 0x3c
     a9e:	3d ad       	ldd	r19, Y+61	; 0x3d
     aa0:	4e ad       	ldd	r20, Y+62	; 0x3e
     aa2:	5f ad       	ldd	r21, Y+63	; 0x3f
     aa4:	65 97       	sbiw	r28, 0x15	; 21
     aa6:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
     aaa:	9b 01       	movw	r18, r22
     aac:	ac 01       	movw	r20, r24
     aae:	87 01       	movw	r16, r14
     ab0:	ff 24       	eor	r15, r15
     ab2:	ee 24       	eor	r14, r14
     ab4:	ad 8c       	ldd	r10, Y+29	; 0x1d
     ab6:	be 8c       	ldd	r11, Y+30	; 0x1e
     ab8:	cf 8c       	ldd	r12, Y+31	; 0x1f
     aba:	d8 a0       	ldd	r13, Y+32	; 0x20
     abc:	c6 01       	movw	r24, r12
     abe:	aa 27       	eor	r26, r26
     ac0:	bb 27       	eor	r27, r27
     ac2:	57 01       	movw	r10, r14
     ac4:	68 01       	movw	r12, r16
     ac6:	a8 2a       	or	r10, r24
     ac8:	b9 2a       	or	r11, r25
     aca:	ca 2a       	or	r12, r26
     acc:	db 2a       	or	r13, r27
     ace:	a2 16       	cp	r10, r18
     ad0:	b3 06       	cpc	r11, r19
     ad2:	c4 06       	cpc	r12, r20
     ad4:	d5 06       	cpc	r13, r21
     ad6:	00 f5       	brcc	.+64     	; 0xb18 <__stack+0x2b9>
     ad8:	08 94       	sec
     ada:	21 08       	sbc	r2, r1
     adc:	31 08       	sbc	r3, r1
     ade:	41 08       	sbc	r4, r1
     ae0:	51 08       	sbc	r5, r1
     ae2:	ed a0       	ldd	r14, Y+37	; 0x25
     ae4:	fe a0       	ldd	r15, Y+38	; 0x26
     ae6:	0f a1       	ldd	r16, Y+39	; 0x27
     ae8:	18 a5       	ldd	r17, Y+40	; 0x28
     aea:	ae 0c       	add	r10, r14
     aec:	bf 1c       	adc	r11, r15
     aee:	c0 1e       	adc	r12, r16
     af0:	d1 1e       	adc	r13, r17
     af2:	ae 14       	cp	r10, r14
     af4:	bf 04       	cpc	r11, r15
     af6:	c0 06       	cpc	r12, r16
     af8:	d1 06       	cpc	r13, r17
     afa:	70 f0       	brcs	.+28     	; 0xb18 <__stack+0x2b9>
     afc:	a2 16       	cp	r10, r18
     afe:	b3 06       	cpc	r11, r19
     b00:	c4 06       	cpc	r12, r20
     b02:	d5 06       	cpc	r13, r21
     b04:	48 f4       	brcc	.+18     	; 0xb18 <__stack+0x2b9>
     b06:	08 94       	sec
     b08:	21 08       	sbc	r2, r1
     b0a:	31 08       	sbc	r3, r1
     b0c:	41 08       	sbc	r4, r1
     b0e:	51 08       	sbc	r5, r1
     b10:	ae 0c       	add	r10, r14
     b12:	bf 1c       	adc	r11, r15
     b14:	c0 1e       	adc	r12, r16
     b16:	d1 1e       	adc	r13, r17
     b18:	a2 1a       	sub	r10, r18
     b1a:	b3 0a       	sbc	r11, r19
     b1c:	c4 0a       	sbc	r12, r20
     b1e:	d5 0a       	sbc	r13, r21
     b20:	c6 01       	movw	r24, r12
     b22:	b5 01       	movw	r22, r10
     b24:	a4 01       	movw	r20, r8
     b26:	93 01       	movw	r18, r6
     b28:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
     b2c:	7b 01       	movw	r14, r22
     b2e:	8c 01       	movw	r16, r24
     b30:	c6 01       	movw	r24, r12
     b32:	b5 01       	movw	r22, r10
     b34:	a4 01       	movw	r20, r8
     b36:	93 01       	movw	r18, r6
     b38:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
     b3c:	c9 01       	movw	r24, r18
     b3e:	da 01       	movw	r26, r20
     b40:	3c 01       	movw	r6, r24
     b42:	4d 01       	movw	r8, r26
     b44:	c4 01       	movw	r24, r8
     b46:	b3 01       	movw	r22, r6
     b48:	65 96       	adiw	r28, 0x15	; 21
     b4a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b4c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b4e:	4e ad       	ldd	r20, Y+62	; 0x3e
     b50:	5f ad       	ldd	r21, Y+63	; 0x3f
     b52:	65 97       	sbiw	r28, 0x15	; 21
     b54:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
     b58:	9b 01       	movw	r18, r22
     b5a:	ac 01       	movw	r20, r24
     b5c:	87 01       	movw	r16, r14
     b5e:	ff 24       	eor	r15, r15
     b60:	ee 24       	eor	r14, r14
     b62:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b64:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b66:	af 8d       	ldd	r26, Y+31	; 0x1f
     b68:	b8 a1       	ldd	r27, Y+32	; 0x20
     b6a:	a0 70       	andi	r26, 0x00	; 0
     b6c:	b0 70       	andi	r27, 0x00	; 0
     b6e:	57 01       	movw	r10, r14
     b70:	68 01       	movw	r12, r16
     b72:	a8 2a       	or	r10, r24
     b74:	b9 2a       	or	r11, r25
     b76:	ca 2a       	or	r12, r26
     b78:	db 2a       	or	r13, r27
     b7a:	a2 16       	cp	r10, r18
     b7c:	b3 06       	cpc	r11, r19
     b7e:	c4 06       	cpc	r12, r20
     b80:	d5 06       	cpc	r13, r21
     b82:	00 f5       	brcc	.+64     	; 0xbc4 <__stack+0x365>
     b84:	08 94       	sec
     b86:	61 08       	sbc	r6, r1
     b88:	71 08       	sbc	r7, r1
     b8a:	81 08       	sbc	r8, r1
     b8c:	91 08       	sbc	r9, r1
     b8e:	6d a1       	ldd	r22, Y+37	; 0x25
     b90:	7e a1       	ldd	r23, Y+38	; 0x26
     b92:	8f a1       	ldd	r24, Y+39	; 0x27
     b94:	98 a5       	ldd	r25, Y+40	; 0x28
     b96:	a6 0e       	add	r10, r22
     b98:	b7 1e       	adc	r11, r23
     b9a:	c8 1e       	adc	r12, r24
     b9c:	d9 1e       	adc	r13, r25
     b9e:	a6 16       	cp	r10, r22
     ba0:	b7 06       	cpc	r11, r23
     ba2:	c8 06       	cpc	r12, r24
     ba4:	d9 06       	cpc	r13, r25
     ba6:	70 f0       	brcs	.+28     	; 0xbc4 <__stack+0x365>
     ba8:	a2 16       	cp	r10, r18
     baa:	b3 06       	cpc	r11, r19
     bac:	c4 06       	cpc	r12, r20
     bae:	d5 06       	cpc	r13, r21
     bb0:	48 f4       	brcc	.+18     	; 0xbc4 <__stack+0x365>
     bb2:	08 94       	sec
     bb4:	61 08       	sbc	r6, r1
     bb6:	71 08       	sbc	r7, r1
     bb8:	81 08       	sbc	r8, r1
     bba:	91 08       	sbc	r9, r1
     bbc:	a6 0e       	add	r10, r22
     bbe:	b7 1e       	adc	r11, r23
     bc0:	c8 1e       	adc	r12, r24
     bc2:	d9 1e       	adc	r13, r25
     bc4:	d6 01       	movw	r26, r12
     bc6:	c5 01       	movw	r24, r10
     bc8:	82 1b       	sub	r24, r18
     bca:	93 0b       	sbc	r25, r19
     bcc:	a4 0b       	sbc	r26, r20
     bce:	b5 0b       	sbc	r27, r21
     bd0:	89 8f       	std	Y+25, r24	; 0x19
     bd2:	9a 8f       	std	Y+26, r25	; 0x1a
     bd4:	ab 8f       	std	Y+27, r26	; 0x1b
     bd6:	bc 8f       	std	Y+28, r27	; 0x1c
     bd8:	d1 01       	movw	r26, r2
     bda:	99 27       	eor	r25, r25
     bdc:	88 27       	eor	r24, r24
     bde:	64 01       	movw	r12, r8
     be0:	53 01       	movw	r10, r6
     be2:	a8 2a       	or	r10, r24
     be4:	b9 2a       	or	r11, r25
     be6:	ca 2a       	or	r12, r26
     be8:	db 2a       	or	r13, r27
     bea:	a9 aa       	std	Y+49, r10	; 0x31
     bec:	ba aa       	std	Y+50, r11	; 0x32
     bee:	cb aa       	std	Y+51, r12	; 0x33
     bf0:	dc aa       	std	Y+52, r13	; 0x34
     bf2:	86 01       	movw	r16, r12
     bf4:	75 01       	movw	r14, r10
     bf6:	2f ef       	ldi	r18, 0xFF	; 255
     bf8:	3f ef       	ldi	r19, 0xFF	; 255
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	e2 22       	and	r14, r18
     c00:	f3 22       	and	r15, r19
     c02:	04 23       	and	r16, r20
     c04:	15 23       	and	r17, r21
     c06:	a6 01       	movw	r20, r12
     c08:	66 27       	eor	r22, r22
     c0a:	77 27       	eor	r23, r23
     c0c:	6d 96       	adiw	r28, 0x1d	; 29
     c0e:	4c af       	std	Y+60, r20	; 0x3c
     c10:	5d af       	std	Y+61, r21	; 0x3d
     c12:	6e af       	std	Y+62, r22	; 0x3e
     c14:	7f af       	std	Y+63, r23	; 0x3f
     c16:	6d 97       	sbiw	r28, 0x1d	; 29
     c18:	a9 a0       	ldd	r10, Y+33	; 0x21
     c1a:	ba a0       	ldd	r11, Y+34	; 0x22
     c1c:	cb a0       	ldd	r12, Y+35	; 0x23
     c1e:	dc a0       	ldd	r13, Y+36	; 0x24
     c20:	6f ef       	ldi	r22, 0xFF	; 255
     c22:	7f ef       	ldi	r23, 0xFF	; 255
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	a6 22       	and	r10, r22
     c2a:	b7 22       	and	r11, r23
     c2c:	c8 22       	and	r12, r24
     c2e:	d9 22       	and	r13, r25
     c30:	89 a1       	ldd	r24, Y+33	; 0x21
     c32:	9a a1       	ldd	r25, Y+34	; 0x22
     c34:	ab a1       	ldd	r26, Y+35	; 0x23
     c36:	bc a1       	ldd	r27, Y+36	; 0x24
     c38:	1d 01       	movw	r2, r26
     c3a:	44 24       	eor	r4, r4
     c3c:	55 24       	eor	r5, r5
     c3e:	c8 01       	movw	r24, r16
     c40:	b7 01       	movw	r22, r14
     c42:	a6 01       	movw	r20, r12
     c44:	95 01       	movw	r18, r10
     c46:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
     c4a:	69 96       	adiw	r28, 0x19	; 25
     c4c:	6c af       	std	Y+60, r22	; 0x3c
     c4e:	7d af       	std	Y+61, r23	; 0x3d
     c50:	8e af       	std	Y+62, r24	; 0x3e
     c52:	9f af       	std	Y+63, r25	; 0x3f
     c54:	69 97       	sbiw	r28, 0x19	; 25
     c56:	c8 01       	movw	r24, r16
     c58:	b7 01       	movw	r22, r14
     c5a:	a2 01       	movw	r20, r4
     c5c:	91 01       	movw	r18, r2
     c5e:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
     c62:	3b 01       	movw	r6, r22
     c64:	4c 01       	movw	r8, r24
     c66:	6d 96       	adiw	r28, 0x1d	; 29
     c68:	6c ad       	ldd	r22, Y+60	; 0x3c
     c6a:	7d ad       	ldd	r23, Y+61	; 0x3d
     c6c:	8e ad       	ldd	r24, Y+62	; 0x3e
     c6e:	9f ad       	ldd	r25, Y+63	; 0x3f
     c70:	6d 97       	sbiw	r28, 0x1d	; 29
     c72:	a6 01       	movw	r20, r12
     c74:	95 01       	movw	r18, r10
     c76:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
     c7a:	7b 01       	movw	r14, r22
     c7c:	8c 01       	movw	r16, r24
     c7e:	6d 96       	adiw	r28, 0x1d	; 29
     c80:	6c ad       	ldd	r22, Y+60	; 0x3c
     c82:	7d ad       	ldd	r23, Y+61	; 0x3d
     c84:	8e ad       	ldd	r24, Y+62	; 0x3e
     c86:	9f ad       	ldd	r25, Y+63	; 0x3f
     c88:	6d 97       	sbiw	r28, 0x1d	; 29
     c8a:	a2 01       	movw	r20, r4
     c8c:	91 01       	movw	r18, r2
     c8e:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
     c92:	5b 01       	movw	r10, r22
     c94:	6c 01       	movw	r12, r24
     c96:	a8 01       	movw	r20, r16
     c98:	97 01       	movw	r18, r14
     c9a:	26 0d       	add	r18, r6
     c9c:	37 1d       	adc	r19, r7
     c9e:	48 1d       	adc	r20, r8
     ca0:	59 1d       	adc	r21, r9
     ca2:	69 96       	adiw	r28, 0x19	; 25
     ca4:	6c ac       	ldd	r6, Y+60	; 0x3c
     ca6:	7d ac       	ldd	r7, Y+61	; 0x3d
     ca8:	8e ac       	ldd	r8, Y+62	; 0x3e
     caa:	9f ac       	ldd	r9, Y+63	; 0x3f
     cac:	69 97       	sbiw	r28, 0x19	; 25
     cae:	c4 01       	movw	r24, r8
     cb0:	aa 27       	eor	r26, r26
     cb2:	bb 27       	eor	r27, r27
     cb4:	28 0f       	add	r18, r24
     cb6:	39 1f       	adc	r19, r25
     cb8:	4a 1f       	adc	r20, r26
     cba:	5b 1f       	adc	r21, r27
     cbc:	2e 15       	cp	r18, r14
     cbe:	3f 05       	cpc	r19, r15
     cc0:	40 07       	cpc	r20, r16
     cc2:	51 07       	cpc	r21, r17
     cc4:	48 f4       	brcc	.+18     	; 0xcd8 <__stack+0x479>
     cc6:	e1 2c       	mov	r14, r1
     cc8:	f1 2c       	mov	r15, r1
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	06 2f       	mov	r16, r22
     cce:	11 2d       	mov	r17, r1
     cd0:	ae 0c       	add	r10, r14
     cd2:	bf 1c       	adc	r11, r15
     cd4:	c0 1e       	adc	r12, r16
     cd6:	d1 1e       	adc	r13, r17
     cd8:	ca 01       	movw	r24, r20
     cda:	aa 27       	eor	r26, r26
     cdc:	bb 27       	eor	r27, r27
     cde:	bc 01       	movw	r22, r24
     ce0:	cd 01       	movw	r24, r26
     ce2:	6a 0d       	add	r22, r10
     ce4:	7b 1d       	adc	r23, r11
     ce6:	8c 1d       	adc	r24, r12
     ce8:	9d 1d       	adc	r25, r13
     cea:	69 8c       	ldd	r6, Y+25	; 0x19
     cec:	7a 8c       	ldd	r7, Y+26	; 0x1a
     cee:	8b 8c       	ldd	r8, Y+27	; 0x1b
     cf0:	9c 8c       	ldd	r9, Y+28	; 0x1c
     cf2:	66 16       	cp	r6, r22
     cf4:	77 06       	cpc	r7, r23
     cf6:	88 06       	cpc	r8, r24
     cf8:	99 06       	cpc	r9, r25
     cfa:	40 f1       	brcs	.+80     	; 0xd4c <__stack+0x4ed>
     cfc:	66 15       	cp	r22, r6
     cfe:	77 05       	cpc	r23, r7
     d00:	88 05       	cpc	r24, r8
     d02:	99 05       	cpc	r25, r9
     d04:	09 f0       	breq	.+2      	; 0xd08 <__stack+0x4a9>
     d06:	43 c0       	rjmp	.+134    	; 0xd8e <__stack+0x52f>
     d08:	d9 01       	movw	r26, r18
     d0a:	99 27       	eor	r25, r25
     d0c:	88 27       	eor	r24, r24
     d0e:	69 96       	adiw	r28, 0x19	; 25
     d10:	2c ad       	ldd	r18, Y+60	; 0x3c
     d12:	3d ad       	ldd	r19, Y+61	; 0x3d
     d14:	4e ad       	ldd	r20, Y+62	; 0x3e
     d16:	5f ad       	ldd	r21, Y+63	; 0x3f
     d18:	69 97       	sbiw	r28, 0x19	; 25
     d1a:	40 70       	andi	r20, 0x00	; 0
     d1c:	50 70       	andi	r21, 0x00	; 0
     d1e:	82 0f       	add	r24, r18
     d20:	93 1f       	adc	r25, r19
     d22:	a4 1f       	adc	r26, r20
     d24:	b5 1f       	adc	r27, r21
     d26:	2d a5       	ldd	r18, Y+45	; 0x2d
     d28:	3e a5       	ldd	r19, Y+46	; 0x2e
     d2a:	4f a5       	ldd	r20, Y+47	; 0x2f
     d2c:	58 a9       	ldd	r21, Y+48	; 0x30
     d2e:	6e 96       	adiw	r28, 0x1e	; 30
     d30:	0f ac       	ldd	r0, Y+63	; 0x3f
     d32:	6e 97       	sbiw	r28, 0x1e	; 30
     d34:	04 c0       	rjmp	.+8      	; 0xd3e <__stack+0x4df>
     d36:	22 0f       	add	r18, r18
     d38:	33 1f       	adc	r19, r19
     d3a:	44 1f       	adc	r20, r20
     d3c:	55 1f       	adc	r21, r21
     d3e:	0a 94       	dec	r0
     d40:	d2 f7       	brpl	.-12     	; 0xd36 <__stack+0x4d7>
     d42:	28 17       	cp	r18, r24
     d44:	39 07       	cpc	r19, r25
     d46:	4a 07       	cpc	r20, r26
     d48:	5b 07       	cpc	r21, r27
     d4a:	08 f5       	brcc	.+66     	; 0xd8e <__stack+0x52f>
     d4c:	09 a9       	ldd	r16, Y+49	; 0x31
     d4e:	1a a9       	ldd	r17, Y+50	; 0x32
     d50:	2b a9       	ldd	r18, Y+51	; 0x33
     d52:	3c a9       	ldd	r19, Y+52	; 0x34
     d54:	01 50       	subi	r16, 0x01	; 1
     d56:	10 40       	sbci	r17, 0x00	; 0
     d58:	20 40       	sbci	r18, 0x00	; 0
     d5a:	30 40       	sbci	r19, 0x00	; 0
     d5c:	09 ab       	std	Y+49, r16	; 0x31
     d5e:	1a ab       	std	Y+50, r17	; 0x32
     d60:	2b ab       	std	Y+51, r18	; 0x33
     d62:	3c ab       	std	Y+52, r19	; 0x34
     d64:	14 c0       	rjmp	.+40     	; 0xd8e <__stack+0x52f>
     d66:	66 24       	eor	r6, r6
     d68:	77 24       	eor	r7, r7
     d6a:	43 01       	movw	r8, r6
     d6c:	21 e0       	ldi	r18, 0x01	; 1
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	50 e0       	ldi	r21, 0x00	; 0
     d74:	29 ab       	std	Y+49, r18	; 0x31
     d76:	3a ab       	std	Y+50, r19	; 0x32
     d78:	4b ab       	std	Y+51, r20	; 0x33
     d7a:	5c ab       	std	Y+52, r21	; 0x34
     d7c:	0b c0       	rjmp	.+22     	; 0xd94 <__stack+0x535>
     d7e:	66 24       	eor	r6, r6
     d80:	77 24       	eor	r7, r7
     d82:	43 01       	movw	r8, r6
     d84:	19 aa       	std	Y+49, r1	; 0x31
     d86:	1a aa       	std	Y+50, r1	; 0x32
     d88:	1b aa       	std	Y+51, r1	; 0x33
     d8a:	1c aa       	std	Y+52, r1	; 0x34
     d8c:	03 c0       	rjmp	.+6      	; 0xd94 <__stack+0x535>
     d8e:	66 24       	eor	r6, r6
     d90:	77 24       	eor	r7, r7
     d92:	43 01       	movw	r8, r6
     d94:	fe 01       	movw	r30, r28
     d96:	71 96       	adiw	r30, 0x11	; 17
     d98:	88 e0       	ldi	r24, 0x08	; 8
     d9a:	df 01       	movw	r26, r30
     d9c:	1d 92       	st	X+, r1
     d9e:	8a 95       	dec	r24
     da0:	e9 f7       	brne	.-6      	; 0xd9c <__stack+0x53d>
     da2:	a9 a8       	ldd	r10, Y+49	; 0x31
     da4:	ba a8       	ldd	r11, Y+50	; 0x32
     da6:	cb a8       	ldd	r12, Y+51	; 0x33
     da8:	dc a8       	ldd	r13, Y+52	; 0x34
     daa:	a9 8a       	std	Y+17, r10	; 0x11
     dac:	ba 8a       	std	Y+18, r11	; 0x12
     dae:	cb 8a       	std	Y+19, r12	; 0x13
     db0:	dc 8a       	std	Y+20, r13	; 0x14
     db2:	6d 8a       	std	Y+21, r6	; 0x15
     db4:	7e 8a       	std	Y+22, r7	; 0x16
     db6:	8f 8a       	std	Y+23, r8	; 0x17
     db8:	98 8e       	std	Y+24, r9	; 0x18
     dba:	29 a9       	ldd	r18, Y+49	; 0x31
     dbc:	3a 89       	ldd	r19, Y+18	; 0x12
     dbe:	4b 89       	ldd	r20, Y+19	; 0x13
     dc0:	5c 89       	ldd	r21, Y+20	; 0x14
     dc2:	66 2d       	mov	r22, r6
     dc4:	7e 89       	ldd	r23, Y+22	; 0x16
     dc6:	8f 89       	ldd	r24, Y+23	; 0x17
     dc8:	98 8d       	ldd	r25, Y+24	; 0x18
     dca:	c2 5a       	subi	r28, 0xA2	; 162
     dcc:	df 4f       	sbci	r29, 0xFF	; 255
     dce:	e2 e1       	ldi	r30, 0x12	; 18
     dd0:	0c 94 3e 31 	jmp	0x627c	; 0x627c <__epilogue_restores__>

00000dd4 <__umoddi3>:
     dd4:	ab e5       	ldi	r26, 0x5B	; 91
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e0 ef       	ldi	r30, 0xF0	; 240
     dda:	f6 e0       	ldi	r31, 0x06	; 6
     ddc:	0c 94 22 31 	jmp	0x6244	; 0x6244 <__prologue_saves__>
     de0:	a8 e0       	ldi	r26, 0x08	; 8
     de2:	4e 01       	movw	r8, r28
     de4:	08 94       	sec
     de6:	81 1c       	adc	r8, r1
     de8:	91 1c       	adc	r9, r1
     dea:	f4 01       	movw	r30, r8
     dec:	6a 2e       	mov	r6, r26
     dee:	11 92       	st	Z+, r1
     df0:	6a 94       	dec	r6
     df2:	e9 f7       	brne	.-6      	; 0xdee <__umoddi3+0x1a>
     df4:	29 83       	std	Y+1, r18	; 0x01
     df6:	3a 83       	std	Y+2, r19	; 0x02
     df8:	4b 83       	std	Y+3, r20	; 0x03
     dfa:	5c 83       	std	Y+4, r21	; 0x04
     dfc:	6d 83       	std	Y+5, r22	; 0x05
     dfe:	7e 83       	std	Y+6, r23	; 0x06
     e00:	8f 83       	std	Y+7, r24	; 0x07
     e02:	98 87       	std	Y+8, r25	; 0x08
     e04:	ce 01       	movw	r24, r28
     e06:	09 96       	adiw	r24, 0x09	; 9
     e08:	fc 01       	movw	r30, r24
     e0a:	11 92       	st	Z+, r1
     e0c:	aa 95       	dec	r26
     e0e:	e9 f7       	brne	.-6      	; 0xe0a <__umoddi3+0x36>
     e10:	a9 86       	std	Y+9, r10	; 0x09
     e12:	ba 86       	std	Y+10, r11	; 0x0a
     e14:	cb 86       	std	Y+11, r12	; 0x0b
     e16:	dc 86       	std	Y+12, r13	; 0x0c
     e18:	ed 86       	std	Y+13, r14	; 0x0d
     e1a:	fe 86       	std	Y+14, r15	; 0x0e
     e1c:	0f 87       	std	Y+15, r16	; 0x0f
     e1e:	18 8b       	std	Y+16, r17	; 0x10
     e20:	29 84       	ldd	r2, Y+9	; 0x09
     e22:	3a 84       	ldd	r3, Y+10	; 0x0a
     e24:	4b 84       	ldd	r4, Y+11	; 0x0b
     e26:	5c 84       	ldd	r5, Y+12	; 0x0c
     e28:	ad 84       	ldd	r10, Y+13	; 0x0d
     e2a:	be 84       	ldd	r11, Y+14	; 0x0e
     e2c:	cf 84       	ldd	r12, Y+15	; 0x0f
     e2e:	d8 88       	ldd	r13, Y+16	; 0x10
     e30:	29 81       	ldd	r18, Y+1	; 0x01
     e32:	3a 81       	ldd	r19, Y+2	; 0x02
     e34:	4b 81       	ldd	r20, Y+3	; 0x03
     e36:	5c 81       	ldd	r21, Y+4	; 0x04
     e38:	69 96       	adiw	r28, 0x19	; 25
     e3a:	2f af       	std	Y+63, r18	; 0x3f
     e3c:	69 97       	sbiw	r28, 0x19	; 25
     e3e:	6a 96       	adiw	r28, 0x1a	; 26
     e40:	3f af       	std	Y+63, r19	; 0x3f
     e42:	6a 97       	sbiw	r28, 0x1a	; 26
     e44:	6b 96       	adiw	r28, 0x1b	; 27
     e46:	4f af       	std	Y+63, r20	; 0x3f
     e48:	6b 97       	sbiw	r28, 0x1b	; 27
     e4a:	6c 96       	adiw	r28, 0x1c	; 28
     e4c:	5f af       	std	Y+63, r21	; 0x3f
     e4e:	6c 97       	sbiw	r28, 0x1c	; 28
     e50:	6c 96       	adiw	r28, 0x1c	; 28
     e52:	6c ac       	ldd	r6, Y+60	; 0x3c
     e54:	7d ac       	ldd	r7, Y+61	; 0x3d
     e56:	8e ac       	ldd	r8, Y+62	; 0x3e
     e58:	9f ac       	ldd	r9, Y+63	; 0x3f
     e5a:	6c 97       	sbiw	r28, 0x1c	; 28
     e5c:	69 aa       	std	Y+49, r6	; 0x31
     e5e:	7a aa       	std	Y+50, r7	; 0x32
     e60:	8b aa       	std	Y+51, r8	; 0x33
     e62:	9c aa       	std	Y+52, r9	; 0x34
     e64:	6d 81       	ldd	r22, Y+5	; 0x05
     e66:	7e 81       	ldd	r23, Y+6	; 0x06
     e68:	8f 81       	ldd	r24, Y+7	; 0x07
     e6a:	98 85       	ldd	r25, Y+8	; 0x08
     e6c:	3b 01       	movw	r6, r22
     e6e:	4c 01       	movw	r8, r24
     e70:	6d aa       	std	Y+53, r6	; 0x35
     e72:	7e aa       	std	Y+54, r7	; 0x36
     e74:	8f aa       	std	Y+55, r8	; 0x37
     e76:	98 ae       	std	Y+56, r9	; 0x38
     e78:	a1 14       	cp	r10, r1
     e7a:	b1 04       	cpc	r11, r1
     e7c:	c1 04       	cpc	r12, r1
     e7e:	d1 04       	cpc	r13, r1
     e80:	09 f0       	breq	.+2      	; 0xe84 <__umoddi3+0xb0>
     e82:	04 c3       	rjmp	.+1544   	; 0x148c <__umoddi3+0x6b8>
     e84:	62 14       	cp	r6, r2
     e86:	73 04       	cpc	r7, r3
     e88:	84 04       	cpc	r8, r4
     e8a:	95 04       	cpc	r9, r5
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <__umoddi3+0xbc>
     e8e:	00 c1       	rjmp	.+512    	; 0x1090 <__umoddi3+0x2bc>
     e90:	00 e0       	ldi	r16, 0x00	; 0
     e92:	20 16       	cp	r2, r16
     e94:	00 e0       	ldi	r16, 0x00	; 0
     e96:	30 06       	cpc	r3, r16
     e98:	01 e0       	ldi	r16, 0x01	; 1
     e9a:	40 06       	cpc	r4, r16
     e9c:	00 e0       	ldi	r16, 0x00	; 0
     e9e:	50 06       	cpc	r5, r16
     ea0:	88 f4       	brcc	.+34     	; 0xec4 <__umoddi3+0xf0>
     ea2:	1f ef       	ldi	r17, 0xFF	; 255
     ea4:	21 16       	cp	r2, r17
     ea6:	31 04       	cpc	r3, r1
     ea8:	41 04       	cpc	r4, r1
     eaa:	51 04       	cpc	r5, r1
     eac:	39 f0       	breq	.+14     	; 0xebc <__umoddi3+0xe8>
     eae:	30 f0       	brcs	.+12     	; 0xebc <__umoddi3+0xe8>
     eb0:	88 e0       	ldi	r24, 0x08	; 8
     eb2:	e8 2e       	mov	r14, r24
     eb4:	f1 2c       	mov	r15, r1
     eb6:	01 2d       	mov	r16, r1
     eb8:	11 2d       	mov	r17, r1
     eba:	18 c0       	rjmp	.+48     	; 0xeec <__umoddi3+0x118>
     ebc:	ee 24       	eor	r14, r14
     ebe:	ff 24       	eor	r15, r15
     ec0:	87 01       	movw	r16, r14
     ec2:	14 c0       	rjmp	.+40     	; 0xeec <__umoddi3+0x118>
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	24 16       	cp	r2, r20
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	34 06       	cpc	r3, r20
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	44 06       	cpc	r4, r20
     ed0:	41 e0       	ldi	r20, 0x01	; 1
     ed2:	54 06       	cpc	r5, r20
     ed4:	30 f0       	brcs	.+12     	; 0xee2 <__umoddi3+0x10e>
     ed6:	b8 e1       	ldi	r27, 0x18	; 24
     ed8:	eb 2e       	mov	r14, r27
     eda:	f1 2c       	mov	r15, r1
     edc:	01 2d       	mov	r16, r1
     ede:	11 2d       	mov	r17, r1
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <__umoddi3+0x118>
     ee2:	a0 e1       	ldi	r26, 0x10	; 16
     ee4:	ea 2e       	mov	r14, r26
     ee6:	f1 2c       	mov	r15, r1
     ee8:	01 2d       	mov	r16, r1
     eea:	11 2d       	mov	r17, r1
     eec:	d2 01       	movw	r26, r4
     eee:	c1 01       	movw	r24, r2
     ef0:	0e 2c       	mov	r0, r14
     ef2:	04 c0       	rjmp	.+8      	; 0xefc <__umoddi3+0x128>
     ef4:	b6 95       	lsr	r27
     ef6:	a7 95       	ror	r26
     ef8:	97 95       	ror	r25
     efa:	87 95       	ror	r24
     efc:	0a 94       	dec	r0
     efe:	d2 f7       	brpl	.-12     	; 0xef4 <__umoddi3+0x120>
     f00:	87 50       	subi	r24, 0x07	; 7
     f02:	9f 4f       	sbci	r25, 0xFF	; 255
     f04:	dc 01       	movw	r26, r24
     f06:	2c 91       	ld	r18, X
     f08:	80 e2       	ldi	r24, 0x20	; 32
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	a0 e0       	ldi	r26, 0x00	; 0
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	8e 19       	sub	r24, r14
     f12:	9f 09       	sbc	r25, r15
     f14:	a0 0b       	sbc	r26, r16
     f16:	b1 0b       	sbc	r27, r17
     f18:	5c 01       	movw	r10, r24
     f1a:	6d 01       	movw	r12, r26
     f1c:	a2 1a       	sub	r10, r18
     f1e:	b1 08       	sbc	r11, r1
     f20:	c1 08       	sbc	r12, r1
     f22:	d1 08       	sbc	r13, r1
     f24:	a9 ae       	std	Y+57, r10	; 0x39
     f26:	ba ae       	std	Y+58, r11	; 0x3a
     f28:	cb ae       	std	Y+59, r12	; 0x3b
     f2a:	dc ae       	std	Y+60, r13	; 0x3c
     f2c:	a1 14       	cp	r10, r1
     f2e:	b1 04       	cpc	r11, r1
     f30:	c1 04       	cpc	r12, r1
     f32:	d1 04       	cpc	r13, r1
     f34:	09 f4       	brne	.+2      	; 0xf38 <__umoddi3+0x164>
     f36:	3f c0       	rjmp	.+126    	; 0xfb6 <__umoddi3+0x1e2>
     f38:	69 ad       	ldd	r22, Y+57	; 0x39
     f3a:	06 2e       	mov	r0, r22
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <__umoddi3+0x172>
     f3e:	22 0c       	add	r2, r2
     f40:	33 1c       	adc	r3, r3
     f42:	44 1c       	adc	r4, r4
     f44:	55 1c       	adc	r5, r5
     f46:	0a 94       	dec	r0
     f48:	d2 f7       	brpl	.-12     	; 0xf3e <__umoddi3+0x16a>
     f4a:	a4 01       	movw	r20, r8
     f4c:	93 01       	movw	r18, r6
     f4e:	06 2e       	mov	r0, r22
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <__umoddi3+0x186>
     f52:	22 0f       	add	r18, r18
     f54:	33 1f       	adc	r19, r19
     f56:	44 1f       	adc	r20, r20
     f58:	55 1f       	adc	r21, r21
     f5a:	0a 94       	dec	r0
     f5c:	d2 f7       	brpl	.-12     	; 0xf52 <__umoddi3+0x17e>
     f5e:	80 e2       	ldi	r24, 0x20	; 32
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	8a 19       	sub	r24, r10
     f64:	9b 09       	sbc	r25, r11
     f66:	6c 96       	adiw	r28, 0x1c	; 28
     f68:	cc ac       	ldd	r12, Y+60	; 0x3c
     f6a:	dd ac       	ldd	r13, Y+61	; 0x3d
     f6c:	ee ac       	ldd	r14, Y+62	; 0x3e
     f6e:	ff ac       	ldd	r15, Y+63	; 0x3f
     f70:	6c 97       	sbiw	r28, 0x1c	; 28
     f72:	04 c0       	rjmp	.+8      	; 0xf7c <__umoddi3+0x1a8>
     f74:	f6 94       	lsr	r15
     f76:	e7 94       	ror	r14
     f78:	d7 94       	ror	r13
     f7a:	c7 94       	ror	r12
     f7c:	8a 95       	dec	r24
     f7e:	d2 f7       	brpl	.-12     	; 0xf74 <__umoddi3+0x1a0>
     f80:	87 01       	movw	r16, r14
     f82:	76 01       	movw	r14, r12
     f84:	e2 2a       	or	r14, r18
     f86:	f3 2a       	or	r15, r19
     f88:	04 2b       	or	r16, r20
     f8a:	15 2b       	or	r17, r21
     f8c:	ed aa       	std	Y+53, r14	; 0x35
     f8e:	fe aa       	std	Y+54, r15	; 0x36
     f90:	0f ab       	std	Y+55, r16	; 0x37
     f92:	18 af       	std	Y+56, r17	; 0x38
     f94:	6c 96       	adiw	r28, 0x1c	; 28
     f96:	8c ad       	ldd	r24, Y+60	; 0x3c
     f98:	9d ad       	ldd	r25, Y+61	; 0x3d
     f9a:	ae ad       	ldd	r26, Y+62	; 0x3e
     f9c:	bf ad       	ldd	r27, Y+63	; 0x3f
     f9e:	6c 97       	sbiw	r28, 0x1c	; 28
     fa0:	04 c0       	rjmp	.+8      	; 0xfaa <__umoddi3+0x1d6>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	aa 1f       	adc	r26, r26
     fa8:	bb 1f       	adc	r27, r27
     faa:	6a 95       	dec	r22
     fac:	d2 f7       	brpl	.-12     	; 0xfa2 <__umoddi3+0x1ce>
     fae:	89 ab       	std	Y+49, r24	; 0x31
     fb0:	9a ab       	std	Y+50, r25	; 0x32
     fb2:	ab ab       	std	Y+51, r26	; 0x33
     fb4:	bc ab       	std	Y+52, r27	; 0x34
     fb6:	32 01       	movw	r6, r4
     fb8:	88 24       	eor	r8, r8
     fba:	99 24       	eor	r9, r9
     fbc:	b2 01       	movw	r22, r4
     fbe:	a1 01       	movw	r20, r2
     fc0:	60 70       	andi	r22, 0x00	; 0
     fc2:	70 70       	andi	r23, 0x00	; 0
     fc4:	21 96       	adiw	r28, 0x01	; 1
     fc6:	4c af       	std	Y+60, r20	; 0x3c
     fc8:	5d af       	std	Y+61, r21	; 0x3d
     fca:	6e af       	std	Y+62, r22	; 0x3e
     fcc:	7f af       	std	Y+63, r23	; 0x3f
     fce:	21 97       	sbiw	r28, 0x01	; 1
     fd0:	6d a9       	ldd	r22, Y+53	; 0x35
     fd2:	7e a9       	ldd	r23, Y+54	; 0x36
     fd4:	8f a9       	ldd	r24, Y+55	; 0x37
     fd6:	98 ad       	ldd	r25, Y+56	; 0x38
     fd8:	a4 01       	movw	r20, r8
     fda:	93 01       	movw	r18, r6
     fdc:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
     fe0:	7b 01       	movw	r14, r22
     fe2:	8c 01       	movw	r16, r24
     fe4:	6d a9       	ldd	r22, Y+53	; 0x35
     fe6:	7e a9       	ldd	r23, Y+54	; 0x36
     fe8:	8f a9       	ldd	r24, Y+55	; 0x37
     fea:	98 ad       	ldd	r25, Y+56	; 0x38
     fec:	a4 01       	movw	r20, r8
     fee:	93 01       	movw	r18, r6
     ff0:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
     ff4:	ca 01       	movw	r24, r20
     ff6:	b9 01       	movw	r22, r18
     ff8:	21 96       	adiw	r28, 0x01	; 1
     ffa:	2c ad       	ldd	r18, Y+60	; 0x3c
     ffc:	3d ad       	ldd	r19, Y+61	; 0x3d
     ffe:	4e ad       	ldd	r20, Y+62	; 0x3e
    1000:	5f ad       	ldd	r21, Y+63	; 0x3f
    1002:	21 97       	sbiw	r28, 0x01	; 1
    1004:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
    1008:	9b 01       	movw	r18, r22
    100a:	ac 01       	movw	r20, r24
    100c:	87 01       	movw	r16, r14
    100e:	ff 24       	eor	r15, r15
    1010:	ee 24       	eor	r14, r14
    1012:	a9 a8       	ldd	r10, Y+49	; 0x31
    1014:	ba a8       	ldd	r11, Y+50	; 0x32
    1016:	cb a8       	ldd	r12, Y+51	; 0x33
    1018:	dc a8       	ldd	r13, Y+52	; 0x34
    101a:	c6 01       	movw	r24, r12
    101c:	aa 27       	eor	r26, r26
    101e:	bb 27       	eor	r27, r27
    1020:	57 01       	movw	r10, r14
    1022:	68 01       	movw	r12, r16
    1024:	a8 2a       	or	r10, r24
    1026:	b9 2a       	or	r11, r25
    1028:	ca 2a       	or	r12, r26
    102a:	db 2a       	or	r13, r27
    102c:	a2 16       	cp	r10, r18
    102e:	b3 06       	cpc	r11, r19
    1030:	c4 06       	cpc	r12, r20
    1032:	d5 06       	cpc	r13, r21
    1034:	90 f4       	brcc	.+36     	; 0x105a <__umoddi3+0x286>
    1036:	a2 0c       	add	r10, r2
    1038:	b3 1c       	adc	r11, r3
    103a:	c4 1c       	adc	r12, r4
    103c:	d5 1c       	adc	r13, r5
    103e:	a2 14       	cp	r10, r2
    1040:	b3 04       	cpc	r11, r3
    1042:	c4 04       	cpc	r12, r4
    1044:	d5 04       	cpc	r13, r5
    1046:	48 f0       	brcs	.+18     	; 0x105a <__umoddi3+0x286>
    1048:	a2 16       	cp	r10, r18
    104a:	b3 06       	cpc	r11, r19
    104c:	c4 06       	cpc	r12, r20
    104e:	d5 06       	cpc	r13, r21
    1050:	20 f4       	brcc	.+8      	; 0x105a <__umoddi3+0x286>
    1052:	a2 0c       	add	r10, r2
    1054:	b3 1c       	adc	r11, r3
    1056:	c4 1c       	adc	r12, r4
    1058:	d5 1c       	adc	r13, r5
    105a:	a2 1a       	sub	r10, r18
    105c:	b3 0a       	sbc	r11, r19
    105e:	c4 0a       	sbc	r12, r20
    1060:	d5 0a       	sbc	r13, r21
    1062:	c6 01       	movw	r24, r12
    1064:	b5 01       	movw	r22, r10
    1066:	a4 01       	movw	r20, r8
    1068:	93 01       	movw	r18, r6
    106a:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
    106e:	7b 01       	movw	r14, r22
    1070:	8c 01       	movw	r16, r24
    1072:	c6 01       	movw	r24, r12
    1074:	b5 01       	movw	r22, r10
    1076:	a4 01       	movw	r20, r8
    1078:	93 01       	movw	r18, r6
    107a:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
    107e:	ca 01       	movw	r24, r20
    1080:	b9 01       	movw	r22, r18
    1082:	21 96       	adiw	r28, 0x01	; 1
    1084:	2c ad       	ldd	r18, Y+60	; 0x3c
    1086:	3d ad       	ldd	r19, Y+61	; 0x3d
    1088:	4e ad       	ldd	r20, Y+62	; 0x3e
    108a:	5f ad       	ldd	r21, Y+63	; 0x3f
    108c:	21 97       	sbiw	r28, 0x01	; 1
    108e:	ba c1       	rjmp	.+884    	; 0x1404 <__umoddi3+0x630>
    1090:	21 14       	cp	r2, r1
    1092:	31 04       	cpc	r3, r1
    1094:	41 04       	cpc	r4, r1
    1096:	51 04       	cpc	r5, r1
    1098:	71 f4       	brne	.+28     	; 0x10b6 <__umoddi3+0x2e2>
    109a:	61 e0       	ldi	r22, 0x01	; 1
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
    10ae:	c9 01       	movw	r24, r18
    10b0:	da 01       	movw	r26, r20
    10b2:	1c 01       	movw	r2, r24
    10b4:	2d 01       	movw	r4, r26
    10b6:	00 e0       	ldi	r16, 0x00	; 0
    10b8:	20 16       	cp	r2, r16
    10ba:	00 e0       	ldi	r16, 0x00	; 0
    10bc:	30 06       	cpc	r3, r16
    10be:	01 e0       	ldi	r16, 0x01	; 1
    10c0:	40 06       	cpc	r4, r16
    10c2:	00 e0       	ldi	r16, 0x00	; 0
    10c4:	50 06       	cpc	r5, r16
    10c6:	88 f4       	brcc	.+34     	; 0x10ea <__umoddi3+0x316>
    10c8:	1f ef       	ldi	r17, 0xFF	; 255
    10ca:	21 16       	cp	r2, r17
    10cc:	31 04       	cpc	r3, r1
    10ce:	41 04       	cpc	r4, r1
    10d0:	51 04       	cpc	r5, r1
    10d2:	39 f0       	breq	.+14     	; 0x10e2 <__umoddi3+0x30e>
    10d4:	30 f0       	brcs	.+12     	; 0x10e2 <__umoddi3+0x30e>
    10d6:	68 e0       	ldi	r22, 0x08	; 8
    10d8:	e6 2e       	mov	r14, r22
    10da:	f1 2c       	mov	r15, r1
    10dc:	01 2d       	mov	r16, r1
    10de:	11 2d       	mov	r17, r1
    10e0:	18 c0       	rjmp	.+48     	; 0x1112 <__umoddi3+0x33e>
    10e2:	ee 24       	eor	r14, r14
    10e4:	ff 24       	eor	r15, r15
    10e6:	87 01       	movw	r16, r14
    10e8:	14 c0       	rjmp	.+40     	; 0x1112 <__umoddi3+0x33e>
    10ea:	40 e0       	ldi	r20, 0x00	; 0
    10ec:	24 16       	cp	r2, r20
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	34 06       	cpc	r3, r20
    10f2:	40 e0       	ldi	r20, 0x00	; 0
    10f4:	44 06       	cpc	r4, r20
    10f6:	41 e0       	ldi	r20, 0x01	; 1
    10f8:	54 06       	cpc	r5, r20
    10fa:	30 f0       	brcs	.+12     	; 0x1108 <__umoddi3+0x334>
    10fc:	58 e1       	ldi	r21, 0x18	; 24
    10fe:	e5 2e       	mov	r14, r21
    1100:	f1 2c       	mov	r15, r1
    1102:	01 2d       	mov	r16, r1
    1104:	11 2d       	mov	r17, r1
    1106:	05 c0       	rjmp	.+10     	; 0x1112 <__umoddi3+0x33e>
    1108:	40 e1       	ldi	r20, 0x10	; 16
    110a:	e4 2e       	mov	r14, r20
    110c:	f1 2c       	mov	r15, r1
    110e:	01 2d       	mov	r16, r1
    1110:	11 2d       	mov	r17, r1
    1112:	d2 01       	movw	r26, r4
    1114:	c1 01       	movw	r24, r2
    1116:	0e 2c       	mov	r0, r14
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <__umoddi3+0x34e>
    111a:	b6 95       	lsr	r27
    111c:	a7 95       	ror	r26
    111e:	97 95       	ror	r25
    1120:	87 95       	ror	r24
    1122:	0a 94       	dec	r0
    1124:	d2 f7       	brpl	.-12     	; 0x111a <__umoddi3+0x346>
    1126:	87 50       	subi	r24, 0x07	; 7
    1128:	9f 4f       	sbci	r25, 0xFF	; 255
    112a:	dc 01       	movw	r26, r24
    112c:	2c 91       	ld	r18, X
    112e:	30 e2       	ldi	r19, 0x20	; 32
    1130:	a3 2e       	mov	r10, r19
    1132:	b1 2c       	mov	r11, r1
    1134:	c1 2c       	mov	r12, r1
    1136:	d1 2c       	mov	r13, r1
    1138:	d6 01       	movw	r26, r12
    113a:	c5 01       	movw	r24, r10
    113c:	8e 19       	sub	r24, r14
    113e:	9f 09       	sbc	r25, r15
    1140:	a0 0b       	sbc	r26, r16
    1142:	b1 0b       	sbc	r27, r17
    1144:	7c 01       	movw	r14, r24
    1146:	8d 01       	movw	r16, r26
    1148:	e2 1a       	sub	r14, r18
    114a:	f1 08       	sbc	r15, r1
    114c:	01 09       	sbc	r16, r1
    114e:	11 09       	sbc	r17, r1
    1150:	e9 ae       	std	Y+57, r14	; 0x39
    1152:	fa ae       	std	Y+58, r15	; 0x3a
    1154:	0b af       	std	Y+59, r16	; 0x3b
    1156:	1c af       	std	Y+60, r17	; 0x3c
    1158:	e1 14       	cp	r14, r1
    115a:	f1 04       	cpc	r15, r1
    115c:	01 05       	cpc	r16, r1
    115e:	11 05       	cpc	r17, r1
    1160:	39 f4       	brne	.+14     	; 0x1170 <__umoddi3+0x39c>
    1162:	64 01       	movw	r12, r8
    1164:	53 01       	movw	r10, r6
    1166:	a2 18       	sub	r10, r2
    1168:	b3 08       	sbc	r11, r3
    116a:	c4 08       	sbc	r12, r4
    116c:	d5 08       	sbc	r13, r5
    116e:	e2 c0       	rjmp	.+452    	; 0x1334 <__umoddi3+0x560>
    1170:	f9 ac       	ldd	r15, Y+57	; 0x39
    1172:	68 96       	adiw	r28, 0x18	; 24
    1174:	ff ae       	std	Y+63, r15	; 0x3f
    1176:	68 97       	sbiw	r28, 0x18	; 24
    1178:	0f 2c       	mov	r0, r15
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <__umoddi3+0x3b0>
    117c:	22 0c       	add	r2, r2
    117e:	33 1c       	adc	r3, r3
    1180:	44 1c       	adc	r4, r4
    1182:	55 1c       	adc	r5, r5
    1184:	0a 94       	dec	r0
    1186:	d2 f7       	brpl	.-12     	; 0x117c <__umoddi3+0x3a8>
    1188:	8a 2d       	mov	r24, r10
    118a:	8f 19       	sub	r24, r15
    118c:	64 01       	movw	r12, r8
    118e:	53 01       	movw	r10, r6
    1190:	08 2e       	mov	r0, r24
    1192:	04 c0       	rjmp	.+8      	; 0x119c <__umoddi3+0x3c8>
    1194:	d6 94       	lsr	r13
    1196:	c7 94       	ror	r12
    1198:	b7 94       	ror	r11
    119a:	a7 94       	ror	r10
    119c:	0a 94       	dec	r0
    119e:	d2 f7       	brpl	.-12     	; 0x1194 <__umoddi3+0x3c0>
    11a0:	a4 01       	movw	r20, r8
    11a2:	93 01       	movw	r18, r6
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <__umoddi3+0x3da>
    11a6:	22 0f       	add	r18, r18
    11a8:	33 1f       	adc	r19, r19
    11aa:	44 1f       	adc	r20, r20
    11ac:	55 1f       	adc	r21, r21
    11ae:	fa 94       	dec	r15
    11b0:	d2 f7       	brpl	.-12     	; 0x11a6 <__umoddi3+0x3d2>
    11b2:	6c 96       	adiw	r28, 0x1c	; 28
    11b4:	6c ac       	ldd	r6, Y+60	; 0x3c
    11b6:	7d ac       	ldd	r7, Y+61	; 0x3d
    11b8:	8e ac       	ldd	r8, Y+62	; 0x3e
    11ba:	9f ac       	ldd	r9, Y+63	; 0x3f
    11bc:	6c 97       	sbiw	r28, 0x1c	; 28
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <__umoddi3+0x3f4>
    11c0:	96 94       	lsr	r9
    11c2:	87 94       	ror	r8
    11c4:	77 94       	ror	r7
    11c6:	67 94       	ror	r6
    11c8:	8a 95       	dec	r24
    11ca:	d2 f7       	brpl	.-12     	; 0x11c0 <__umoddi3+0x3ec>
    11cc:	84 01       	movw	r16, r8
    11ce:	73 01       	movw	r14, r6
    11d0:	e2 2a       	or	r14, r18
    11d2:	f3 2a       	or	r15, r19
    11d4:	04 2b       	or	r16, r20
    11d6:	15 2b       	or	r17, r21
    11d8:	ed a6       	std	Y+45, r14	; 0x2d
    11da:	fe a6       	std	Y+46, r15	; 0x2e
    11dc:	0f a7       	std	Y+47, r16	; 0x2f
    11de:	18 ab       	std	Y+48, r17	; 0x30
    11e0:	32 01       	movw	r6, r4
    11e2:	88 24       	eor	r8, r8
    11e4:	99 24       	eor	r9, r9
    11e6:	b2 01       	movw	r22, r4
    11e8:	a1 01       	movw	r20, r2
    11ea:	60 70       	andi	r22, 0x00	; 0
    11ec:	70 70       	andi	r23, 0x00	; 0
    11ee:	25 96       	adiw	r28, 0x05	; 5
    11f0:	4c af       	std	Y+60, r20	; 0x3c
    11f2:	5d af       	std	Y+61, r21	; 0x3d
    11f4:	6e af       	std	Y+62, r22	; 0x3e
    11f6:	7f af       	std	Y+63, r23	; 0x3f
    11f8:	25 97       	sbiw	r28, 0x05	; 5
    11fa:	c6 01       	movw	r24, r12
    11fc:	b5 01       	movw	r22, r10
    11fe:	a4 01       	movw	r20, r8
    1200:	93 01       	movw	r18, r6
    1202:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
    1206:	7b 01       	movw	r14, r22
    1208:	8c 01       	movw	r16, r24
    120a:	c6 01       	movw	r24, r12
    120c:	b5 01       	movw	r22, r10
    120e:	a4 01       	movw	r20, r8
    1210:	93 01       	movw	r18, r6
    1212:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
    1216:	ca 01       	movw	r24, r20
    1218:	b9 01       	movw	r22, r18
    121a:	25 96       	adiw	r28, 0x05	; 5
    121c:	2c ad       	ldd	r18, Y+60	; 0x3c
    121e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1220:	4e ad       	ldd	r20, Y+62	; 0x3e
    1222:	5f ad       	ldd	r21, Y+63	; 0x3f
    1224:	25 97       	sbiw	r28, 0x05	; 5
    1226:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
    122a:	9b 01       	movw	r18, r22
    122c:	ac 01       	movw	r20, r24
    122e:	87 01       	movw	r16, r14
    1230:	ff 24       	eor	r15, r15
    1232:	ee 24       	eor	r14, r14
    1234:	ad a4       	ldd	r10, Y+45	; 0x2d
    1236:	be a4       	ldd	r11, Y+46	; 0x2e
    1238:	cf a4       	ldd	r12, Y+47	; 0x2f
    123a:	d8 a8       	ldd	r13, Y+48	; 0x30
    123c:	c6 01       	movw	r24, r12
    123e:	aa 27       	eor	r26, r26
    1240:	bb 27       	eor	r27, r27
    1242:	5c 01       	movw	r10, r24
    1244:	6d 01       	movw	r12, r26
    1246:	ae 28       	or	r10, r14
    1248:	bf 28       	or	r11, r15
    124a:	c0 2a       	or	r12, r16
    124c:	d1 2a       	or	r13, r17
    124e:	a2 16       	cp	r10, r18
    1250:	b3 06       	cpc	r11, r19
    1252:	c4 06       	cpc	r12, r20
    1254:	d5 06       	cpc	r13, r21
    1256:	90 f4       	brcc	.+36     	; 0x127c <__umoddi3+0x4a8>
    1258:	a2 0c       	add	r10, r2
    125a:	b3 1c       	adc	r11, r3
    125c:	c4 1c       	adc	r12, r4
    125e:	d5 1c       	adc	r13, r5
    1260:	a2 14       	cp	r10, r2
    1262:	b3 04       	cpc	r11, r3
    1264:	c4 04       	cpc	r12, r4
    1266:	d5 04       	cpc	r13, r5
    1268:	48 f0       	brcs	.+18     	; 0x127c <__umoddi3+0x4a8>
    126a:	a2 16       	cp	r10, r18
    126c:	b3 06       	cpc	r11, r19
    126e:	c4 06       	cpc	r12, r20
    1270:	d5 06       	cpc	r13, r21
    1272:	20 f4       	brcc	.+8      	; 0x127c <__umoddi3+0x4a8>
    1274:	a2 0c       	add	r10, r2
    1276:	b3 1c       	adc	r11, r3
    1278:	c4 1c       	adc	r12, r4
    127a:	d5 1c       	adc	r13, r5
    127c:	a2 1a       	sub	r10, r18
    127e:	b3 0a       	sbc	r11, r19
    1280:	c4 0a       	sbc	r12, r20
    1282:	d5 0a       	sbc	r13, r21
    1284:	c6 01       	movw	r24, r12
    1286:	b5 01       	movw	r22, r10
    1288:	a4 01       	movw	r20, r8
    128a:	93 01       	movw	r18, r6
    128c:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
    1290:	7b 01       	movw	r14, r22
    1292:	8c 01       	movw	r16, r24
    1294:	c6 01       	movw	r24, r12
    1296:	b5 01       	movw	r22, r10
    1298:	a4 01       	movw	r20, r8
    129a:	93 01       	movw	r18, r6
    129c:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
    12a0:	ca 01       	movw	r24, r20
    12a2:	b9 01       	movw	r22, r18
    12a4:	25 96       	adiw	r28, 0x05	; 5
    12a6:	2c ad       	ldd	r18, Y+60	; 0x3c
    12a8:	3d ad       	ldd	r19, Y+61	; 0x3d
    12aa:	4e ad       	ldd	r20, Y+62	; 0x3e
    12ac:	5f ad       	ldd	r21, Y+63	; 0x3f
    12ae:	25 97       	sbiw	r28, 0x05	; 5
    12b0:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
    12b4:	9b 01       	movw	r18, r22
    12b6:	ac 01       	movw	r20, r24
    12b8:	87 01       	movw	r16, r14
    12ba:	ff 24       	eor	r15, r15
    12bc:	ee 24       	eor	r14, r14
    12be:	8d a5       	ldd	r24, Y+45	; 0x2d
    12c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    12c2:	af a5       	ldd	r26, Y+47	; 0x2f
    12c4:	b8 a9       	ldd	r27, Y+48	; 0x30
    12c6:	a0 70       	andi	r26, 0x00	; 0
    12c8:	b0 70       	andi	r27, 0x00	; 0
    12ca:	57 01       	movw	r10, r14
    12cc:	68 01       	movw	r12, r16
    12ce:	a8 2a       	or	r10, r24
    12d0:	b9 2a       	or	r11, r25
    12d2:	ca 2a       	or	r12, r26
    12d4:	db 2a       	or	r13, r27
    12d6:	a2 16       	cp	r10, r18
    12d8:	b3 06       	cpc	r11, r19
    12da:	c4 06       	cpc	r12, r20
    12dc:	d5 06       	cpc	r13, r21
    12de:	90 f4       	brcc	.+36     	; 0x1304 <__umoddi3+0x530>
    12e0:	a2 0c       	add	r10, r2
    12e2:	b3 1c       	adc	r11, r3
    12e4:	c4 1c       	adc	r12, r4
    12e6:	d5 1c       	adc	r13, r5
    12e8:	a2 14       	cp	r10, r2
    12ea:	b3 04       	cpc	r11, r3
    12ec:	c4 04       	cpc	r12, r4
    12ee:	d5 04       	cpc	r13, r5
    12f0:	48 f0       	brcs	.+18     	; 0x1304 <__umoddi3+0x530>
    12f2:	a2 16       	cp	r10, r18
    12f4:	b3 06       	cpc	r11, r19
    12f6:	c4 06       	cpc	r12, r20
    12f8:	d5 06       	cpc	r13, r21
    12fa:	20 f4       	brcc	.+8      	; 0x1304 <__umoddi3+0x530>
    12fc:	a2 0c       	add	r10, r2
    12fe:	b3 1c       	adc	r11, r3
    1300:	c4 1c       	adc	r12, r4
    1302:	d5 1c       	adc	r13, r5
    1304:	6c 96       	adiw	r28, 0x1c	; 28
    1306:	ec ac       	ldd	r14, Y+60	; 0x3c
    1308:	fd ac       	ldd	r15, Y+61	; 0x3d
    130a:	0e ad       	ldd	r16, Y+62	; 0x3e
    130c:	1f ad       	ldd	r17, Y+63	; 0x3f
    130e:	6c 97       	sbiw	r28, 0x1c	; 28
    1310:	68 96       	adiw	r28, 0x18	; 24
    1312:	0f ac       	ldd	r0, Y+63	; 0x3f
    1314:	68 97       	sbiw	r28, 0x18	; 24
    1316:	04 c0       	rjmp	.+8      	; 0x1320 <__umoddi3+0x54c>
    1318:	ee 0c       	add	r14, r14
    131a:	ff 1c       	adc	r15, r15
    131c:	00 1f       	adc	r16, r16
    131e:	11 1f       	adc	r17, r17
    1320:	0a 94       	dec	r0
    1322:	d2 f7       	brpl	.-12     	; 0x1318 <__umoddi3+0x544>
    1324:	e9 aa       	std	Y+49, r14	; 0x31
    1326:	fa aa       	std	Y+50, r15	; 0x32
    1328:	0b ab       	std	Y+51, r16	; 0x33
    132a:	1c ab       	std	Y+52, r17	; 0x34
    132c:	a2 1a       	sub	r10, r18
    132e:	b3 0a       	sbc	r11, r19
    1330:	c4 0a       	sbc	r12, r20
    1332:	d5 0a       	sbc	r13, r21
    1334:	32 01       	movw	r6, r4
    1336:	88 24       	eor	r8, r8
    1338:	99 24       	eor	r9, r9
    133a:	b2 01       	movw	r22, r4
    133c:	a1 01       	movw	r20, r2
    133e:	60 70       	andi	r22, 0x00	; 0
    1340:	70 70       	andi	r23, 0x00	; 0
    1342:	29 96       	adiw	r28, 0x09	; 9
    1344:	4c af       	std	Y+60, r20	; 0x3c
    1346:	5d af       	std	Y+61, r21	; 0x3d
    1348:	6e af       	std	Y+62, r22	; 0x3e
    134a:	7f af       	std	Y+63, r23	; 0x3f
    134c:	29 97       	sbiw	r28, 0x09	; 9
    134e:	c6 01       	movw	r24, r12
    1350:	b5 01       	movw	r22, r10
    1352:	a4 01       	movw	r20, r8
    1354:	93 01       	movw	r18, r6
    1356:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
    135a:	7b 01       	movw	r14, r22
    135c:	8c 01       	movw	r16, r24
    135e:	c6 01       	movw	r24, r12
    1360:	b5 01       	movw	r22, r10
    1362:	a4 01       	movw	r20, r8
    1364:	93 01       	movw	r18, r6
    1366:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
    136a:	ca 01       	movw	r24, r20
    136c:	b9 01       	movw	r22, r18
    136e:	29 96       	adiw	r28, 0x09	; 9
    1370:	2c ad       	ldd	r18, Y+60	; 0x3c
    1372:	3d ad       	ldd	r19, Y+61	; 0x3d
    1374:	4e ad       	ldd	r20, Y+62	; 0x3e
    1376:	5f ad       	ldd	r21, Y+63	; 0x3f
    1378:	29 97       	sbiw	r28, 0x09	; 9
    137a:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
    137e:	9b 01       	movw	r18, r22
    1380:	ac 01       	movw	r20, r24
    1382:	87 01       	movw	r16, r14
    1384:	ff 24       	eor	r15, r15
    1386:	ee 24       	eor	r14, r14
    1388:	a9 a8       	ldd	r10, Y+49	; 0x31
    138a:	ba a8       	ldd	r11, Y+50	; 0x32
    138c:	cb a8       	ldd	r12, Y+51	; 0x33
    138e:	dc a8       	ldd	r13, Y+52	; 0x34
    1390:	c6 01       	movw	r24, r12
    1392:	aa 27       	eor	r26, r26
    1394:	bb 27       	eor	r27, r27
    1396:	57 01       	movw	r10, r14
    1398:	68 01       	movw	r12, r16
    139a:	a8 2a       	or	r10, r24
    139c:	b9 2a       	or	r11, r25
    139e:	ca 2a       	or	r12, r26
    13a0:	db 2a       	or	r13, r27
    13a2:	a2 16       	cp	r10, r18
    13a4:	b3 06       	cpc	r11, r19
    13a6:	c4 06       	cpc	r12, r20
    13a8:	d5 06       	cpc	r13, r21
    13aa:	90 f4       	brcc	.+36     	; 0x13d0 <__umoddi3+0x5fc>
    13ac:	a2 0c       	add	r10, r2
    13ae:	b3 1c       	adc	r11, r3
    13b0:	c4 1c       	adc	r12, r4
    13b2:	d5 1c       	adc	r13, r5
    13b4:	a2 14       	cp	r10, r2
    13b6:	b3 04       	cpc	r11, r3
    13b8:	c4 04       	cpc	r12, r4
    13ba:	d5 04       	cpc	r13, r5
    13bc:	48 f0       	brcs	.+18     	; 0x13d0 <__umoddi3+0x5fc>
    13be:	a2 16       	cp	r10, r18
    13c0:	b3 06       	cpc	r11, r19
    13c2:	c4 06       	cpc	r12, r20
    13c4:	d5 06       	cpc	r13, r21
    13c6:	20 f4       	brcc	.+8      	; 0x13d0 <__umoddi3+0x5fc>
    13c8:	a2 0c       	add	r10, r2
    13ca:	b3 1c       	adc	r11, r3
    13cc:	c4 1c       	adc	r12, r4
    13ce:	d5 1c       	adc	r13, r5
    13d0:	a2 1a       	sub	r10, r18
    13d2:	b3 0a       	sbc	r11, r19
    13d4:	c4 0a       	sbc	r12, r20
    13d6:	d5 0a       	sbc	r13, r21
    13d8:	c6 01       	movw	r24, r12
    13da:	b5 01       	movw	r22, r10
    13dc:	a4 01       	movw	r20, r8
    13de:	93 01       	movw	r18, r6
    13e0:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
    13e4:	7b 01       	movw	r14, r22
    13e6:	8c 01       	movw	r16, r24
    13e8:	c6 01       	movw	r24, r12
    13ea:	b5 01       	movw	r22, r10
    13ec:	a4 01       	movw	r20, r8
    13ee:	93 01       	movw	r18, r6
    13f0:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
    13f4:	ca 01       	movw	r24, r20
    13f6:	b9 01       	movw	r22, r18
    13f8:	29 96       	adiw	r28, 0x09	; 9
    13fa:	2c ad       	ldd	r18, Y+60	; 0x3c
    13fc:	3d ad       	ldd	r19, Y+61	; 0x3d
    13fe:	4e ad       	ldd	r20, Y+62	; 0x3e
    1400:	5f ad       	ldd	r21, Y+63	; 0x3f
    1402:	29 97       	sbiw	r28, 0x09	; 9
    1404:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
    1408:	9b 01       	movw	r18, r22
    140a:	ac 01       	movw	r20, r24
    140c:	87 01       	movw	r16, r14
    140e:	ff 24       	eor	r15, r15
    1410:	ee 24       	eor	r14, r14
    1412:	89 a9       	ldd	r24, Y+49	; 0x31
    1414:	9a a9       	ldd	r25, Y+50	; 0x32
    1416:	ab a9       	ldd	r26, Y+51	; 0x33
    1418:	bc a9       	ldd	r27, Y+52	; 0x34
    141a:	a0 70       	andi	r26, 0x00	; 0
    141c:	b0 70       	andi	r27, 0x00	; 0
    141e:	e8 2a       	or	r14, r24
    1420:	f9 2a       	or	r15, r25
    1422:	0a 2b       	or	r16, r26
    1424:	1b 2b       	or	r17, r27
    1426:	e2 16       	cp	r14, r18
    1428:	f3 06       	cpc	r15, r19
    142a:	04 07       	cpc	r16, r20
    142c:	15 07       	cpc	r17, r21
    142e:	90 f4       	brcc	.+36     	; 0x1454 <__umoddi3+0x680>
    1430:	e2 0c       	add	r14, r2
    1432:	f3 1c       	adc	r15, r3
    1434:	04 1d       	adc	r16, r4
    1436:	15 1d       	adc	r17, r5
    1438:	e2 14       	cp	r14, r2
    143a:	f3 04       	cpc	r15, r3
    143c:	04 05       	cpc	r16, r4
    143e:	15 05       	cpc	r17, r5
    1440:	48 f0       	brcs	.+18     	; 0x1454 <__umoddi3+0x680>
    1442:	e2 16       	cp	r14, r18
    1444:	f3 06       	cpc	r15, r19
    1446:	04 07       	cpc	r16, r20
    1448:	15 07       	cpc	r17, r21
    144a:	20 f4       	brcc	.+8      	; 0x1454 <__umoddi3+0x680>
    144c:	e2 0c       	add	r14, r2
    144e:	f3 1c       	adc	r15, r3
    1450:	04 1d       	adc	r16, r4
    1452:	15 1d       	adc	r17, r5
    1454:	e2 1a       	sub	r14, r18
    1456:	f3 0a       	sbc	r15, r19
    1458:	04 0b       	sbc	r16, r20
    145a:	15 0b       	sbc	r17, r21
    145c:	d8 01       	movw	r26, r16
    145e:	c7 01       	movw	r24, r14
    1460:	09 ac       	ldd	r0, Y+57	; 0x39
    1462:	04 c0       	rjmp	.+8      	; 0x146c <__umoddi3+0x698>
    1464:	b6 95       	lsr	r27
    1466:	a7 95       	ror	r26
    1468:	97 95       	ror	r25
    146a:	87 95       	ror	r24
    146c:	0a 94       	dec	r0
    146e:	d2 f7       	brpl	.-12     	; 0x1464 <__umoddi3+0x690>
    1470:	89 8b       	std	Y+17, r24	; 0x11
    1472:	9a 8b       	std	Y+18, r25	; 0x12
    1474:	ab 8b       	std	Y+19, r26	; 0x13
    1476:	bc 8b       	std	Y+20, r27	; 0x14
    1478:	1d 8a       	std	Y+21, r1	; 0x15
    147a:	1e 8a       	std	Y+22, r1	; 0x16
    147c:	1f 8a       	std	Y+23, r1	; 0x17
    147e:	18 8e       	std	Y+24, r1	; 0x18
    1480:	28 2f       	mov	r18, r24
    1482:	3a 89       	ldd	r19, Y+18	; 0x12
    1484:	4b 89       	ldd	r20, Y+19	; 0x13
    1486:	5c 89       	ldd	r21, Y+20	; 0x14
    1488:	6d 89       	ldd	r22, Y+21	; 0x15
    148a:	0c c3       	rjmp	.+1560   	; 0x1aa4 <__umoddi3+0xcd0>
    148c:	6a 14       	cp	r6, r10
    148e:	7b 04       	cpc	r7, r11
    1490:	8c 04       	cpc	r8, r12
    1492:	9d 04       	cpc	r9, r13
    1494:	08 f4       	brcc	.+2      	; 0x1498 <__umoddi3+0x6c4>
    1496:	09 c3       	rjmp	.+1554   	; 0x1aaa <__umoddi3+0xcd6>
    1498:	00 e0       	ldi	r16, 0x00	; 0
    149a:	a0 16       	cp	r10, r16
    149c:	00 e0       	ldi	r16, 0x00	; 0
    149e:	b0 06       	cpc	r11, r16
    14a0:	01 e0       	ldi	r16, 0x01	; 1
    14a2:	c0 06       	cpc	r12, r16
    14a4:	00 e0       	ldi	r16, 0x00	; 0
    14a6:	d0 06       	cpc	r13, r16
    14a8:	88 f4       	brcc	.+34     	; 0x14cc <__umoddi3+0x6f8>
    14aa:	1f ef       	ldi	r17, 0xFF	; 255
    14ac:	a1 16       	cp	r10, r17
    14ae:	b1 04       	cpc	r11, r1
    14b0:	c1 04       	cpc	r12, r1
    14b2:	d1 04       	cpc	r13, r1
    14b4:	39 f0       	breq	.+14     	; 0x14c4 <__umoddi3+0x6f0>
    14b6:	30 f0       	brcs	.+12     	; 0x14c4 <__umoddi3+0x6f0>
    14b8:	28 e0       	ldi	r18, 0x08	; 8
    14ba:	e2 2e       	mov	r14, r18
    14bc:	f1 2c       	mov	r15, r1
    14be:	01 2d       	mov	r16, r1
    14c0:	11 2d       	mov	r17, r1
    14c2:	18 c0       	rjmp	.+48     	; 0x14f4 <__umoddi3+0x720>
    14c4:	ee 24       	eor	r14, r14
    14c6:	ff 24       	eor	r15, r15
    14c8:	87 01       	movw	r16, r14
    14ca:	14 c0       	rjmp	.+40     	; 0x14f4 <__umoddi3+0x720>
    14cc:	40 e0       	ldi	r20, 0x00	; 0
    14ce:	a4 16       	cp	r10, r20
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	b4 06       	cpc	r11, r20
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	c4 06       	cpc	r12, r20
    14d8:	41 e0       	ldi	r20, 0x01	; 1
    14da:	d4 06       	cpc	r13, r20
    14dc:	30 f0       	brcs	.+12     	; 0x14ea <__umoddi3+0x716>
    14de:	98 e1       	ldi	r25, 0x18	; 24
    14e0:	e9 2e       	mov	r14, r25
    14e2:	f1 2c       	mov	r15, r1
    14e4:	01 2d       	mov	r16, r1
    14e6:	11 2d       	mov	r17, r1
    14e8:	05 c0       	rjmp	.+10     	; 0x14f4 <__umoddi3+0x720>
    14ea:	80 e1       	ldi	r24, 0x10	; 16
    14ec:	e8 2e       	mov	r14, r24
    14ee:	f1 2c       	mov	r15, r1
    14f0:	01 2d       	mov	r16, r1
    14f2:	11 2d       	mov	r17, r1
    14f4:	d6 01       	movw	r26, r12
    14f6:	c5 01       	movw	r24, r10
    14f8:	0e 2c       	mov	r0, r14
    14fa:	04 c0       	rjmp	.+8      	; 0x1504 <__umoddi3+0x730>
    14fc:	b6 95       	lsr	r27
    14fe:	a7 95       	ror	r26
    1500:	97 95       	ror	r25
    1502:	87 95       	ror	r24
    1504:	0a 94       	dec	r0
    1506:	d2 f7       	brpl	.-12     	; 0x14fc <__umoddi3+0x728>
    1508:	87 50       	subi	r24, 0x07	; 7
    150a:	9f 4f       	sbci	r25, 0xFF	; 255
    150c:	dc 01       	movw	r26, r24
    150e:	2c 91       	ld	r18, X
    1510:	80 e2       	ldi	r24, 0x20	; 32
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a0 e0       	ldi	r26, 0x00	; 0
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	8e 19       	sub	r24, r14
    151a:	9f 09       	sbc	r25, r15
    151c:	a0 0b       	sbc	r26, r16
    151e:	b1 0b       	sbc	r27, r17
    1520:	82 1b       	sub	r24, r18
    1522:	91 09       	sbc	r25, r1
    1524:	a1 09       	sbc	r26, r1
    1526:	b1 09       	sbc	r27, r1
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	a1 05       	cpc	r26, r1
    152c:	b1 05       	cpc	r27, r1
    152e:	09 f0       	breq	.+2      	; 0x1532 <__umoddi3+0x75e>
    1530:	4f c0       	rjmp	.+158    	; 0x15d0 <__umoddi3+0x7fc>
    1532:	a6 14       	cp	r10, r6
    1534:	b7 04       	cpc	r11, r7
    1536:	c8 04       	cpc	r12, r8
    1538:	d9 04       	cpc	r13, r9
    153a:	58 f0       	brcs	.+22     	; 0x1552 <__umoddi3+0x77e>
    153c:	6c 96       	adiw	r28, 0x1c	; 28
    153e:	ec ac       	ldd	r14, Y+60	; 0x3c
    1540:	fd ac       	ldd	r15, Y+61	; 0x3d
    1542:	0e ad       	ldd	r16, Y+62	; 0x3e
    1544:	1f ad       	ldd	r17, Y+63	; 0x3f
    1546:	6c 97       	sbiw	r28, 0x1c	; 28
    1548:	e2 14       	cp	r14, r2
    154a:	f3 04       	cpc	r15, r3
    154c:	04 05       	cpc	r16, r4
    154e:	15 05       	cpc	r17, r5
    1550:	68 f1       	brcs	.+90     	; 0x15ac <__umoddi3+0x7d8>
    1552:	6c 96       	adiw	r28, 0x1c	; 28
    1554:	ec ac       	ldd	r14, Y+60	; 0x3c
    1556:	fd ac       	ldd	r15, Y+61	; 0x3d
    1558:	0e ad       	ldd	r16, Y+62	; 0x3e
    155a:	1f ad       	ldd	r17, Y+63	; 0x3f
    155c:	6c 97       	sbiw	r28, 0x1c	; 28
    155e:	e2 18       	sub	r14, r2
    1560:	f3 08       	sbc	r15, r3
    1562:	04 09       	sbc	r16, r4
    1564:	15 09       	sbc	r17, r5
    1566:	a4 01       	movw	r20, r8
    1568:	93 01       	movw	r18, r6
    156a:	2a 19       	sub	r18, r10
    156c:	3b 09       	sbc	r19, r11
    156e:	4c 09       	sbc	r20, r12
    1570:	5d 09       	sbc	r21, r13
    1572:	aa 24       	eor	r10, r10
    1574:	bb 24       	eor	r11, r11
    1576:	65 01       	movw	r12, r10
    1578:	6c 96       	adiw	r28, 0x1c	; 28
    157a:	6c ad       	ldd	r22, Y+60	; 0x3c
    157c:	7d ad       	ldd	r23, Y+61	; 0x3d
    157e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1580:	9f ad       	ldd	r25, Y+63	; 0x3f
    1582:	6c 97       	sbiw	r28, 0x1c	; 28
    1584:	6e 15       	cp	r22, r14
    1586:	7f 05       	cpc	r23, r15
    1588:	80 07       	cpc	r24, r16
    158a:	91 07       	cpc	r25, r17
    158c:	28 f4       	brcc	.+10     	; 0x1598 <__umoddi3+0x7c4>
    158e:	b1 e0       	ldi	r27, 0x01	; 1
    1590:	ab 2e       	mov	r10, r27
    1592:	b1 2c       	mov	r11, r1
    1594:	c1 2c       	mov	r12, r1
    1596:	d1 2c       	mov	r13, r1
    1598:	da 01       	movw	r26, r20
    159a:	c9 01       	movw	r24, r18
    159c:	8a 19       	sub	r24, r10
    159e:	9b 09       	sbc	r25, r11
    15a0:	ac 09       	sbc	r26, r12
    15a2:	bd 09       	sbc	r27, r13
    15a4:	8d ab       	std	Y+53, r24	; 0x35
    15a6:	9e ab       	std	Y+54, r25	; 0x36
    15a8:	af ab       	std	Y+55, r26	; 0x37
    15aa:	b8 af       	std	Y+56, r27	; 0x38
    15ac:	e9 8a       	std	Y+17, r14	; 0x11
    15ae:	fa 8a       	std	Y+18, r15	; 0x12
    15b0:	0b 8b       	std	Y+19, r16	; 0x13
    15b2:	1c 8b       	std	Y+20, r17	; 0x14
    15b4:	6d a8       	ldd	r6, Y+53	; 0x35
    15b6:	7e a8       	ldd	r7, Y+54	; 0x36
    15b8:	8f a8       	ldd	r8, Y+55	; 0x37
    15ba:	98 ac       	ldd	r9, Y+56	; 0x38
    15bc:	6d 8a       	std	Y+21, r6	; 0x15
    15be:	7e 8a       	std	Y+22, r7	; 0x16
    15c0:	8f 8a       	std	Y+23, r8	; 0x17
    15c2:	98 8e       	std	Y+24, r9	; 0x18
    15c4:	2e 2d       	mov	r18, r14
    15c6:	3a 89       	ldd	r19, Y+18	; 0x12
    15c8:	4b 89       	ldd	r20, Y+19	; 0x13
    15ca:	5c 89       	ldd	r21, Y+20	; 0x14
    15cc:	6d a9       	ldd	r22, Y+53	; 0x35
    15ce:	6a c2       	rjmp	.+1236   	; 0x1aa4 <__umoddi3+0xcd0>
    15d0:	67 96       	adiw	r28, 0x17	; 23
    15d2:	8f af       	std	Y+63, r24	; 0x3f
    15d4:	67 97       	sbiw	r28, 0x17	; 23
    15d6:	a6 01       	movw	r20, r12
    15d8:	95 01       	movw	r18, r10
    15da:	08 2e       	mov	r0, r24
    15dc:	04 c0       	rjmp	.+8      	; 0x15e6 <__umoddi3+0x812>
    15de:	22 0f       	add	r18, r18
    15e0:	33 1f       	adc	r19, r19
    15e2:	44 1f       	adc	r20, r20
    15e4:	55 1f       	adc	r21, r21
    15e6:	0a 94       	dec	r0
    15e8:	d2 f7       	brpl	.-12     	; 0x15de <__umoddi3+0x80a>
    15ea:	a0 e2       	ldi	r26, 0x20	; 32
    15ec:	aa 2e       	mov	r10, r26
    15ee:	a8 1a       	sub	r10, r24
    15f0:	66 96       	adiw	r28, 0x16	; 22
    15f2:	af ae       	std	Y+63, r10	; 0x3f
    15f4:	66 97       	sbiw	r28, 0x16	; 22
    15f6:	d2 01       	movw	r26, r4
    15f8:	c1 01       	movw	r24, r2
    15fa:	04 c0       	rjmp	.+8      	; 0x1604 <__umoddi3+0x830>
    15fc:	b6 95       	lsr	r27
    15fe:	a7 95       	ror	r26
    1600:	97 95       	ror	r25
    1602:	87 95       	ror	r24
    1604:	aa 94       	dec	r10
    1606:	d2 f7       	brpl	.-12     	; 0x15fc <__umoddi3+0x828>
    1608:	6c 01       	movw	r12, r24
    160a:	7d 01       	movw	r14, r26
    160c:	c2 2a       	or	r12, r18
    160e:	d3 2a       	or	r13, r19
    1610:	e4 2a       	or	r14, r20
    1612:	f5 2a       	or	r15, r21
    1614:	c9 a6       	std	Y+41, r12	; 0x29
    1616:	da a6       	std	Y+42, r13	; 0x2a
    1618:	eb a6       	std	Y+43, r14	; 0x2b
    161a:	fc a6       	std	Y+44, r15	; 0x2c
    161c:	82 01       	movw	r16, r4
    161e:	71 01       	movw	r14, r2
    1620:	67 96       	adiw	r28, 0x17	; 23
    1622:	0f ac       	ldd	r0, Y+63	; 0x3f
    1624:	67 97       	sbiw	r28, 0x17	; 23
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <__umoddi3+0x85c>
    1628:	ee 0c       	add	r14, r14
    162a:	ff 1c       	adc	r15, r15
    162c:	00 1f       	adc	r16, r16
    162e:	11 1f       	adc	r17, r17
    1630:	0a 94       	dec	r0
    1632:	d2 f7       	brpl	.-12     	; 0x1628 <__umoddi3+0x854>
    1634:	ed a2       	std	Y+37, r14	; 0x25
    1636:	fe a2       	std	Y+38, r15	; 0x26
    1638:	0f a3       	std	Y+39, r16	; 0x27
    163a:	18 a7       	std	Y+40, r17	; 0x28
    163c:	64 01       	movw	r12, r8
    163e:	53 01       	movw	r10, r6
    1640:	66 96       	adiw	r28, 0x16	; 22
    1642:	0f ac       	ldd	r0, Y+63	; 0x3f
    1644:	66 97       	sbiw	r28, 0x16	; 22
    1646:	04 c0       	rjmp	.+8      	; 0x1650 <__umoddi3+0x87c>
    1648:	d6 94       	lsr	r13
    164a:	c7 94       	ror	r12
    164c:	b7 94       	ror	r11
    164e:	a7 94       	ror	r10
    1650:	0a 94       	dec	r0
    1652:	d2 f7       	brpl	.-12     	; 0x1648 <__umoddi3+0x874>
    1654:	a4 01       	movw	r20, r8
    1656:	93 01       	movw	r18, r6
    1658:	67 96       	adiw	r28, 0x17	; 23
    165a:	0f ac       	ldd	r0, Y+63	; 0x3f
    165c:	67 97       	sbiw	r28, 0x17	; 23
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <__umoddi3+0x894>
    1660:	22 0f       	add	r18, r18
    1662:	33 1f       	adc	r19, r19
    1664:	44 1f       	adc	r20, r20
    1666:	55 1f       	adc	r21, r21
    1668:	0a 94       	dec	r0
    166a:	d2 f7       	brpl	.-12     	; 0x1660 <__umoddi3+0x88c>
    166c:	6c 96       	adiw	r28, 0x1c	; 28
    166e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1670:	9d ad       	ldd	r25, Y+61	; 0x3d
    1672:	ae ad       	ldd	r26, Y+62	; 0x3e
    1674:	bf ad       	ldd	r27, Y+63	; 0x3f
    1676:	6c 97       	sbiw	r28, 0x1c	; 28
    1678:	66 96       	adiw	r28, 0x16	; 22
    167a:	0f ac       	ldd	r0, Y+63	; 0x3f
    167c:	66 97       	sbiw	r28, 0x16	; 22
    167e:	04 c0       	rjmp	.+8      	; 0x1688 <__umoddi3+0x8b4>
    1680:	b6 95       	lsr	r27
    1682:	a7 95       	ror	r26
    1684:	97 95       	ror	r25
    1686:	87 95       	ror	r24
    1688:	0a 94       	dec	r0
    168a:	d2 f7       	brpl	.-12     	; 0x1680 <__umoddi3+0x8ac>
    168c:	3c 01       	movw	r6, r24
    168e:	4d 01       	movw	r8, r26
    1690:	62 2a       	or	r6, r18
    1692:	73 2a       	or	r7, r19
    1694:	84 2a       	or	r8, r20
    1696:	95 2a       	or	r9, r21
    1698:	69 a2       	std	Y+33, r6	; 0x21
    169a:	7a a2       	std	Y+34, r7	; 0x22
    169c:	8b a2       	std	Y+35, r8	; 0x23
    169e:	9c a2       	std	Y+36, r9	; 0x24
    16a0:	6c 96       	adiw	r28, 0x1c	; 28
    16a2:	ec ac       	ldd	r14, Y+60	; 0x3c
    16a4:	fd ac       	ldd	r15, Y+61	; 0x3d
    16a6:	0e ad       	ldd	r16, Y+62	; 0x3e
    16a8:	1f ad       	ldd	r17, Y+63	; 0x3f
    16aa:	6c 97       	sbiw	r28, 0x1c	; 28
    16ac:	67 96       	adiw	r28, 0x17	; 23
    16ae:	0f ac       	ldd	r0, Y+63	; 0x3f
    16b0:	67 97       	sbiw	r28, 0x17	; 23
    16b2:	04 c0       	rjmp	.+8      	; 0x16bc <__umoddi3+0x8e8>
    16b4:	ee 0c       	add	r14, r14
    16b6:	ff 1c       	adc	r15, r15
    16b8:	00 1f       	adc	r16, r16
    16ba:	11 1f       	adc	r17, r17
    16bc:	0a 94       	dec	r0
    16be:	d2 f7       	brpl	.-12     	; 0x16b4 <__umoddi3+0x8e0>
    16c0:	ed 8e       	std	Y+29, r14	; 0x1d
    16c2:	fe 8e       	std	Y+30, r15	; 0x1e
    16c4:	0f 8f       	std	Y+31, r16	; 0x1f
    16c6:	18 a3       	std	Y+32, r17	; 0x20
    16c8:	49 a5       	ldd	r20, Y+41	; 0x29
    16ca:	5a a5       	ldd	r21, Y+42	; 0x2a
    16cc:	6b a5       	ldd	r22, Y+43	; 0x2b
    16ce:	7c a5       	ldd	r23, Y+44	; 0x2c
    16d0:	3b 01       	movw	r6, r22
    16d2:	88 24       	eor	r8, r8
    16d4:	99 24       	eor	r9, r9
    16d6:	60 70       	andi	r22, 0x00	; 0
    16d8:	70 70       	andi	r23, 0x00	; 0
    16da:	2d 96       	adiw	r28, 0x0d	; 13
    16dc:	4c af       	std	Y+60, r20	; 0x3c
    16de:	5d af       	std	Y+61, r21	; 0x3d
    16e0:	6e af       	std	Y+62, r22	; 0x3e
    16e2:	7f af       	std	Y+63, r23	; 0x3f
    16e4:	2d 97       	sbiw	r28, 0x0d	; 13
    16e6:	c6 01       	movw	r24, r12
    16e8:	b5 01       	movw	r22, r10
    16ea:	a4 01       	movw	r20, r8
    16ec:	93 01       	movw	r18, r6
    16ee:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
    16f2:	7b 01       	movw	r14, r22
    16f4:	8c 01       	movw	r16, r24
    16f6:	c6 01       	movw	r24, r12
    16f8:	b5 01       	movw	r22, r10
    16fa:	a4 01       	movw	r20, r8
    16fc:	93 01       	movw	r18, r6
    16fe:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
    1702:	c9 01       	movw	r24, r18
    1704:	da 01       	movw	r26, r20
    1706:	1c 01       	movw	r2, r24
    1708:	2d 01       	movw	r4, r26
    170a:	c2 01       	movw	r24, r4
    170c:	b1 01       	movw	r22, r2
    170e:	2d 96       	adiw	r28, 0x0d	; 13
    1710:	2c ad       	ldd	r18, Y+60	; 0x3c
    1712:	3d ad       	ldd	r19, Y+61	; 0x3d
    1714:	4e ad       	ldd	r20, Y+62	; 0x3e
    1716:	5f ad       	ldd	r21, Y+63	; 0x3f
    1718:	2d 97       	sbiw	r28, 0x0d	; 13
    171a:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
    171e:	9b 01       	movw	r18, r22
    1720:	ac 01       	movw	r20, r24
    1722:	87 01       	movw	r16, r14
    1724:	ff 24       	eor	r15, r15
    1726:	ee 24       	eor	r14, r14
    1728:	a9 a0       	ldd	r10, Y+33	; 0x21
    172a:	ba a0       	ldd	r11, Y+34	; 0x22
    172c:	cb a0       	ldd	r12, Y+35	; 0x23
    172e:	dc a0       	ldd	r13, Y+36	; 0x24
    1730:	c6 01       	movw	r24, r12
    1732:	aa 27       	eor	r26, r26
    1734:	bb 27       	eor	r27, r27
    1736:	57 01       	movw	r10, r14
    1738:	68 01       	movw	r12, r16
    173a:	a8 2a       	or	r10, r24
    173c:	b9 2a       	or	r11, r25
    173e:	ca 2a       	or	r12, r26
    1740:	db 2a       	or	r13, r27
    1742:	a2 16       	cp	r10, r18
    1744:	b3 06       	cpc	r11, r19
    1746:	c4 06       	cpc	r12, r20
    1748:	d5 06       	cpc	r13, r21
    174a:	00 f5       	brcc	.+64     	; 0x178c <__umoddi3+0x9b8>
    174c:	08 94       	sec
    174e:	21 08       	sbc	r2, r1
    1750:	31 08       	sbc	r3, r1
    1752:	41 08       	sbc	r4, r1
    1754:	51 08       	sbc	r5, r1
    1756:	e9 a4       	ldd	r14, Y+41	; 0x29
    1758:	fa a4       	ldd	r15, Y+42	; 0x2a
    175a:	0b a5       	ldd	r16, Y+43	; 0x2b
    175c:	1c a5       	ldd	r17, Y+44	; 0x2c
    175e:	ae 0c       	add	r10, r14
    1760:	bf 1c       	adc	r11, r15
    1762:	c0 1e       	adc	r12, r16
    1764:	d1 1e       	adc	r13, r17
    1766:	ae 14       	cp	r10, r14
    1768:	bf 04       	cpc	r11, r15
    176a:	c0 06       	cpc	r12, r16
    176c:	d1 06       	cpc	r13, r17
    176e:	70 f0       	brcs	.+28     	; 0x178c <__umoddi3+0x9b8>
    1770:	a2 16       	cp	r10, r18
    1772:	b3 06       	cpc	r11, r19
    1774:	c4 06       	cpc	r12, r20
    1776:	d5 06       	cpc	r13, r21
    1778:	48 f4       	brcc	.+18     	; 0x178c <__umoddi3+0x9b8>
    177a:	08 94       	sec
    177c:	21 08       	sbc	r2, r1
    177e:	31 08       	sbc	r3, r1
    1780:	41 08       	sbc	r4, r1
    1782:	51 08       	sbc	r5, r1
    1784:	ae 0c       	add	r10, r14
    1786:	bf 1c       	adc	r11, r15
    1788:	c0 1e       	adc	r12, r16
    178a:	d1 1e       	adc	r13, r17
    178c:	a2 1a       	sub	r10, r18
    178e:	b3 0a       	sbc	r11, r19
    1790:	c4 0a       	sbc	r12, r20
    1792:	d5 0a       	sbc	r13, r21
    1794:	c6 01       	movw	r24, r12
    1796:	b5 01       	movw	r22, r10
    1798:	a4 01       	movw	r20, r8
    179a:	93 01       	movw	r18, r6
    179c:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
    17a0:	7b 01       	movw	r14, r22
    17a2:	8c 01       	movw	r16, r24
    17a4:	c6 01       	movw	r24, r12
    17a6:	b5 01       	movw	r22, r10
    17a8:	a4 01       	movw	r20, r8
    17aa:	93 01       	movw	r18, r6
    17ac:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
    17b0:	c9 01       	movw	r24, r18
    17b2:	da 01       	movw	r26, r20
    17b4:	3c 01       	movw	r6, r24
    17b6:	4d 01       	movw	r8, r26
    17b8:	c4 01       	movw	r24, r8
    17ba:	b3 01       	movw	r22, r6
    17bc:	2d 96       	adiw	r28, 0x0d	; 13
    17be:	2c ad       	ldd	r18, Y+60	; 0x3c
    17c0:	3d ad       	ldd	r19, Y+61	; 0x3d
    17c2:	4e ad       	ldd	r20, Y+62	; 0x3e
    17c4:	5f ad       	ldd	r21, Y+63	; 0x3f
    17c6:	2d 97       	sbiw	r28, 0x0d	; 13
    17c8:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
    17cc:	9b 01       	movw	r18, r22
    17ce:	ac 01       	movw	r20, r24
    17d0:	87 01       	movw	r16, r14
    17d2:	ff 24       	eor	r15, r15
    17d4:	ee 24       	eor	r14, r14
    17d6:	89 a1       	ldd	r24, Y+33	; 0x21
    17d8:	9a a1       	ldd	r25, Y+34	; 0x22
    17da:	ab a1       	ldd	r26, Y+35	; 0x23
    17dc:	bc a1       	ldd	r27, Y+36	; 0x24
    17de:	a0 70       	andi	r26, 0x00	; 0
    17e0:	b0 70       	andi	r27, 0x00	; 0
    17e2:	57 01       	movw	r10, r14
    17e4:	68 01       	movw	r12, r16
    17e6:	a8 2a       	or	r10, r24
    17e8:	b9 2a       	or	r11, r25
    17ea:	ca 2a       	or	r12, r26
    17ec:	db 2a       	or	r13, r27
    17ee:	a2 16       	cp	r10, r18
    17f0:	b3 06       	cpc	r11, r19
    17f2:	c4 06       	cpc	r12, r20
    17f4:	d5 06       	cpc	r13, r21
    17f6:	00 f5       	brcc	.+64     	; 0x1838 <__umoddi3+0xa64>
    17f8:	08 94       	sec
    17fa:	61 08       	sbc	r6, r1
    17fc:	71 08       	sbc	r7, r1
    17fe:	81 08       	sbc	r8, r1
    1800:	91 08       	sbc	r9, r1
    1802:	69 a5       	ldd	r22, Y+41	; 0x29
    1804:	7a a5       	ldd	r23, Y+42	; 0x2a
    1806:	8b a5       	ldd	r24, Y+43	; 0x2b
    1808:	9c a5       	ldd	r25, Y+44	; 0x2c
    180a:	a6 0e       	add	r10, r22
    180c:	b7 1e       	adc	r11, r23
    180e:	c8 1e       	adc	r12, r24
    1810:	d9 1e       	adc	r13, r25
    1812:	a6 16       	cp	r10, r22
    1814:	b7 06       	cpc	r11, r23
    1816:	c8 06       	cpc	r12, r24
    1818:	d9 06       	cpc	r13, r25
    181a:	70 f0       	brcs	.+28     	; 0x1838 <__umoddi3+0xa64>
    181c:	a2 16       	cp	r10, r18
    181e:	b3 06       	cpc	r11, r19
    1820:	c4 06       	cpc	r12, r20
    1822:	d5 06       	cpc	r13, r21
    1824:	48 f4       	brcc	.+18     	; 0x1838 <__umoddi3+0xa64>
    1826:	08 94       	sec
    1828:	61 08       	sbc	r6, r1
    182a:	71 08       	sbc	r7, r1
    182c:	81 08       	sbc	r8, r1
    182e:	91 08       	sbc	r9, r1
    1830:	a6 0e       	add	r10, r22
    1832:	b7 1e       	adc	r11, r23
    1834:	c8 1e       	adc	r12, r24
    1836:	d9 1e       	adc	r13, r25
    1838:	d6 01       	movw	r26, r12
    183a:	c5 01       	movw	r24, r10
    183c:	82 1b       	sub	r24, r18
    183e:	93 0b       	sbc	r25, r19
    1840:	a4 0b       	sbc	r26, r20
    1842:	b5 0b       	sbc	r27, r21
    1844:	89 8f       	std	Y+25, r24	; 0x19
    1846:	9a 8f       	std	Y+26, r25	; 0x1a
    1848:	ab 8f       	std	Y+27, r26	; 0x1b
    184a:	bc 8f       	std	Y+28, r27	; 0x1c
    184c:	d1 01       	movw	r26, r2
    184e:	99 27       	eor	r25, r25
    1850:	88 27       	eor	r24, r24
    1852:	84 01       	movw	r16, r8
    1854:	73 01       	movw	r14, r6
    1856:	e8 2a       	or	r14, r24
    1858:	f9 2a       	or	r15, r25
    185a:	0a 2b       	or	r16, r26
    185c:	1b 2b       	or	r17, r27
    185e:	4f ef       	ldi	r20, 0xFF	; 255
    1860:	a4 2e       	mov	r10, r20
    1862:	4f ef       	ldi	r20, 0xFF	; 255
    1864:	b4 2e       	mov	r11, r20
    1866:	c1 2c       	mov	r12, r1
    1868:	d1 2c       	mov	r13, r1
    186a:	ae 20       	and	r10, r14
    186c:	bf 20       	and	r11, r15
    186e:	c0 22       	and	r12, r16
    1870:	d1 22       	and	r13, r17
    1872:	78 01       	movw	r14, r16
    1874:	00 27       	eor	r16, r16
    1876:	11 27       	eor	r17, r17
    1878:	6d a0       	ldd	r6, Y+37	; 0x25
    187a:	7e a0       	ldd	r7, Y+38	; 0x26
    187c:	8f a0       	ldd	r8, Y+39	; 0x27
    187e:	98 a4       	ldd	r9, Y+40	; 0x28
    1880:	4f ef       	ldi	r20, 0xFF	; 255
    1882:	5f ef       	ldi	r21, 0xFF	; 255
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	64 22       	and	r6, r20
    188a:	75 22       	and	r7, r21
    188c:	86 22       	and	r8, r22
    188e:	97 22       	and	r9, r23
    1890:	8d a1       	ldd	r24, Y+37	; 0x25
    1892:	9e a1       	ldd	r25, Y+38	; 0x26
    1894:	af a1       	ldd	r26, Y+39	; 0x27
    1896:	b8 a5       	ldd	r27, Y+40	; 0x28
    1898:	bd 01       	movw	r22, r26
    189a:	88 27       	eor	r24, r24
    189c:	99 27       	eor	r25, r25
    189e:	65 96       	adiw	r28, 0x15	; 21
    18a0:	6c af       	std	Y+60, r22	; 0x3c
    18a2:	7d af       	std	Y+61, r23	; 0x3d
    18a4:	8e af       	std	Y+62, r24	; 0x3e
    18a6:	9f af       	std	Y+63, r25	; 0x3f
    18a8:	65 97       	sbiw	r28, 0x15	; 21
    18aa:	c6 01       	movw	r24, r12
    18ac:	b5 01       	movw	r22, r10
    18ae:	a4 01       	movw	r20, r8
    18b0:	93 01       	movw	r18, r6
    18b2:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
    18b6:	61 96       	adiw	r28, 0x11	; 17
    18b8:	6c af       	std	Y+60, r22	; 0x3c
    18ba:	7d af       	std	Y+61, r23	; 0x3d
    18bc:	8e af       	std	Y+62, r24	; 0x3e
    18be:	9f af       	std	Y+63, r25	; 0x3f
    18c0:	61 97       	sbiw	r28, 0x11	; 17
    18c2:	c6 01       	movw	r24, r12
    18c4:	b5 01       	movw	r22, r10
    18c6:	65 96       	adiw	r28, 0x15	; 21
    18c8:	2c ad       	ldd	r18, Y+60	; 0x3c
    18ca:	3d ad       	ldd	r19, Y+61	; 0x3d
    18cc:	4e ad       	ldd	r20, Y+62	; 0x3e
    18ce:	5f ad       	ldd	r21, Y+63	; 0x3f
    18d0:	65 97       	sbiw	r28, 0x15	; 21
    18d2:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
    18d6:	1b 01       	movw	r2, r22
    18d8:	2c 01       	movw	r4, r24
    18da:	c8 01       	movw	r24, r16
    18dc:	b7 01       	movw	r22, r14
    18de:	a4 01       	movw	r20, r8
    18e0:	93 01       	movw	r18, r6
    18e2:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
    18e6:	5b 01       	movw	r10, r22
    18e8:	6c 01       	movw	r12, r24
    18ea:	c8 01       	movw	r24, r16
    18ec:	b7 01       	movw	r22, r14
    18ee:	65 96       	adiw	r28, 0x15	; 21
    18f0:	2c ad       	ldd	r18, Y+60	; 0x3c
    18f2:	3d ad       	ldd	r19, Y+61	; 0x3d
    18f4:	4e ad       	ldd	r20, Y+62	; 0x3e
    18f6:	5f ad       	ldd	r21, Y+63	; 0x3f
    18f8:	65 97       	sbiw	r28, 0x15	; 21
    18fa:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
    18fe:	7b 01       	movw	r14, r22
    1900:	8c 01       	movw	r16, r24
    1902:	a6 01       	movw	r20, r12
    1904:	95 01       	movw	r18, r10
    1906:	22 0d       	add	r18, r2
    1908:	33 1d       	adc	r19, r3
    190a:	44 1d       	adc	r20, r4
    190c:	55 1d       	adc	r21, r5
    190e:	61 96       	adiw	r28, 0x11	; 17
    1910:	6c ac       	ldd	r6, Y+60	; 0x3c
    1912:	7d ac       	ldd	r7, Y+61	; 0x3d
    1914:	8e ac       	ldd	r8, Y+62	; 0x3e
    1916:	9f ac       	ldd	r9, Y+63	; 0x3f
    1918:	61 97       	sbiw	r28, 0x11	; 17
    191a:	c4 01       	movw	r24, r8
    191c:	aa 27       	eor	r26, r26
    191e:	bb 27       	eor	r27, r27
    1920:	28 0f       	add	r18, r24
    1922:	39 1f       	adc	r19, r25
    1924:	4a 1f       	adc	r20, r26
    1926:	5b 1f       	adc	r21, r27
    1928:	2a 15       	cp	r18, r10
    192a:	3b 05       	cpc	r19, r11
    192c:	4c 05       	cpc	r20, r12
    192e:	5d 05       	cpc	r21, r13
    1930:	48 f4       	brcc	.+18     	; 0x1944 <__umoddi3+0xb70>
    1932:	81 2c       	mov	r8, r1
    1934:	91 2c       	mov	r9, r1
    1936:	e1 e0       	ldi	r30, 0x01	; 1
    1938:	ae 2e       	mov	r10, r30
    193a:	b1 2c       	mov	r11, r1
    193c:	e8 0c       	add	r14, r8
    193e:	f9 1c       	adc	r15, r9
    1940:	0a 1d       	adc	r16, r10
    1942:	1b 1d       	adc	r17, r11
    1944:	ca 01       	movw	r24, r20
    1946:	aa 27       	eor	r26, r26
    1948:	bb 27       	eor	r27, r27
    194a:	57 01       	movw	r10, r14
    194c:	68 01       	movw	r12, r16
    194e:	a8 0e       	add	r10, r24
    1950:	b9 1e       	adc	r11, r25
    1952:	ca 1e       	adc	r12, r26
    1954:	db 1e       	adc	r13, r27
    1956:	a9 01       	movw	r20, r18
    1958:	33 27       	eor	r19, r19
    195a:	22 27       	eor	r18, r18
    195c:	61 96       	adiw	r28, 0x11	; 17
    195e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1960:	9d ad       	ldd	r25, Y+61	; 0x3d
    1962:	ae ad       	ldd	r26, Y+62	; 0x3e
    1964:	bf ad       	ldd	r27, Y+63	; 0x3f
    1966:	61 97       	sbiw	r28, 0x11	; 17
    1968:	a0 70       	andi	r26, 0x00	; 0
    196a:	b0 70       	andi	r27, 0x00	; 0
    196c:	28 0f       	add	r18, r24
    196e:	39 1f       	adc	r19, r25
    1970:	4a 1f       	adc	r20, r26
    1972:	5b 1f       	adc	r21, r27
    1974:	e9 8c       	ldd	r14, Y+25	; 0x19
    1976:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1978:	0b 8d       	ldd	r16, Y+27	; 0x1b
    197a:	1c 8d       	ldd	r17, Y+28	; 0x1c
    197c:	ea 14       	cp	r14, r10
    197e:	fb 04       	cpc	r15, r11
    1980:	0c 05       	cpc	r16, r12
    1982:	1d 05       	cpc	r17, r13
    1984:	70 f0       	brcs	.+28     	; 0x19a2 <__umoddi3+0xbce>
    1986:	ae 14       	cp	r10, r14
    1988:	bf 04       	cpc	r11, r15
    198a:	c0 06       	cpc	r12, r16
    198c:	d1 06       	cpc	r13, r17
    198e:	69 f5       	brne	.+90     	; 0x19ea <__umoddi3+0xc16>
    1990:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1992:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1994:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1996:	98 a1       	ldd	r25, Y+32	; 0x20
    1998:	62 17       	cp	r22, r18
    199a:	73 07       	cpc	r23, r19
    199c:	84 07       	cpc	r24, r20
    199e:	95 07       	cpc	r25, r21
    19a0:	20 f5       	brcc	.+72     	; 0x19ea <__umoddi3+0xc16>
    19a2:	da 01       	movw	r26, r20
    19a4:	c9 01       	movw	r24, r18
    19a6:	6d a0       	ldd	r6, Y+37	; 0x25
    19a8:	7e a0       	ldd	r7, Y+38	; 0x26
    19aa:	8f a0       	ldd	r8, Y+39	; 0x27
    19ac:	98 a4       	ldd	r9, Y+40	; 0x28
    19ae:	86 19       	sub	r24, r6
    19b0:	97 09       	sbc	r25, r7
    19b2:	a8 09       	sbc	r26, r8
    19b4:	b9 09       	sbc	r27, r9
    19b6:	e9 a4       	ldd	r14, Y+41	; 0x29
    19b8:	fa a4       	ldd	r15, Y+42	; 0x2a
    19ba:	0b a5       	ldd	r16, Y+43	; 0x2b
    19bc:	1c a5       	ldd	r17, Y+44	; 0x2c
    19be:	ae 18       	sub	r10, r14
    19c0:	bf 08       	sbc	r11, r15
    19c2:	c0 0a       	sbc	r12, r16
    19c4:	d1 0a       	sbc	r13, r17
    19c6:	ee 24       	eor	r14, r14
    19c8:	ff 24       	eor	r15, r15
    19ca:	87 01       	movw	r16, r14
    19cc:	28 17       	cp	r18, r24
    19ce:	39 07       	cpc	r19, r25
    19d0:	4a 07       	cpc	r20, r26
    19d2:	5b 07       	cpc	r21, r27
    19d4:	28 f4       	brcc	.+10     	; 0x19e0 <__umoddi3+0xc0c>
    19d6:	21 e0       	ldi	r18, 0x01	; 1
    19d8:	e2 2e       	mov	r14, r18
    19da:	f1 2c       	mov	r15, r1
    19dc:	01 2d       	mov	r16, r1
    19de:	11 2d       	mov	r17, r1
    19e0:	ae 18       	sub	r10, r14
    19e2:	bf 08       	sbc	r11, r15
    19e4:	c0 0a       	sbc	r12, r16
    19e6:	d1 0a       	sbc	r13, r17
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <__umoddi3+0xc1a>
    19ea:	da 01       	movw	r26, r20
    19ec:	c9 01       	movw	r24, r18
    19ee:	6d 8c       	ldd	r6, Y+29	; 0x1d
    19f0:	7e 8c       	ldd	r7, Y+30	; 0x1e
    19f2:	8f 8c       	ldd	r8, Y+31	; 0x1f
    19f4:	98 a0       	ldd	r9, Y+32	; 0x20
    19f6:	68 1a       	sub	r6, r24
    19f8:	79 0a       	sbc	r7, r25
    19fa:	8a 0a       	sbc	r8, r26
    19fc:	9b 0a       	sbc	r9, r27
    19fe:	49 8d       	ldd	r20, Y+25	; 0x19
    1a00:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1a02:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1a04:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1a06:	4a 19       	sub	r20, r10
    1a08:	5b 09       	sbc	r21, r11
    1a0a:	6c 09       	sbc	r22, r12
    1a0c:	7d 09       	sbc	r23, r13
    1a0e:	5a 01       	movw	r10, r20
    1a10:	6b 01       	movw	r12, r22
    1a12:	22 24       	eor	r2, r2
    1a14:	33 24       	eor	r3, r3
    1a16:	21 01       	movw	r4, r2
    1a18:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a1a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a1e:	98 a1       	ldd	r25, Y+32	; 0x20
    1a20:	66 15       	cp	r22, r6
    1a22:	77 05       	cpc	r23, r7
    1a24:	88 05       	cpc	r24, r8
    1a26:	99 05       	cpc	r25, r9
    1a28:	28 f4       	brcc	.+10     	; 0x1a34 <__umoddi3+0xc60>
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	28 2e       	mov	r2, r24
    1a2e:	31 2c       	mov	r3, r1
    1a30:	41 2c       	mov	r4, r1
    1a32:	51 2c       	mov	r5, r1
    1a34:	86 01       	movw	r16, r12
    1a36:	75 01       	movw	r14, r10
    1a38:	e2 18       	sub	r14, r2
    1a3a:	f3 08       	sbc	r15, r3
    1a3c:	04 09       	sbc	r16, r4
    1a3e:	15 09       	sbc	r17, r5
    1a40:	a8 01       	movw	r20, r16
    1a42:	97 01       	movw	r18, r14
    1a44:	66 96       	adiw	r28, 0x16	; 22
    1a46:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a48:	66 97       	sbiw	r28, 0x16	; 22
    1a4a:	04 c0       	rjmp	.+8      	; 0x1a54 <__umoddi3+0xc80>
    1a4c:	22 0f       	add	r18, r18
    1a4e:	33 1f       	adc	r19, r19
    1a50:	44 1f       	adc	r20, r20
    1a52:	55 1f       	adc	r21, r21
    1a54:	0a 94       	dec	r0
    1a56:	d2 f7       	brpl	.-12     	; 0x1a4c <__umoddi3+0xc78>
    1a58:	d4 01       	movw	r26, r8
    1a5a:	c3 01       	movw	r24, r6
    1a5c:	67 96       	adiw	r28, 0x17	; 23
    1a5e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a60:	67 97       	sbiw	r28, 0x17	; 23
    1a62:	04 c0       	rjmp	.+8      	; 0x1a6c <__umoddi3+0xc98>
    1a64:	b6 95       	lsr	r27
    1a66:	a7 95       	ror	r26
    1a68:	97 95       	ror	r25
    1a6a:	87 95       	ror	r24
    1a6c:	0a 94       	dec	r0
    1a6e:	d2 f7       	brpl	.-12     	; 0x1a64 <__umoddi3+0xc90>
    1a70:	28 2b       	or	r18, r24
    1a72:	39 2b       	or	r19, r25
    1a74:	4a 2b       	or	r20, r26
    1a76:	5b 2b       	or	r21, r27
    1a78:	29 8b       	std	Y+17, r18	; 0x11
    1a7a:	3a 8b       	std	Y+18, r19	; 0x12
    1a7c:	4b 8b       	std	Y+19, r20	; 0x13
    1a7e:	5c 8b       	std	Y+20, r21	; 0x14
    1a80:	67 96       	adiw	r28, 0x17	; 23
    1a82:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a84:	67 97       	sbiw	r28, 0x17	; 23
    1a86:	04 c0       	rjmp	.+8      	; 0x1a90 <__umoddi3+0xcbc>
    1a88:	16 95       	lsr	r17
    1a8a:	07 95       	ror	r16
    1a8c:	f7 94       	ror	r15
    1a8e:	e7 94       	ror	r14
    1a90:	0a 94       	dec	r0
    1a92:	d2 f7       	brpl	.-12     	; 0x1a88 <__umoddi3+0xcb4>
    1a94:	ed 8a       	std	Y+21, r14	; 0x15
    1a96:	fe 8a       	std	Y+22, r15	; 0x16
    1a98:	0f 8b       	std	Y+23, r16	; 0x17
    1a9a:	18 8f       	std	Y+24, r17	; 0x18
    1a9c:	3a 89       	ldd	r19, Y+18	; 0x12
    1a9e:	4b 89       	ldd	r20, Y+19	; 0x13
    1aa0:	5c 89       	ldd	r21, Y+20	; 0x14
    1aa2:	6e 2d       	mov	r22, r14
    1aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aaa:	c5 5a       	subi	r28, 0xA5	; 165
    1aac:	df 4f       	sbci	r29, 0xFF	; 255
    1aae:	e2 e1       	ldi	r30, 0x12	; 18
    1ab0:	0c 94 3e 31 	jmp	0x627c	; 0x627c <__epilogue_restores__>

00001ab4 <_fpadd_parts>:
    1ab4:	a0 e0       	ldi	r26, 0x00	; 0
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e0 e6       	ldi	r30, 0x60	; 96
    1aba:	fd e0       	ldi	r31, 0x0D	; 13
    1abc:	0c 94 22 31 	jmp	0x6244	; 0x6244 <__prologue_saves__>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	2b 01       	movw	r4, r22
    1ac4:	fa 01       	movw	r30, r20
    1ac6:	9c 91       	ld	r25, X
    1ac8:	92 30       	cpi	r25, 0x02	; 2
    1aca:	08 f4       	brcc	.+2      	; 0x1ace <_fpadd_parts+0x1a>
    1acc:	39 c1       	rjmp	.+626    	; 0x1d40 <_fpadd_parts+0x28c>
    1ace:	eb 01       	movw	r28, r22
    1ad0:	88 81       	ld	r24, Y
    1ad2:	82 30       	cpi	r24, 0x02	; 2
    1ad4:	08 f4       	brcc	.+2      	; 0x1ad8 <_fpadd_parts+0x24>
    1ad6:	33 c1       	rjmp	.+614    	; 0x1d3e <_fpadd_parts+0x28a>
    1ad8:	94 30       	cpi	r25, 0x04	; 4
    1ada:	69 f4       	brne	.+26     	; 0x1af6 <_fpadd_parts+0x42>
    1adc:	84 30       	cpi	r24, 0x04	; 4
    1ade:	09 f0       	breq	.+2      	; 0x1ae2 <_fpadd_parts+0x2e>
    1ae0:	2f c1       	rjmp	.+606    	; 0x1d40 <_fpadd_parts+0x28c>
    1ae2:	11 96       	adiw	r26, 0x01	; 1
    1ae4:	9c 91       	ld	r25, X
    1ae6:	11 97       	sbiw	r26, 0x01	; 1
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	98 17       	cp	r25, r24
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <_fpadd_parts+0x3c>
    1aee:	28 c1       	rjmp	.+592    	; 0x1d40 <_fpadd_parts+0x28c>
    1af0:	a1 ef       	ldi	r26, 0xF1	; 241
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	25 c1       	rjmp	.+586    	; 0x1d40 <_fpadd_parts+0x28c>
    1af6:	84 30       	cpi	r24, 0x04	; 4
    1af8:	09 f4       	brne	.+2      	; 0x1afc <_fpadd_parts+0x48>
    1afa:	21 c1       	rjmp	.+578    	; 0x1d3e <_fpadd_parts+0x28a>
    1afc:	82 30       	cpi	r24, 0x02	; 2
    1afe:	a9 f4       	brne	.+42     	; 0x1b2a <_fpadd_parts+0x76>
    1b00:	92 30       	cpi	r25, 0x02	; 2
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <_fpadd_parts+0x52>
    1b04:	1d c1       	rjmp	.+570    	; 0x1d40 <_fpadd_parts+0x28c>
    1b06:	9a 01       	movw	r18, r20
    1b08:	ad 01       	movw	r20, r26
    1b0a:	88 e0       	ldi	r24, 0x08	; 8
    1b0c:	ea 01       	movw	r28, r20
    1b0e:	09 90       	ld	r0, Y+
    1b10:	ae 01       	movw	r20, r28
    1b12:	e9 01       	movw	r28, r18
    1b14:	09 92       	st	Y+, r0
    1b16:	9e 01       	movw	r18, r28
    1b18:	81 50       	subi	r24, 0x01	; 1
    1b1a:	c1 f7       	brne	.-16     	; 0x1b0c <_fpadd_parts+0x58>
    1b1c:	e2 01       	movw	r28, r4
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	11 96       	adiw	r26, 0x01	; 1
    1b22:	9c 91       	ld	r25, X
    1b24:	89 23       	and	r24, r25
    1b26:	81 83       	std	Z+1, r24	; 0x01
    1b28:	08 c1       	rjmp	.+528    	; 0x1d3a <_fpadd_parts+0x286>
    1b2a:	92 30       	cpi	r25, 0x02	; 2
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <_fpadd_parts+0x7c>
    1b2e:	07 c1       	rjmp	.+526    	; 0x1d3e <_fpadd_parts+0x28a>
    1b30:	12 96       	adiw	r26, 0x02	; 2
    1b32:	2d 90       	ld	r2, X+
    1b34:	3c 90       	ld	r3, X
    1b36:	13 97       	sbiw	r26, 0x03	; 3
    1b38:	eb 01       	movw	r28, r22
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3e:	14 96       	adiw	r26, 0x04	; 4
    1b40:	ad 90       	ld	r10, X+
    1b42:	bd 90       	ld	r11, X+
    1b44:	cd 90       	ld	r12, X+
    1b46:	dc 90       	ld	r13, X
    1b48:	17 97       	sbiw	r26, 0x07	; 7
    1b4a:	ec 80       	ldd	r14, Y+4	; 0x04
    1b4c:	fd 80       	ldd	r15, Y+5	; 0x05
    1b4e:	0e 81       	ldd	r16, Y+6	; 0x06
    1b50:	1f 81       	ldd	r17, Y+7	; 0x07
    1b52:	91 01       	movw	r18, r2
    1b54:	28 1b       	sub	r18, r24
    1b56:	39 0b       	sbc	r19, r25
    1b58:	b9 01       	movw	r22, r18
    1b5a:	37 ff       	sbrs	r19, 7
    1b5c:	04 c0       	rjmp	.+8      	; 0x1b66 <_fpadd_parts+0xb2>
    1b5e:	66 27       	eor	r22, r22
    1b60:	77 27       	eor	r23, r23
    1b62:	62 1b       	sub	r22, r18
    1b64:	73 0b       	sbc	r23, r19
    1b66:	60 32       	cpi	r22, 0x20	; 32
    1b68:	71 05       	cpc	r23, r1
    1b6a:	0c f0       	brlt	.+2      	; 0x1b6e <_fpadd_parts+0xba>
    1b6c:	61 c0       	rjmp	.+194    	; 0x1c30 <_fpadd_parts+0x17c>
    1b6e:	12 16       	cp	r1, r18
    1b70:	13 06       	cpc	r1, r19
    1b72:	6c f5       	brge	.+90     	; 0x1bce <_fpadd_parts+0x11a>
    1b74:	37 01       	movw	r6, r14
    1b76:	48 01       	movw	r8, r16
    1b78:	06 2e       	mov	r0, r22
    1b7a:	04 c0       	rjmp	.+8      	; 0x1b84 <_fpadd_parts+0xd0>
    1b7c:	96 94       	lsr	r9
    1b7e:	87 94       	ror	r8
    1b80:	77 94       	ror	r7
    1b82:	67 94       	ror	r6
    1b84:	0a 94       	dec	r0
    1b86:	d2 f7       	brpl	.-12     	; 0x1b7c <_fpadd_parts+0xc8>
    1b88:	21 e0       	ldi	r18, 0x01	; 1
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	50 e0       	ldi	r21, 0x00	; 0
    1b90:	04 c0       	rjmp	.+8      	; 0x1b9a <_fpadd_parts+0xe6>
    1b92:	22 0f       	add	r18, r18
    1b94:	33 1f       	adc	r19, r19
    1b96:	44 1f       	adc	r20, r20
    1b98:	55 1f       	adc	r21, r21
    1b9a:	6a 95       	dec	r22
    1b9c:	d2 f7       	brpl	.-12     	; 0x1b92 <_fpadd_parts+0xde>
    1b9e:	21 50       	subi	r18, 0x01	; 1
    1ba0:	30 40       	sbci	r19, 0x00	; 0
    1ba2:	40 40       	sbci	r20, 0x00	; 0
    1ba4:	50 40       	sbci	r21, 0x00	; 0
    1ba6:	2e 21       	and	r18, r14
    1ba8:	3f 21       	and	r19, r15
    1baa:	40 23       	and	r20, r16
    1bac:	51 23       	and	r21, r17
    1bae:	21 15       	cp	r18, r1
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	41 05       	cpc	r20, r1
    1bb4:	51 05       	cpc	r21, r1
    1bb6:	21 f0       	breq	.+8      	; 0x1bc0 <_fpadd_parts+0x10c>
    1bb8:	21 e0       	ldi	r18, 0x01	; 1
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e0       	ldi	r20, 0x00	; 0
    1bbe:	50 e0       	ldi	r21, 0x00	; 0
    1bc0:	79 01       	movw	r14, r18
    1bc2:	8a 01       	movw	r16, r20
    1bc4:	e6 28       	or	r14, r6
    1bc6:	f7 28       	or	r15, r7
    1bc8:	08 29       	or	r16, r8
    1bca:	19 29       	or	r17, r9
    1bcc:	3c c0       	rjmp	.+120    	; 0x1c46 <_fpadd_parts+0x192>
    1bce:	23 2b       	or	r18, r19
    1bd0:	d1 f1       	breq	.+116    	; 0x1c46 <_fpadd_parts+0x192>
    1bd2:	26 0e       	add	r2, r22
    1bd4:	37 1e       	adc	r3, r23
    1bd6:	35 01       	movw	r6, r10
    1bd8:	46 01       	movw	r8, r12
    1bda:	06 2e       	mov	r0, r22
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <_fpadd_parts+0x132>
    1bde:	96 94       	lsr	r9
    1be0:	87 94       	ror	r8
    1be2:	77 94       	ror	r7
    1be4:	67 94       	ror	r6
    1be6:	0a 94       	dec	r0
    1be8:	d2 f7       	brpl	.-12     	; 0x1bde <_fpadd_parts+0x12a>
    1bea:	21 e0       	ldi	r18, 0x01	; 1
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e0       	ldi	r20, 0x00	; 0
    1bf0:	50 e0       	ldi	r21, 0x00	; 0
    1bf2:	04 c0       	rjmp	.+8      	; 0x1bfc <_fpadd_parts+0x148>
    1bf4:	22 0f       	add	r18, r18
    1bf6:	33 1f       	adc	r19, r19
    1bf8:	44 1f       	adc	r20, r20
    1bfa:	55 1f       	adc	r21, r21
    1bfc:	6a 95       	dec	r22
    1bfe:	d2 f7       	brpl	.-12     	; 0x1bf4 <_fpadd_parts+0x140>
    1c00:	21 50       	subi	r18, 0x01	; 1
    1c02:	30 40       	sbci	r19, 0x00	; 0
    1c04:	40 40       	sbci	r20, 0x00	; 0
    1c06:	50 40       	sbci	r21, 0x00	; 0
    1c08:	2a 21       	and	r18, r10
    1c0a:	3b 21       	and	r19, r11
    1c0c:	4c 21       	and	r20, r12
    1c0e:	5d 21       	and	r21, r13
    1c10:	21 15       	cp	r18, r1
    1c12:	31 05       	cpc	r19, r1
    1c14:	41 05       	cpc	r20, r1
    1c16:	51 05       	cpc	r21, r1
    1c18:	21 f0       	breq	.+8      	; 0x1c22 <_fpadd_parts+0x16e>
    1c1a:	21 e0       	ldi	r18, 0x01	; 1
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e0       	ldi	r20, 0x00	; 0
    1c20:	50 e0       	ldi	r21, 0x00	; 0
    1c22:	59 01       	movw	r10, r18
    1c24:	6a 01       	movw	r12, r20
    1c26:	a6 28       	or	r10, r6
    1c28:	b7 28       	or	r11, r7
    1c2a:	c8 28       	or	r12, r8
    1c2c:	d9 28       	or	r13, r9
    1c2e:	0b c0       	rjmp	.+22     	; 0x1c46 <_fpadd_parts+0x192>
    1c30:	82 15       	cp	r24, r2
    1c32:	93 05       	cpc	r25, r3
    1c34:	2c f0       	brlt	.+10     	; 0x1c40 <_fpadd_parts+0x18c>
    1c36:	1c 01       	movw	r2, r24
    1c38:	aa 24       	eor	r10, r10
    1c3a:	bb 24       	eor	r11, r11
    1c3c:	65 01       	movw	r12, r10
    1c3e:	03 c0       	rjmp	.+6      	; 0x1c46 <_fpadd_parts+0x192>
    1c40:	ee 24       	eor	r14, r14
    1c42:	ff 24       	eor	r15, r15
    1c44:	87 01       	movw	r16, r14
    1c46:	11 96       	adiw	r26, 0x01	; 1
    1c48:	9c 91       	ld	r25, X
    1c4a:	d2 01       	movw	r26, r4
    1c4c:	11 96       	adiw	r26, 0x01	; 1
    1c4e:	8c 91       	ld	r24, X
    1c50:	98 17       	cp	r25, r24
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <_fpadd_parts+0x1a2>
    1c54:	45 c0       	rjmp	.+138    	; 0x1ce0 <_fpadd_parts+0x22c>
    1c56:	99 23       	and	r25, r25
    1c58:	39 f0       	breq	.+14     	; 0x1c68 <_fpadd_parts+0x1b4>
    1c5a:	a8 01       	movw	r20, r16
    1c5c:	97 01       	movw	r18, r14
    1c5e:	2a 19       	sub	r18, r10
    1c60:	3b 09       	sbc	r19, r11
    1c62:	4c 09       	sbc	r20, r12
    1c64:	5d 09       	sbc	r21, r13
    1c66:	06 c0       	rjmp	.+12     	; 0x1c74 <_fpadd_parts+0x1c0>
    1c68:	a6 01       	movw	r20, r12
    1c6a:	95 01       	movw	r18, r10
    1c6c:	2e 19       	sub	r18, r14
    1c6e:	3f 09       	sbc	r19, r15
    1c70:	40 0b       	sbc	r20, r16
    1c72:	51 0b       	sbc	r21, r17
    1c74:	57 fd       	sbrc	r21, 7
    1c76:	08 c0       	rjmp	.+16     	; 0x1c88 <_fpadd_parts+0x1d4>
    1c78:	11 82       	std	Z+1, r1	; 0x01
    1c7a:	33 82       	std	Z+3, r3	; 0x03
    1c7c:	22 82       	std	Z+2, r2	; 0x02
    1c7e:	24 83       	std	Z+4, r18	; 0x04
    1c80:	35 83       	std	Z+5, r19	; 0x05
    1c82:	46 83       	std	Z+6, r20	; 0x06
    1c84:	57 83       	std	Z+7, r21	; 0x07
    1c86:	1d c0       	rjmp	.+58     	; 0x1cc2 <_fpadd_parts+0x20e>
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	81 83       	std	Z+1, r24	; 0x01
    1c8c:	33 82       	std	Z+3, r3	; 0x03
    1c8e:	22 82       	std	Z+2, r2	; 0x02
    1c90:	88 27       	eor	r24, r24
    1c92:	99 27       	eor	r25, r25
    1c94:	dc 01       	movw	r26, r24
    1c96:	82 1b       	sub	r24, r18
    1c98:	93 0b       	sbc	r25, r19
    1c9a:	a4 0b       	sbc	r26, r20
    1c9c:	b5 0b       	sbc	r27, r21
    1c9e:	84 83       	std	Z+4, r24	; 0x04
    1ca0:	95 83       	std	Z+5, r25	; 0x05
    1ca2:	a6 83       	std	Z+6, r26	; 0x06
    1ca4:	b7 83       	std	Z+7, r27	; 0x07
    1ca6:	0d c0       	rjmp	.+26     	; 0x1cc2 <_fpadd_parts+0x20e>
    1ca8:	22 0f       	add	r18, r18
    1caa:	33 1f       	adc	r19, r19
    1cac:	44 1f       	adc	r20, r20
    1cae:	55 1f       	adc	r21, r21
    1cb0:	24 83       	std	Z+4, r18	; 0x04
    1cb2:	35 83       	std	Z+5, r19	; 0x05
    1cb4:	46 83       	std	Z+6, r20	; 0x06
    1cb6:	57 83       	std	Z+7, r21	; 0x07
    1cb8:	82 81       	ldd	r24, Z+2	; 0x02
    1cba:	93 81       	ldd	r25, Z+3	; 0x03
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	93 83       	std	Z+3, r25	; 0x03
    1cc0:	82 83       	std	Z+2, r24	; 0x02
    1cc2:	24 81       	ldd	r18, Z+4	; 0x04
    1cc4:	35 81       	ldd	r19, Z+5	; 0x05
    1cc6:	46 81       	ldd	r20, Z+6	; 0x06
    1cc8:	57 81       	ldd	r21, Z+7	; 0x07
    1cca:	da 01       	movw	r26, r20
    1ccc:	c9 01       	movw	r24, r18
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	a1 09       	sbc	r26, r1
    1cd2:	b1 09       	sbc	r27, r1
    1cd4:	8f 5f       	subi	r24, 0xFF	; 255
    1cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd8:	af 4f       	sbci	r26, 0xFF	; 255
    1cda:	bf 43       	sbci	r27, 0x3F	; 63
    1cdc:	28 f3       	brcs	.-54     	; 0x1ca8 <_fpadd_parts+0x1f4>
    1cde:	0b c0       	rjmp	.+22     	; 0x1cf6 <_fpadd_parts+0x242>
    1ce0:	91 83       	std	Z+1, r25	; 0x01
    1ce2:	33 82       	std	Z+3, r3	; 0x03
    1ce4:	22 82       	std	Z+2, r2	; 0x02
    1ce6:	ea 0c       	add	r14, r10
    1ce8:	fb 1c       	adc	r15, r11
    1cea:	0c 1d       	adc	r16, r12
    1cec:	1d 1d       	adc	r17, r13
    1cee:	e4 82       	std	Z+4, r14	; 0x04
    1cf0:	f5 82       	std	Z+5, r15	; 0x05
    1cf2:	06 83       	std	Z+6, r16	; 0x06
    1cf4:	17 83       	std	Z+7, r17	; 0x07
    1cf6:	83 e0       	ldi	r24, 0x03	; 3
    1cf8:	80 83       	st	Z, r24
    1cfa:	24 81       	ldd	r18, Z+4	; 0x04
    1cfc:	35 81       	ldd	r19, Z+5	; 0x05
    1cfe:	46 81       	ldd	r20, Z+6	; 0x06
    1d00:	57 81       	ldd	r21, Z+7	; 0x07
    1d02:	57 ff       	sbrs	r21, 7
    1d04:	1a c0       	rjmp	.+52     	; 0x1d3a <_fpadd_parts+0x286>
    1d06:	c9 01       	movw	r24, r18
    1d08:	aa 27       	eor	r26, r26
    1d0a:	97 fd       	sbrc	r25, 7
    1d0c:	a0 95       	com	r26
    1d0e:	ba 2f       	mov	r27, r26
    1d10:	81 70       	andi	r24, 0x01	; 1
    1d12:	90 70       	andi	r25, 0x00	; 0
    1d14:	a0 70       	andi	r26, 0x00	; 0
    1d16:	b0 70       	andi	r27, 0x00	; 0
    1d18:	56 95       	lsr	r21
    1d1a:	47 95       	ror	r20
    1d1c:	37 95       	ror	r19
    1d1e:	27 95       	ror	r18
    1d20:	82 2b       	or	r24, r18
    1d22:	93 2b       	or	r25, r19
    1d24:	a4 2b       	or	r26, r20
    1d26:	b5 2b       	or	r27, r21
    1d28:	84 83       	std	Z+4, r24	; 0x04
    1d2a:	95 83       	std	Z+5, r25	; 0x05
    1d2c:	a6 83       	std	Z+6, r26	; 0x06
    1d2e:	b7 83       	std	Z+7, r27	; 0x07
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	01 96       	adiw	r24, 0x01	; 1
    1d36:	93 83       	std	Z+3, r25	; 0x03
    1d38:	82 83       	std	Z+2, r24	; 0x02
    1d3a:	df 01       	movw	r26, r30
    1d3c:	01 c0       	rjmp	.+2      	; 0x1d40 <_fpadd_parts+0x28c>
    1d3e:	d2 01       	movw	r26, r4
    1d40:	cd 01       	movw	r24, r26
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	e2 e1       	ldi	r30, 0x12	; 18
    1d48:	0c 94 3e 31 	jmp	0x627c	; 0x627c <__epilogue_restores__>

00001d4c <__subsf3>:
    1d4c:	a0 e2       	ldi	r26, 0x20	; 32
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	ec ea       	ldi	r30, 0xAC	; 172
    1d52:	fe e0       	ldi	r31, 0x0E	; 14
    1d54:	0c 94 2e 31 	jmp	0x625c	; 0x625c <__prologue_saves__+0x18>
    1d58:	69 83       	std	Y+1, r22	; 0x01
    1d5a:	7a 83       	std	Y+2, r23	; 0x02
    1d5c:	8b 83       	std	Y+3, r24	; 0x03
    1d5e:	9c 83       	std	Y+4, r25	; 0x04
    1d60:	2d 83       	std	Y+5, r18	; 0x05
    1d62:	3e 83       	std	Y+6, r19	; 0x06
    1d64:	4f 83       	std	Y+7, r20	; 0x07
    1d66:	58 87       	std	Y+8, r21	; 0x08
    1d68:	e9 e0       	ldi	r30, 0x09	; 9
    1d6a:	ee 2e       	mov	r14, r30
    1d6c:	f1 2c       	mov	r15, r1
    1d6e:	ec 0e       	add	r14, r28
    1d70:	fd 1e       	adc	r15, r29
    1d72:	ce 01       	movw	r24, r28
    1d74:	01 96       	adiw	r24, 0x01	; 1
    1d76:	b7 01       	movw	r22, r14
    1d78:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    1d7c:	8e 01       	movw	r16, r28
    1d7e:	0f 5e       	subi	r16, 0xEF	; 239
    1d80:	1f 4f       	sbci	r17, 0xFF	; 255
    1d82:	ce 01       	movw	r24, r28
    1d84:	05 96       	adiw	r24, 0x05	; 5
    1d86:	b8 01       	movw	r22, r16
    1d88:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    1d8c:	8a 89       	ldd	r24, Y+18	; 0x12
    1d8e:	91 e0       	ldi	r25, 0x01	; 1
    1d90:	89 27       	eor	r24, r25
    1d92:	8a 8b       	std	Y+18, r24	; 0x12
    1d94:	c7 01       	movw	r24, r14
    1d96:	b8 01       	movw	r22, r16
    1d98:	ae 01       	movw	r20, r28
    1d9a:	47 5e       	subi	r20, 0xE7	; 231
    1d9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d9e:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_fpadd_parts>
    1da2:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__pack_f>
    1da6:	a0 96       	adiw	r28, 0x20	; 32
    1da8:	e6 e0       	ldi	r30, 0x06	; 6
    1daa:	0c 94 4a 31 	jmp	0x6294	; 0x6294 <__epilogue_restores__+0x18>

00001dae <__addsf3>:
    1dae:	a0 e2       	ldi	r26, 0x20	; 32
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	ed ed       	ldi	r30, 0xDD	; 221
    1db4:	fe e0       	ldi	r31, 0x0E	; 14
    1db6:	0c 94 2e 31 	jmp	0x625c	; 0x625c <__prologue_saves__+0x18>
    1dba:	69 83       	std	Y+1, r22	; 0x01
    1dbc:	7a 83       	std	Y+2, r23	; 0x02
    1dbe:	8b 83       	std	Y+3, r24	; 0x03
    1dc0:	9c 83       	std	Y+4, r25	; 0x04
    1dc2:	2d 83       	std	Y+5, r18	; 0x05
    1dc4:	3e 83       	std	Y+6, r19	; 0x06
    1dc6:	4f 83       	std	Y+7, r20	; 0x07
    1dc8:	58 87       	std	Y+8, r21	; 0x08
    1dca:	f9 e0       	ldi	r31, 0x09	; 9
    1dcc:	ef 2e       	mov	r14, r31
    1dce:	f1 2c       	mov	r15, r1
    1dd0:	ec 0e       	add	r14, r28
    1dd2:	fd 1e       	adc	r15, r29
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	01 96       	adiw	r24, 0x01	; 1
    1dd8:	b7 01       	movw	r22, r14
    1dda:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    1dde:	8e 01       	movw	r16, r28
    1de0:	0f 5e       	subi	r16, 0xEF	; 239
    1de2:	1f 4f       	sbci	r17, 0xFF	; 255
    1de4:	ce 01       	movw	r24, r28
    1de6:	05 96       	adiw	r24, 0x05	; 5
    1de8:	b8 01       	movw	r22, r16
    1dea:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    1dee:	c7 01       	movw	r24, r14
    1df0:	b8 01       	movw	r22, r16
    1df2:	ae 01       	movw	r20, r28
    1df4:	47 5e       	subi	r20, 0xE7	; 231
    1df6:	5f 4f       	sbci	r21, 0xFF	; 255
    1df8:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_fpadd_parts>
    1dfc:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__pack_f>
    1e00:	a0 96       	adiw	r28, 0x20	; 32
    1e02:	e6 e0       	ldi	r30, 0x06	; 6
    1e04:	0c 94 4a 31 	jmp	0x6294	; 0x6294 <__epilogue_restores__+0x18>

00001e08 <__mulsf3>:
    1e08:	a0 e2       	ldi	r26, 0x20	; 32
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	ea e0       	ldi	r30, 0x0A	; 10
    1e0e:	ff e0       	ldi	r31, 0x0F	; 15
    1e10:	0c 94 22 31 	jmp	0x6244	; 0x6244 <__prologue_saves__>
    1e14:	69 83       	std	Y+1, r22	; 0x01
    1e16:	7a 83       	std	Y+2, r23	; 0x02
    1e18:	8b 83       	std	Y+3, r24	; 0x03
    1e1a:	9c 83       	std	Y+4, r25	; 0x04
    1e1c:	2d 83       	std	Y+5, r18	; 0x05
    1e1e:	3e 83       	std	Y+6, r19	; 0x06
    1e20:	4f 83       	std	Y+7, r20	; 0x07
    1e22:	58 87       	std	Y+8, r21	; 0x08
    1e24:	ce 01       	movw	r24, r28
    1e26:	01 96       	adiw	r24, 0x01	; 1
    1e28:	be 01       	movw	r22, r28
    1e2a:	67 5f       	subi	r22, 0xF7	; 247
    1e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2e:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    1e32:	ce 01       	movw	r24, r28
    1e34:	05 96       	adiw	r24, 0x05	; 5
    1e36:	be 01       	movw	r22, r28
    1e38:	6f 5e       	subi	r22, 0xEF	; 239
    1e3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3c:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    1e40:	99 85       	ldd	r25, Y+9	; 0x09
    1e42:	92 30       	cpi	r25, 0x02	; 2
    1e44:	88 f0       	brcs	.+34     	; 0x1e68 <__mulsf3+0x60>
    1e46:	89 89       	ldd	r24, Y+17	; 0x11
    1e48:	82 30       	cpi	r24, 0x02	; 2
    1e4a:	c8 f0       	brcs	.+50     	; 0x1e7e <__mulsf3+0x76>
    1e4c:	94 30       	cpi	r25, 0x04	; 4
    1e4e:	19 f4       	brne	.+6      	; 0x1e56 <__mulsf3+0x4e>
    1e50:	82 30       	cpi	r24, 0x02	; 2
    1e52:	51 f4       	brne	.+20     	; 0x1e68 <__mulsf3+0x60>
    1e54:	04 c0       	rjmp	.+8      	; 0x1e5e <__mulsf3+0x56>
    1e56:	84 30       	cpi	r24, 0x04	; 4
    1e58:	29 f4       	brne	.+10     	; 0x1e64 <__mulsf3+0x5c>
    1e5a:	92 30       	cpi	r25, 0x02	; 2
    1e5c:	81 f4       	brne	.+32     	; 0x1e7e <__mulsf3+0x76>
    1e5e:	81 ef       	ldi	r24, 0xF1	; 241
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	c6 c0       	rjmp	.+396    	; 0x1ff0 <__mulsf3+0x1e8>
    1e64:	92 30       	cpi	r25, 0x02	; 2
    1e66:	49 f4       	brne	.+18     	; 0x1e7a <__mulsf3+0x72>
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6c:	8a 89       	ldd	r24, Y+18	; 0x12
    1e6e:	98 13       	cpse	r25, r24
    1e70:	21 e0       	ldi	r18, 0x01	; 1
    1e72:	2a 87       	std	Y+10, r18	; 0x0a
    1e74:	ce 01       	movw	r24, r28
    1e76:	09 96       	adiw	r24, 0x09	; 9
    1e78:	bb c0       	rjmp	.+374    	; 0x1ff0 <__mulsf3+0x1e8>
    1e7a:	82 30       	cpi	r24, 0x02	; 2
    1e7c:	49 f4       	brne	.+18     	; 0x1e90 <__mulsf3+0x88>
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e82:	8a 89       	ldd	r24, Y+18	; 0x12
    1e84:	98 13       	cpse	r25, r24
    1e86:	21 e0       	ldi	r18, 0x01	; 1
    1e88:	2a 8b       	std	Y+18, r18	; 0x12
    1e8a:	ce 01       	movw	r24, r28
    1e8c:	41 96       	adiw	r24, 0x11	; 17
    1e8e:	b0 c0       	rjmp	.+352    	; 0x1ff0 <__mulsf3+0x1e8>
    1e90:	2d 84       	ldd	r2, Y+13	; 0x0d
    1e92:	3e 84       	ldd	r3, Y+14	; 0x0e
    1e94:	4f 84       	ldd	r4, Y+15	; 0x0f
    1e96:	58 88       	ldd	r5, Y+16	; 0x10
    1e98:	6d 88       	ldd	r6, Y+21	; 0x15
    1e9a:	7e 88       	ldd	r7, Y+22	; 0x16
    1e9c:	8f 88       	ldd	r8, Y+23	; 0x17
    1e9e:	98 8c       	ldd	r9, Y+24	; 0x18
    1ea0:	ee 24       	eor	r14, r14
    1ea2:	ff 24       	eor	r15, r15
    1ea4:	87 01       	movw	r16, r14
    1ea6:	aa 24       	eor	r10, r10
    1ea8:	bb 24       	eor	r11, r11
    1eaa:	65 01       	movw	r12, r10
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	50 e0       	ldi	r21, 0x00	; 0
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	70 e0       	ldi	r23, 0x00	; 0
    1eb4:	e0 e0       	ldi	r30, 0x00	; 0
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	c1 01       	movw	r24, r2
    1eba:	81 70       	andi	r24, 0x01	; 1
    1ebc:	90 70       	andi	r25, 0x00	; 0
    1ebe:	89 2b       	or	r24, r25
    1ec0:	e9 f0       	breq	.+58     	; 0x1efc <__mulsf3+0xf4>
    1ec2:	e6 0c       	add	r14, r6
    1ec4:	f7 1c       	adc	r15, r7
    1ec6:	08 1d       	adc	r16, r8
    1ec8:	19 1d       	adc	r17, r9
    1eca:	9a 01       	movw	r18, r20
    1ecc:	ab 01       	movw	r20, r22
    1ece:	2a 0d       	add	r18, r10
    1ed0:	3b 1d       	adc	r19, r11
    1ed2:	4c 1d       	adc	r20, r12
    1ed4:	5d 1d       	adc	r21, r13
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	a0 e0       	ldi	r26, 0x00	; 0
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e6 14       	cp	r14, r6
    1ee0:	f7 04       	cpc	r15, r7
    1ee2:	08 05       	cpc	r16, r8
    1ee4:	19 05       	cpc	r17, r9
    1ee6:	20 f4       	brcc	.+8      	; 0x1ef0 <__mulsf3+0xe8>
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	a0 e0       	ldi	r26, 0x00	; 0
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	ba 01       	movw	r22, r20
    1ef2:	a9 01       	movw	r20, r18
    1ef4:	48 0f       	add	r20, r24
    1ef6:	59 1f       	adc	r21, r25
    1ef8:	6a 1f       	adc	r22, r26
    1efa:	7b 1f       	adc	r23, r27
    1efc:	aa 0c       	add	r10, r10
    1efe:	bb 1c       	adc	r11, r11
    1f00:	cc 1c       	adc	r12, r12
    1f02:	dd 1c       	adc	r13, r13
    1f04:	97 fe       	sbrs	r9, 7
    1f06:	08 c0       	rjmp	.+16     	; 0x1f18 <__mulsf3+0x110>
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	a0 e0       	ldi	r26, 0x00	; 0
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	a8 2a       	or	r10, r24
    1f12:	b9 2a       	or	r11, r25
    1f14:	ca 2a       	or	r12, r26
    1f16:	db 2a       	or	r13, r27
    1f18:	31 96       	adiw	r30, 0x01	; 1
    1f1a:	e0 32       	cpi	r30, 0x20	; 32
    1f1c:	f1 05       	cpc	r31, r1
    1f1e:	49 f0       	breq	.+18     	; 0x1f32 <__mulsf3+0x12a>
    1f20:	66 0c       	add	r6, r6
    1f22:	77 1c       	adc	r7, r7
    1f24:	88 1c       	adc	r8, r8
    1f26:	99 1c       	adc	r9, r9
    1f28:	56 94       	lsr	r5
    1f2a:	47 94       	ror	r4
    1f2c:	37 94       	ror	r3
    1f2e:	27 94       	ror	r2
    1f30:	c3 cf       	rjmp	.-122    	; 0x1eb8 <__mulsf3+0xb0>
    1f32:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f34:	ea 89       	ldd	r30, Y+18	; 0x12
    1f36:	2b 89       	ldd	r18, Y+19	; 0x13
    1f38:	3c 89       	ldd	r19, Y+20	; 0x14
    1f3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f3e:	28 0f       	add	r18, r24
    1f40:	39 1f       	adc	r19, r25
    1f42:	2e 5f       	subi	r18, 0xFE	; 254
    1f44:	3f 4f       	sbci	r19, 0xFF	; 255
    1f46:	17 c0       	rjmp	.+46     	; 0x1f76 <__mulsf3+0x16e>
    1f48:	ca 01       	movw	r24, r20
    1f4a:	81 70       	andi	r24, 0x01	; 1
    1f4c:	90 70       	andi	r25, 0x00	; 0
    1f4e:	89 2b       	or	r24, r25
    1f50:	61 f0       	breq	.+24     	; 0x1f6a <__mulsf3+0x162>
    1f52:	16 95       	lsr	r17
    1f54:	07 95       	ror	r16
    1f56:	f7 94       	ror	r15
    1f58:	e7 94       	ror	r14
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	a0 e0       	ldi	r26, 0x00	; 0
    1f60:	b0 e8       	ldi	r27, 0x80	; 128
    1f62:	e8 2a       	or	r14, r24
    1f64:	f9 2a       	or	r15, r25
    1f66:	0a 2b       	or	r16, r26
    1f68:	1b 2b       	or	r17, r27
    1f6a:	76 95       	lsr	r23
    1f6c:	67 95       	ror	r22
    1f6e:	57 95       	ror	r21
    1f70:	47 95       	ror	r20
    1f72:	2f 5f       	subi	r18, 0xFF	; 255
    1f74:	3f 4f       	sbci	r19, 0xFF	; 255
    1f76:	77 fd       	sbrc	r23, 7
    1f78:	e7 cf       	rjmp	.-50     	; 0x1f48 <__mulsf3+0x140>
    1f7a:	0c c0       	rjmp	.+24     	; 0x1f94 <__mulsf3+0x18c>
    1f7c:	44 0f       	add	r20, r20
    1f7e:	55 1f       	adc	r21, r21
    1f80:	66 1f       	adc	r22, r22
    1f82:	77 1f       	adc	r23, r23
    1f84:	17 fd       	sbrc	r17, 7
    1f86:	41 60       	ori	r20, 0x01	; 1
    1f88:	ee 0c       	add	r14, r14
    1f8a:	ff 1c       	adc	r15, r15
    1f8c:	00 1f       	adc	r16, r16
    1f8e:	11 1f       	adc	r17, r17
    1f90:	21 50       	subi	r18, 0x01	; 1
    1f92:	30 40       	sbci	r19, 0x00	; 0
    1f94:	40 30       	cpi	r20, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	59 07       	cpc	r21, r25
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	69 07       	cpc	r22, r25
    1f9e:	90 e4       	ldi	r25, 0x40	; 64
    1fa0:	79 07       	cpc	r23, r25
    1fa2:	60 f3       	brcs	.-40     	; 0x1f7c <__mulsf3+0x174>
    1fa4:	2b 8f       	std	Y+27, r18	; 0x1b
    1fa6:	3c 8f       	std	Y+28, r19	; 0x1c
    1fa8:	db 01       	movw	r26, r22
    1faa:	ca 01       	movw	r24, r20
    1fac:	8f 77       	andi	r24, 0x7F	; 127
    1fae:	90 70       	andi	r25, 0x00	; 0
    1fb0:	a0 70       	andi	r26, 0x00	; 0
    1fb2:	b0 70       	andi	r27, 0x00	; 0
    1fb4:	80 34       	cpi	r24, 0x40	; 64
    1fb6:	91 05       	cpc	r25, r1
    1fb8:	a1 05       	cpc	r26, r1
    1fba:	b1 05       	cpc	r27, r1
    1fbc:	61 f4       	brne	.+24     	; 0x1fd6 <__mulsf3+0x1ce>
    1fbe:	47 fd       	sbrc	r20, 7
    1fc0:	0a c0       	rjmp	.+20     	; 0x1fd6 <__mulsf3+0x1ce>
    1fc2:	e1 14       	cp	r14, r1
    1fc4:	f1 04       	cpc	r15, r1
    1fc6:	01 05       	cpc	r16, r1
    1fc8:	11 05       	cpc	r17, r1
    1fca:	29 f0       	breq	.+10     	; 0x1fd6 <__mulsf3+0x1ce>
    1fcc:	40 5c       	subi	r20, 0xC0	; 192
    1fce:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd0:	6f 4f       	sbci	r22, 0xFF	; 255
    1fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd4:	40 78       	andi	r20, 0x80	; 128
    1fd6:	1a 8e       	std	Y+26, r1	; 0x1a
    1fd8:	fe 17       	cp	r31, r30
    1fda:	11 f0       	breq	.+4      	; 0x1fe0 <__mulsf3+0x1d8>
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	8a 8f       	std	Y+26, r24	; 0x1a
    1fe0:	4d 8f       	std	Y+29, r20	; 0x1d
    1fe2:	5e 8f       	std	Y+30, r21	; 0x1e
    1fe4:	6f 8f       	std	Y+31, r22	; 0x1f
    1fe6:	78 a3       	std	Y+32, r23	; 0x20
    1fe8:	83 e0       	ldi	r24, 0x03	; 3
    1fea:	89 8f       	std	Y+25, r24	; 0x19
    1fec:	ce 01       	movw	r24, r28
    1fee:	49 96       	adiw	r24, 0x19	; 25
    1ff0:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__pack_f>
    1ff4:	a0 96       	adiw	r28, 0x20	; 32
    1ff6:	e2 e1       	ldi	r30, 0x12	; 18
    1ff8:	0c 94 3e 31 	jmp	0x627c	; 0x627c <__epilogue_restores__>

00001ffc <__gtsf2>:
    1ffc:	a8 e1       	ldi	r26, 0x18	; 24
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e4 e0       	ldi	r30, 0x04	; 4
    2002:	f0 e1       	ldi	r31, 0x10	; 16
    2004:	0c 94 2e 31 	jmp	0x625c	; 0x625c <__prologue_saves__+0x18>
    2008:	69 83       	std	Y+1, r22	; 0x01
    200a:	7a 83       	std	Y+2, r23	; 0x02
    200c:	8b 83       	std	Y+3, r24	; 0x03
    200e:	9c 83       	std	Y+4, r25	; 0x04
    2010:	2d 83       	std	Y+5, r18	; 0x05
    2012:	3e 83       	std	Y+6, r19	; 0x06
    2014:	4f 83       	std	Y+7, r20	; 0x07
    2016:	58 87       	std	Y+8, r21	; 0x08
    2018:	89 e0       	ldi	r24, 0x09	; 9
    201a:	e8 2e       	mov	r14, r24
    201c:	f1 2c       	mov	r15, r1
    201e:	ec 0e       	add	r14, r28
    2020:	fd 1e       	adc	r15, r29
    2022:	ce 01       	movw	r24, r28
    2024:	01 96       	adiw	r24, 0x01	; 1
    2026:	b7 01       	movw	r22, r14
    2028:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    202c:	8e 01       	movw	r16, r28
    202e:	0f 5e       	subi	r16, 0xEF	; 239
    2030:	1f 4f       	sbci	r17, 0xFF	; 255
    2032:	ce 01       	movw	r24, r28
    2034:	05 96       	adiw	r24, 0x05	; 5
    2036:	b8 01       	movw	r22, r16
    2038:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    203c:	89 85       	ldd	r24, Y+9	; 0x09
    203e:	82 30       	cpi	r24, 0x02	; 2
    2040:	40 f0       	brcs	.+16     	; 0x2052 <__gtsf2+0x56>
    2042:	89 89       	ldd	r24, Y+17	; 0x11
    2044:	82 30       	cpi	r24, 0x02	; 2
    2046:	28 f0       	brcs	.+10     	; 0x2052 <__gtsf2+0x56>
    2048:	c7 01       	movw	r24, r14
    204a:	b8 01       	movw	r22, r16
    204c:	0e 94 2f 12 	call	0x245e	; 0x245e <__fpcmp_parts_f>
    2050:	01 c0       	rjmp	.+2      	; 0x2054 <__gtsf2+0x58>
    2052:	8f ef       	ldi	r24, 0xFF	; 255
    2054:	68 96       	adiw	r28, 0x18	; 24
    2056:	e6 e0       	ldi	r30, 0x06	; 6
    2058:	0c 94 4a 31 	jmp	0x6294	; 0x6294 <__epilogue_restores__+0x18>

0000205c <__gesf2>:
    205c:	a8 e1       	ldi	r26, 0x18	; 24
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e4 e3       	ldi	r30, 0x34	; 52
    2062:	f0 e1       	ldi	r31, 0x10	; 16
    2064:	0c 94 2e 31 	jmp	0x625c	; 0x625c <__prologue_saves__+0x18>
    2068:	69 83       	std	Y+1, r22	; 0x01
    206a:	7a 83       	std	Y+2, r23	; 0x02
    206c:	8b 83       	std	Y+3, r24	; 0x03
    206e:	9c 83       	std	Y+4, r25	; 0x04
    2070:	2d 83       	std	Y+5, r18	; 0x05
    2072:	3e 83       	std	Y+6, r19	; 0x06
    2074:	4f 83       	std	Y+7, r20	; 0x07
    2076:	58 87       	std	Y+8, r21	; 0x08
    2078:	89 e0       	ldi	r24, 0x09	; 9
    207a:	e8 2e       	mov	r14, r24
    207c:	f1 2c       	mov	r15, r1
    207e:	ec 0e       	add	r14, r28
    2080:	fd 1e       	adc	r15, r29
    2082:	ce 01       	movw	r24, r28
    2084:	01 96       	adiw	r24, 0x01	; 1
    2086:	b7 01       	movw	r22, r14
    2088:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    208c:	8e 01       	movw	r16, r28
    208e:	0f 5e       	subi	r16, 0xEF	; 239
    2090:	1f 4f       	sbci	r17, 0xFF	; 255
    2092:	ce 01       	movw	r24, r28
    2094:	05 96       	adiw	r24, 0x05	; 5
    2096:	b8 01       	movw	r22, r16
    2098:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    209c:	89 85       	ldd	r24, Y+9	; 0x09
    209e:	82 30       	cpi	r24, 0x02	; 2
    20a0:	40 f0       	brcs	.+16     	; 0x20b2 <__gesf2+0x56>
    20a2:	89 89       	ldd	r24, Y+17	; 0x11
    20a4:	82 30       	cpi	r24, 0x02	; 2
    20a6:	28 f0       	brcs	.+10     	; 0x20b2 <__gesf2+0x56>
    20a8:	c7 01       	movw	r24, r14
    20aa:	b8 01       	movw	r22, r16
    20ac:	0e 94 2f 12 	call	0x245e	; 0x245e <__fpcmp_parts_f>
    20b0:	01 c0       	rjmp	.+2      	; 0x20b4 <__gesf2+0x58>
    20b2:	8f ef       	ldi	r24, 0xFF	; 255
    20b4:	68 96       	adiw	r28, 0x18	; 24
    20b6:	e6 e0       	ldi	r30, 0x06	; 6
    20b8:	0c 94 4a 31 	jmp	0x6294	; 0x6294 <__epilogue_restores__+0x18>

000020bc <__ltsf2>:
    20bc:	a8 e1       	ldi	r26, 0x18	; 24
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	e4 e6       	ldi	r30, 0x64	; 100
    20c2:	f0 e1       	ldi	r31, 0x10	; 16
    20c4:	0c 94 2e 31 	jmp	0x625c	; 0x625c <__prologue_saves__+0x18>
    20c8:	69 83       	std	Y+1, r22	; 0x01
    20ca:	7a 83       	std	Y+2, r23	; 0x02
    20cc:	8b 83       	std	Y+3, r24	; 0x03
    20ce:	9c 83       	std	Y+4, r25	; 0x04
    20d0:	2d 83       	std	Y+5, r18	; 0x05
    20d2:	3e 83       	std	Y+6, r19	; 0x06
    20d4:	4f 83       	std	Y+7, r20	; 0x07
    20d6:	58 87       	std	Y+8, r21	; 0x08
    20d8:	89 e0       	ldi	r24, 0x09	; 9
    20da:	e8 2e       	mov	r14, r24
    20dc:	f1 2c       	mov	r15, r1
    20de:	ec 0e       	add	r14, r28
    20e0:	fd 1e       	adc	r15, r29
    20e2:	ce 01       	movw	r24, r28
    20e4:	01 96       	adiw	r24, 0x01	; 1
    20e6:	b7 01       	movw	r22, r14
    20e8:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    20ec:	8e 01       	movw	r16, r28
    20ee:	0f 5e       	subi	r16, 0xEF	; 239
    20f0:	1f 4f       	sbci	r17, 0xFF	; 255
    20f2:	ce 01       	movw	r24, r28
    20f4:	05 96       	adiw	r24, 0x05	; 5
    20f6:	b8 01       	movw	r22, r16
    20f8:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    20fc:	89 85       	ldd	r24, Y+9	; 0x09
    20fe:	82 30       	cpi	r24, 0x02	; 2
    2100:	40 f0       	brcs	.+16     	; 0x2112 <__ltsf2+0x56>
    2102:	89 89       	ldd	r24, Y+17	; 0x11
    2104:	82 30       	cpi	r24, 0x02	; 2
    2106:	28 f0       	brcs	.+10     	; 0x2112 <__ltsf2+0x56>
    2108:	c7 01       	movw	r24, r14
    210a:	b8 01       	movw	r22, r16
    210c:	0e 94 2f 12 	call	0x245e	; 0x245e <__fpcmp_parts_f>
    2110:	01 c0       	rjmp	.+2      	; 0x2114 <__ltsf2+0x58>
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	68 96       	adiw	r28, 0x18	; 24
    2116:	e6 e0       	ldi	r30, 0x06	; 6
    2118:	0c 94 4a 31 	jmp	0x6294	; 0x6294 <__epilogue_restores__+0x18>

0000211c <__fixsfsi>:
    211c:	ac e0       	ldi	r26, 0x0C	; 12
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	e4 e9       	ldi	r30, 0x94	; 148
    2122:	f0 e1       	ldi	r31, 0x10	; 16
    2124:	0c 94 32 31 	jmp	0x6264	; 0x6264 <__prologue_saves__+0x20>
    2128:	69 83       	std	Y+1, r22	; 0x01
    212a:	7a 83       	std	Y+2, r23	; 0x02
    212c:	8b 83       	std	Y+3, r24	; 0x03
    212e:	9c 83       	std	Y+4, r25	; 0x04
    2130:	ce 01       	movw	r24, r28
    2132:	01 96       	adiw	r24, 0x01	; 1
    2134:	be 01       	movw	r22, r28
    2136:	6b 5f       	subi	r22, 0xFB	; 251
    2138:	7f 4f       	sbci	r23, 0xFF	; 255
    213a:	0e 94 b7 11 	call	0x236e	; 0x236e <__unpack_f>
    213e:	8d 81       	ldd	r24, Y+5	; 0x05
    2140:	82 30       	cpi	r24, 0x02	; 2
    2142:	61 f1       	breq	.+88     	; 0x219c <__fixsfsi+0x80>
    2144:	82 30       	cpi	r24, 0x02	; 2
    2146:	50 f1       	brcs	.+84     	; 0x219c <__fixsfsi+0x80>
    2148:	84 30       	cpi	r24, 0x04	; 4
    214a:	21 f4       	brne	.+8      	; 0x2154 <__fixsfsi+0x38>
    214c:	8e 81       	ldd	r24, Y+6	; 0x06
    214e:	88 23       	and	r24, r24
    2150:	51 f1       	breq	.+84     	; 0x21a6 <__fixsfsi+0x8a>
    2152:	2e c0       	rjmp	.+92     	; 0x21b0 <__fixsfsi+0x94>
    2154:	2f 81       	ldd	r18, Y+7	; 0x07
    2156:	38 85       	ldd	r19, Y+8	; 0x08
    2158:	37 fd       	sbrc	r19, 7
    215a:	20 c0       	rjmp	.+64     	; 0x219c <__fixsfsi+0x80>
    215c:	6e 81       	ldd	r22, Y+6	; 0x06
    215e:	2f 31       	cpi	r18, 0x1F	; 31
    2160:	31 05       	cpc	r19, r1
    2162:	1c f0       	brlt	.+6      	; 0x216a <__fixsfsi+0x4e>
    2164:	66 23       	and	r22, r22
    2166:	f9 f0       	breq	.+62     	; 0x21a6 <__fixsfsi+0x8a>
    2168:	23 c0       	rjmp	.+70     	; 0x21b0 <__fixsfsi+0x94>
    216a:	8e e1       	ldi	r24, 0x1E	; 30
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	82 1b       	sub	r24, r18
    2170:	93 0b       	sbc	r25, r19
    2172:	29 85       	ldd	r18, Y+9	; 0x09
    2174:	3a 85       	ldd	r19, Y+10	; 0x0a
    2176:	4b 85       	ldd	r20, Y+11	; 0x0b
    2178:	5c 85       	ldd	r21, Y+12	; 0x0c
    217a:	04 c0       	rjmp	.+8      	; 0x2184 <__fixsfsi+0x68>
    217c:	56 95       	lsr	r21
    217e:	47 95       	ror	r20
    2180:	37 95       	ror	r19
    2182:	27 95       	ror	r18
    2184:	8a 95       	dec	r24
    2186:	d2 f7       	brpl	.-12     	; 0x217c <__fixsfsi+0x60>
    2188:	66 23       	and	r22, r22
    218a:	b1 f0       	breq	.+44     	; 0x21b8 <__fixsfsi+0x9c>
    218c:	50 95       	com	r21
    218e:	40 95       	com	r20
    2190:	30 95       	com	r19
    2192:	21 95       	neg	r18
    2194:	3f 4f       	sbci	r19, 0xFF	; 255
    2196:	4f 4f       	sbci	r20, 0xFF	; 255
    2198:	5f 4f       	sbci	r21, 0xFF	; 255
    219a:	0e c0       	rjmp	.+28     	; 0x21b8 <__fixsfsi+0x9c>
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	50 e0       	ldi	r21, 0x00	; 0
    21a4:	09 c0       	rjmp	.+18     	; 0x21b8 <__fixsfsi+0x9c>
    21a6:	2f ef       	ldi	r18, 0xFF	; 255
    21a8:	3f ef       	ldi	r19, 0xFF	; 255
    21aa:	4f ef       	ldi	r20, 0xFF	; 255
    21ac:	5f e7       	ldi	r21, 0x7F	; 127
    21ae:	04 c0       	rjmp	.+8      	; 0x21b8 <__fixsfsi+0x9c>
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	50 e8       	ldi	r21, 0x80	; 128
    21b8:	b9 01       	movw	r22, r18
    21ba:	ca 01       	movw	r24, r20
    21bc:	2c 96       	adiw	r28, 0x0c	; 12
    21be:	e2 e0       	ldi	r30, 0x02	; 2
    21c0:	0c 94 4e 31 	jmp	0x629c	; 0x629c <__epilogue_restores__+0x20>

000021c4 <__pack_f>:
    21c4:	df 92       	push	r13
    21c6:	ef 92       	push	r14
    21c8:	ff 92       	push	r15
    21ca:	0f 93       	push	r16
    21cc:	1f 93       	push	r17
    21ce:	fc 01       	movw	r30, r24
    21d0:	e4 80       	ldd	r14, Z+4	; 0x04
    21d2:	f5 80       	ldd	r15, Z+5	; 0x05
    21d4:	06 81       	ldd	r16, Z+6	; 0x06
    21d6:	17 81       	ldd	r17, Z+7	; 0x07
    21d8:	d1 80       	ldd	r13, Z+1	; 0x01
    21da:	80 81       	ld	r24, Z
    21dc:	82 30       	cpi	r24, 0x02	; 2
    21de:	48 f4       	brcc	.+18     	; 0x21f2 <__pack_f+0x2e>
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	a0 e1       	ldi	r26, 0x10	; 16
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	e8 2a       	or	r14, r24
    21ea:	f9 2a       	or	r15, r25
    21ec:	0a 2b       	or	r16, r26
    21ee:	1b 2b       	or	r17, r27
    21f0:	a5 c0       	rjmp	.+330    	; 0x233c <__pack_f+0x178>
    21f2:	84 30       	cpi	r24, 0x04	; 4
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <__pack_f+0x34>
    21f6:	9f c0       	rjmp	.+318    	; 0x2336 <__pack_f+0x172>
    21f8:	82 30       	cpi	r24, 0x02	; 2
    21fa:	21 f4       	brne	.+8      	; 0x2204 <__pack_f+0x40>
    21fc:	ee 24       	eor	r14, r14
    21fe:	ff 24       	eor	r15, r15
    2200:	87 01       	movw	r16, r14
    2202:	05 c0       	rjmp	.+10     	; 0x220e <__pack_f+0x4a>
    2204:	e1 14       	cp	r14, r1
    2206:	f1 04       	cpc	r15, r1
    2208:	01 05       	cpc	r16, r1
    220a:	11 05       	cpc	r17, r1
    220c:	19 f4       	brne	.+6      	; 0x2214 <__pack_f+0x50>
    220e:	e0 e0       	ldi	r30, 0x00	; 0
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	96 c0       	rjmp	.+300    	; 0x2340 <__pack_f+0x17c>
    2214:	62 81       	ldd	r22, Z+2	; 0x02
    2216:	73 81       	ldd	r23, Z+3	; 0x03
    2218:	9f ef       	ldi	r25, 0xFF	; 255
    221a:	62 38       	cpi	r22, 0x82	; 130
    221c:	79 07       	cpc	r23, r25
    221e:	0c f0       	brlt	.+2      	; 0x2222 <__pack_f+0x5e>
    2220:	5b c0       	rjmp	.+182    	; 0x22d8 <__pack_f+0x114>
    2222:	22 e8       	ldi	r18, 0x82	; 130
    2224:	3f ef       	ldi	r19, 0xFF	; 255
    2226:	26 1b       	sub	r18, r22
    2228:	37 0b       	sbc	r19, r23
    222a:	2a 31       	cpi	r18, 0x1A	; 26
    222c:	31 05       	cpc	r19, r1
    222e:	2c f0       	brlt	.+10     	; 0x223a <__pack_f+0x76>
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	50 e0       	ldi	r21, 0x00	; 0
    2238:	2a c0       	rjmp	.+84     	; 0x228e <__pack_f+0xca>
    223a:	b8 01       	movw	r22, r16
    223c:	a7 01       	movw	r20, r14
    223e:	02 2e       	mov	r0, r18
    2240:	04 c0       	rjmp	.+8      	; 0x224a <__pack_f+0x86>
    2242:	76 95       	lsr	r23
    2244:	67 95       	ror	r22
    2246:	57 95       	ror	r21
    2248:	47 95       	ror	r20
    224a:	0a 94       	dec	r0
    224c:	d2 f7       	brpl	.-12     	; 0x2242 <__pack_f+0x7e>
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	a0 e0       	ldi	r26, 0x00	; 0
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	04 c0       	rjmp	.+8      	; 0x2260 <__pack_f+0x9c>
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	aa 1f       	adc	r26, r26
    225e:	bb 1f       	adc	r27, r27
    2260:	2a 95       	dec	r18
    2262:	d2 f7       	brpl	.-12     	; 0x2258 <__pack_f+0x94>
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	a1 09       	sbc	r26, r1
    2268:	b1 09       	sbc	r27, r1
    226a:	8e 21       	and	r24, r14
    226c:	9f 21       	and	r25, r15
    226e:	a0 23       	and	r26, r16
    2270:	b1 23       	and	r27, r17
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	a1 05       	cpc	r26, r1
    2276:	b1 05       	cpc	r27, r1
    2278:	21 f0       	breq	.+8      	; 0x2282 <__pack_f+0xbe>
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	a0 e0       	ldi	r26, 0x00	; 0
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	9a 01       	movw	r18, r20
    2284:	ab 01       	movw	r20, r22
    2286:	28 2b       	or	r18, r24
    2288:	39 2b       	or	r19, r25
    228a:	4a 2b       	or	r20, r26
    228c:	5b 2b       	or	r21, r27
    228e:	da 01       	movw	r26, r20
    2290:	c9 01       	movw	r24, r18
    2292:	8f 77       	andi	r24, 0x7F	; 127
    2294:	90 70       	andi	r25, 0x00	; 0
    2296:	a0 70       	andi	r26, 0x00	; 0
    2298:	b0 70       	andi	r27, 0x00	; 0
    229a:	80 34       	cpi	r24, 0x40	; 64
    229c:	91 05       	cpc	r25, r1
    229e:	a1 05       	cpc	r26, r1
    22a0:	b1 05       	cpc	r27, r1
    22a2:	39 f4       	brne	.+14     	; 0x22b2 <__pack_f+0xee>
    22a4:	27 ff       	sbrs	r18, 7
    22a6:	09 c0       	rjmp	.+18     	; 0x22ba <__pack_f+0xf6>
    22a8:	20 5c       	subi	r18, 0xC0	; 192
    22aa:	3f 4f       	sbci	r19, 0xFF	; 255
    22ac:	4f 4f       	sbci	r20, 0xFF	; 255
    22ae:	5f 4f       	sbci	r21, 0xFF	; 255
    22b0:	04 c0       	rjmp	.+8      	; 0x22ba <__pack_f+0xf6>
    22b2:	21 5c       	subi	r18, 0xC1	; 193
    22b4:	3f 4f       	sbci	r19, 0xFF	; 255
    22b6:	4f 4f       	sbci	r20, 0xFF	; 255
    22b8:	5f 4f       	sbci	r21, 0xFF	; 255
    22ba:	e0 e0       	ldi	r30, 0x00	; 0
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	20 30       	cpi	r18, 0x00	; 0
    22c0:	a0 e0       	ldi	r26, 0x00	; 0
    22c2:	3a 07       	cpc	r19, r26
    22c4:	a0 e0       	ldi	r26, 0x00	; 0
    22c6:	4a 07       	cpc	r20, r26
    22c8:	a0 e4       	ldi	r26, 0x40	; 64
    22ca:	5a 07       	cpc	r21, r26
    22cc:	10 f0       	brcs	.+4      	; 0x22d2 <__pack_f+0x10e>
    22ce:	e1 e0       	ldi	r30, 0x01	; 1
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	79 01       	movw	r14, r18
    22d4:	8a 01       	movw	r16, r20
    22d6:	27 c0       	rjmp	.+78     	; 0x2326 <__pack_f+0x162>
    22d8:	60 38       	cpi	r22, 0x80	; 128
    22da:	71 05       	cpc	r23, r1
    22dc:	64 f5       	brge	.+88     	; 0x2336 <__pack_f+0x172>
    22de:	fb 01       	movw	r30, r22
    22e0:	e1 58       	subi	r30, 0x81	; 129
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	d8 01       	movw	r26, r16
    22e6:	c7 01       	movw	r24, r14
    22e8:	8f 77       	andi	r24, 0x7F	; 127
    22ea:	90 70       	andi	r25, 0x00	; 0
    22ec:	a0 70       	andi	r26, 0x00	; 0
    22ee:	b0 70       	andi	r27, 0x00	; 0
    22f0:	80 34       	cpi	r24, 0x40	; 64
    22f2:	91 05       	cpc	r25, r1
    22f4:	a1 05       	cpc	r26, r1
    22f6:	b1 05       	cpc	r27, r1
    22f8:	39 f4       	brne	.+14     	; 0x2308 <__pack_f+0x144>
    22fa:	e7 fe       	sbrs	r14, 7
    22fc:	0d c0       	rjmp	.+26     	; 0x2318 <__pack_f+0x154>
    22fe:	80 e4       	ldi	r24, 0x40	; 64
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	a0 e0       	ldi	r26, 0x00	; 0
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	04 c0       	rjmp	.+8      	; 0x2310 <__pack_f+0x14c>
    2308:	8f e3       	ldi	r24, 0x3F	; 63
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	a0 e0       	ldi	r26, 0x00	; 0
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	e8 0e       	add	r14, r24
    2312:	f9 1e       	adc	r15, r25
    2314:	0a 1f       	adc	r16, r26
    2316:	1b 1f       	adc	r17, r27
    2318:	17 ff       	sbrs	r17, 7
    231a:	05 c0       	rjmp	.+10     	; 0x2326 <__pack_f+0x162>
    231c:	16 95       	lsr	r17
    231e:	07 95       	ror	r16
    2320:	f7 94       	ror	r15
    2322:	e7 94       	ror	r14
    2324:	31 96       	adiw	r30, 0x01	; 1
    2326:	87 e0       	ldi	r24, 0x07	; 7
    2328:	16 95       	lsr	r17
    232a:	07 95       	ror	r16
    232c:	f7 94       	ror	r15
    232e:	e7 94       	ror	r14
    2330:	8a 95       	dec	r24
    2332:	d1 f7       	brne	.-12     	; 0x2328 <__pack_f+0x164>
    2334:	05 c0       	rjmp	.+10     	; 0x2340 <__pack_f+0x17c>
    2336:	ee 24       	eor	r14, r14
    2338:	ff 24       	eor	r15, r15
    233a:	87 01       	movw	r16, r14
    233c:	ef ef       	ldi	r30, 0xFF	; 255
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	6e 2f       	mov	r22, r30
    2342:	67 95       	ror	r22
    2344:	66 27       	eor	r22, r22
    2346:	67 95       	ror	r22
    2348:	90 2f       	mov	r25, r16
    234a:	9f 77       	andi	r25, 0x7F	; 127
    234c:	d7 94       	ror	r13
    234e:	dd 24       	eor	r13, r13
    2350:	d7 94       	ror	r13
    2352:	8e 2f       	mov	r24, r30
    2354:	86 95       	lsr	r24
    2356:	49 2f       	mov	r20, r25
    2358:	46 2b       	or	r20, r22
    235a:	58 2f       	mov	r21, r24
    235c:	5d 29       	or	r21, r13
    235e:	b7 01       	movw	r22, r14
    2360:	ca 01       	movw	r24, r20
    2362:	1f 91       	pop	r17
    2364:	0f 91       	pop	r16
    2366:	ff 90       	pop	r15
    2368:	ef 90       	pop	r14
    236a:	df 90       	pop	r13
    236c:	08 95       	ret

0000236e <__unpack_f>:
    236e:	fc 01       	movw	r30, r24
    2370:	db 01       	movw	r26, r22
    2372:	40 81       	ld	r20, Z
    2374:	51 81       	ldd	r21, Z+1	; 0x01
    2376:	22 81       	ldd	r18, Z+2	; 0x02
    2378:	62 2f       	mov	r22, r18
    237a:	6f 77       	andi	r22, 0x7F	; 127
    237c:	70 e0       	ldi	r23, 0x00	; 0
    237e:	22 1f       	adc	r18, r18
    2380:	22 27       	eor	r18, r18
    2382:	22 1f       	adc	r18, r18
    2384:	93 81       	ldd	r25, Z+3	; 0x03
    2386:	89 2f       	mov	r24, r25
    2388:	88 0f       	add	r24, r24
    238a:	82 2b       	or	r24, r18
    238c:	28 2f       	mov	r18, r24
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	99 1f       	adc	r25, r25
    2392:	99 27       	eor	r25, r25
    2394:	99 1f       	adc	r25, r25
    2396:	11 96       	adiw	r26, 0x01	; 1
    2398:	9c 93       	st	X, r25
    239a:	11 97       	sbiw	r26, 0x01	; 1
    239c:	21 15       	cp	r18, r1
    239e:	31 05       	cpc	r19, r1
    23a0:	a9 f5       	brne	.+106    	; 0x240c <__unpack_f+0x9e>
    23a2:	41 15       	cp	r20, r1
    23a4:	51 05       	cpc	r21, r1
    23a6:	61 05       	cpc	r22, r1
    23a8:	71 05       	cpc	r23, r1
    23aa:	11 f4       	brne	.+4      	; 0x23b0 <__unpack_f+0x42>
    23ac:	82 e0       	ldi	r24, 0x02	; 2
    23ae:	37 c0       	rjmp	.+110    	; 0x241e <__unpack_f+0xb0>
    23b0:	82 e8       	ldi	r24, 0x82	; 130
    23b2:	9f ef       	ldi	r25, 0xFF	; 255
    23b4:	13 96       	adiw	r26, 0x03	; 3
    23b6:	9c 93       	st	X, r25
    23b8:	8e 93       	st	-X, r24
    23ba:	12 97       	sbiw	r26, 0x02	; 2
    23bc:	9a 01       	movw	r18, r20
    23be:	ab 01       	movw	r20, r22
    23c0:	67 e0       	ldi	r22, 0x07	; 7
    23c2:	22 0f       	add	r18, r18
    23c4:	33 1f       	adc	r19, r19
    23c6:	44 1f       	adc	r20, r20
    23c8:	55 1f       	adc	r21, r21
    23ca:	6a 95       	dec	r22
    23cc:	d1 f7       	brne	.-12     	; 0x23c2 <__unpack_f+0x54>
    23ce:	83 e0       	ldi	r24, 0x03	; 3
    23d0:	8c 93       	st	X, r24
    23d2:	0d c0       	rjmp	.+26     	; 0x23ee <__unpack_f+0x80>
    23d4:	22 0f       	add	r18, r18
    23d6:	33 1f       	adc	r19, r19
    23d8:	44 1f       	adc	r20, r20
    23da:	55 1f       	adc	r21, r21
    23dc:	12 96       	adiw	r26, 0x02	; 2
    23de:	8d 91       	ld	r24, X+
    23e0:	9c 91       	ld	r25, X
    23e2:	13 97       	sbiw	r26, 0x03	; 3
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	13 96       	adiw	r26, 0x03	; 3
    23e8:	9c 93       	st	X, r25
    23ea:	8e 93       	st	-X, r24
    23ec:	12 97       	sbiw	r26, 0x02	; 2
    23ee:	20 30       	cpi	r18, 0x00	; 0
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	38 07       	cpc	r19, r24
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	48 07       	cpc	r20, r24
    23f8:	80 e4       	ldi	r24, 0x40	; 64
    23fa:	58 07       	cpc	r21, r24
    23fc:	58 f3       	brcs	.-42     	; 0x23d4 <__unpack_f+0x66>
    23fe:	14 96       	adiw	r26, 0x04	; 4
    2400:	2d 93       	st	X+, r18
    2402:	3d 93       	st	X+, r19
    2404:	4d 93       	st	X+, r20
    2406:	5c 93       	st	X, r21
    2408:	17 97       	sbiw	r26, 0x07	; 7
    240a:	08 95       	ret
    240c:	2f 3f       	cpi	r18, 0xFF	; 255
    240e:	31 05       	cpc	r19, r1
    2410:	79 f4       	brne	.+30     	; 0x2430 <__unpack_f+0xc2>
    2412:	41 15       	cp	r20, r1
    2414:	51 05       	cpc	r21, r1
    2416:	61 05       	cpc	r22, r1
    2418:	71 05       	cpc	r23, r1
    241a:	19 f4       	brne	.+6      	; 0x2422 <__unpack_f+0xb4>
    241c:	84 e0       	ldi	r24, 0x04	; 4
    241e:	8c 93       	st	X, r24
    2420:	08 95       	ret
    2422:	64 ff       	sbrs	r22, 4
    2424:	03 c0       	rjmp	.+6      	; 0x242c <__unpack_f+0xbe>
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	8c 93       	st	X, r24
    242a:	12 c0       	rjmp	.+36     	; 0x2450 <__unpack_f+0xe2>
    242c:	1c 92       	st	X, r1
    242e:	10 c0       	rjmp	.+32     	; 0x2450 <__unpack_f+0xe2>
    2430:	2f 57       	subi	r18, 0x7F	; 127
    2432:	30 40       	sbci	r19, 0x00	; 0
    2434:	13 96       	adiw	r26, 0x03	; 3
    2436:	3c 93       	st	X, r19
    2438:	2e 93       	st	-X, r18
    243a:	12 97       	sbiw	r26, 0x02	; 2
    243c:	83 e0       	ldi	r24, 0x03	; 3
    243e:	8c 93       	st	X, r24
    2440:	87 e0       	ldi	r24, 0x07	; 7
    2442:	44 0f       	add	r20, r20
    2444:	55 1f       	adc	r21, r21
    2446:	66 1f       	adc	r22, r22
    2448:	77 1f       	adc	r23, r23
    244a:	8a 95       	dec	r24
    244c:	d1 f7       	brne	.-12     	; 0x2442 <__unpack_f+0xd4>
    244e:	70 64       	ori	r23, 0x40	; 64
    2450:	14 96       	adiw	r26, 0x04	; 4
    2452:	4d 93       	st	X+, r20
    2454:	5d 93       	st	X+, r21
    2456:	6d 93       	st	X+, r22
    2458:	7c 93       	st	X, r23
    245a:	17 97       	sbiw	r26, 0x07	; 7
    245c:	08 95       	ret

0000245e <__fpcmp_parts_f>:
    245e:	1f 93       	push	r17
    2460:	dc 01       	movw	r26, r24
    2462:	fb 01       	movw	r30, r22
    2464:	9c 91       	ld	r25, X
    2466:	92 30       	cpi	r25, 0x02	; 2
    2468:	08 f4       	brcc	.+2      	; 0x246c <__fpcmp_parts_f+0xe>
    246a:	47 c0       	rjmp	.+142    	; 0x24fa <__fpcmp_parts_f+0x9c>
    246c:	80 81       	ld	r24, Z
    246e:	82 30       	cpi	r24, 0x02	; 2
    2470:	08 f4       	brcc	.+2      	; 0x2474 <__fpcmp_parts_f+0x16>
    2472:	43 c0       	rjmp	.+134    	; 0x24fa <__fpcmp_parts_f+0x9c>
    2474:	94 30       	cpi	r25, 0x04	; 4
    2476:	51 f4       	brne	.+20     	; 0x248c <__fpcmp_parts_f+0x2e>
    2478:	11 96       	adiw	r26, 0x01	; 1
    247a:	1c 91       	ld	r17, X
    247c:	84 30       	cpi	r24, 0x04	; 4
    247e:	99 f5       	brne	.+102    	; 0x24e6 <__fpcmp_parts_f+0x88>
    2480:	81 81       	ldd	r24, Z+1	; 0x01
    2482:	68 2f       	mov	r22, r24
    2484:	70 e0       	ldi	r23, 0x00	; 0
    2486:	61 1b       	sub	r22, r17
    2488:	71 09       	sbc	r23, r1
    248a:	3f c0       	rjmp	.+126    	; 0x250a <__fpcmp_parts_f+0xac>
    248c:	84 30       	cpi	r24, 0x04	; 4
    248e:	21 f0       	breq	.+8      	; 0x2498 <__fpcmp_parts_f+0x3a>
    2490:	92 30       	cpi	r25, 0x02	; 2
    2492:	31 f4       	brne	.+12     	; 0x24a0 <__fpcmp_parts_f+0x42>
    2494:	82 30       	cpi	r24, 0x02	; 2
    2496:	b9 f1       	breq	.+110    	; 0x2506 <__fpcmp_parts_f+0xa8>
    2498:	81 81       	ldd	r24, Z+1	; 0x01
    249a:	88 23       	and	r24, r24
    249c:	89 f1       	breq	.+98     	; 0x2500 <__fpcmp_parts_f+0xa2>
    249e:	2d c0       	rjmp	.+90     	; 0x24fa <__fpcmp_parts_f+0x9c>
    24a0:	11 96       	adiw	r26, 0x01	; 1
    24a2:	1c 91       	ld	r17, X
    24a4:	11 97       	sbiw	r26, 0x01	; 1
    24a6:	82 30       	cpi	r24, 0x02	; 2
    24a8:	f1 f0       	breq	.+60     	; 0x24e6 <__fpcmp_parts_f+0x88>
    24aa:	81 81       	ldd	r24, Z+1	; 0x01
    24ac:	18 17       	cp	r17, r24
    24ae:	d9 f4       	brne	.+54     	; 0x24e6 <__fpcmp_parts_f+0x88>
    24b0:	12 96       	adiw	r26, 0x02	; 2
    24b2:	2d 91       	ld	r18, X+
    24b4:	3c 91       	ld	r19, X
    24b6:	13 97       	sbiw	r26, 0x03	; 3
    24b8:	82 81       	ldd	r24, Z+2	; 0x02
    24ba:	93 81       	ldd	r25, Z+3	; 0x03
    24bc:	82 17       	cp	r24, r18
    24be:	93 07       	cpc	r25, r19
    24c0:	94 f0       	brlt	.+36     	; 0x24e6 <__fpcmp_parts_f+0x88>
    24c2:	28 17       	cp	r18, r24
    24c4:	39 07       	cpc	r19, r25
    24c6:	bc f0       	brlt	.+46     	; 0x24f6 <__fpcmp_parts_f+0x98>
    24c8:	14 96       	adiw	r26, 0x04	; 4
    24ca:	8d 91       	ld	r24, X+
    24cc:	9d 91       	ld	r25, X+
    24ce:	0d 90       	ld	r0, X+
    24d0:	bc 91       	ld	r27, X
    24d2:	a0 2d       	mov	r26, r0
    24d4:	24 81       	ldd	r18, Z+4	; 0x04
    24d6:	35 81       	ldd	r19, Z+5	; 0x05
    24d8:	46 81       	ldd	r20, Z+6	; 0x06
    24da:	57 81       	ldd	r21, Z+7	; 0x07
    24dc:	28 17       	cp	r18, r24
    24de:	39 07       	cpc	r19, r25
    24e0:	4a 07       	cpc	r20, r26
    24e2:	5b 07       	cpc	r21, r27
    24e4:	18 f4       	brcc	.+6      	; 0x24ec <__fpcmp_parts_f+0x8e>
    24e6:	11 23       	and	r17, r17
    24e8:	41 f0       	breq	.+16     	; 0x24fa <__fpcmp_parts_f+0x9c>
    24ea:	0a c0       	rjmp	.+20     	; 0x2500 <__fpcmp_parts_f+0xa2>
    24ec:	82 17       	cp	r24, r18
    24ee:	93 07       	cpc	r25, r19
    24f0:	a4 07       	cpc	r26, r20
    24f2:	b5 07       	cpc	r27, r21
    24f4:	40 f4       	brcc	.+16     	; 0x2506 <__fpcmp_parts_f+0xa8>
    24f6:	11 23       	and	r17, r17
    24f8:	19 f0       	breq	.+6      	; 0x2500 <__fpcmp_parts_f+0xa2>
    24fa:	61 e0       	ldi	r22, 0x01	; 1
    24fc:	70 e0       	ldi	r23, 0x00	; 0
    24fe:	05 c0       	rjmp	.+10     	; 0x250a <__fpcmp_parts_f+0xac>
    2500:	6f ef       	ldi	r22, 0xFF	; 255
    2502:	7f ef       	ldi	r23, 0xFF	; 255
    2504:	02 c0       	rjmp	.+4      	; 0x250a <__fpcmp_parts_f+0xac>
    2506:	60 e0       	ldi	r22, 0x00	; 0
    2508:	70 e0       	ldi	r23, 0x00	; 0
    250a:	cb 01       	movw	r24, r22
    250c:	1f 91       	pop	r17
    250e:	08 95       	ret

00002510 <MADC_enuADCInit>:
/*Global flag for the ADC ISR State*/
static u8 MADC_u8ISRState ;


MADC_enuADCErrorStatus_t MADC_enuADCInit(void)
{
    2510:	df 93       	push	r29
    2512:	cf 93       	push	r28
    2514:	00 d0       	rcall	.+0      	; 0x2516 <MADC_enuADCInit+0x6>
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
	u8 LOC_u8ADCRegValue = 0;
    251a:	1a 82       	std	Y+2, r1	; 0x02
	MADC_enuADCErrorStatus_t Ret_enuADCErrorStatus = MADC_enuOK;
    251c:	19 82       	std	Y+1, r1	; 0x01
	{
		Ret_enuADCErrorStatus = MADC_enuDISABLED  ;
	}
	else
	{   
		ADCSRA |= (1 << ADCSRA_ADEN ); 
    251e:	a6 e2       	ldi	r26, 0x26	; 38
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e6 e2       	ldi	r30, 0x26	; 38
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	80 68       	ori	r24, 0x80	; 128
    252a:	8c 93       	st	X, r24
		/* SET Voltage Refrence */
		 LOC_u8ADCRegValue =  ADMUX;
    252c:	e7 e2       	ldi	r30, 0x27	; 39
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	8a 83       	std	Y+2, r24	; 0x02
		 LOC_u8ADCRegValue &= ADMUX_VOLTAGE_REFRENCE_CLEAR_MASK;
    2534:	8a 81       	ldd	r24, Y+2	; 0x02
    2536:	8f 73       	andi	r24, 0x3F	; 63
    2538:	8a 83       	std	Y+2, r24	; 0x02
		 LOC_u8ADCRegValue |= MADC_VOLTAGEREF;
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
    253c:	80 64       	ori	r24, 0x40	; 64
    253e:	8a 83       	std	Y+2, r24	; 0x02
		 ADMUX = LOC_u8ADCRegValue;
    2540:	e7 e2       	ldi	r30, 0x27	; 39
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	80 83       	st	Z, r24
		{
         ADMUX |= (1 << ADMUX_ADLAR); // Set ADLAR bit for left adjustment
        }
		 else if (MADC_DATA_ADJUST == MADC_RIGHT_ADJUST) 
        {
         ADMUX &= ~(1 << ADMUX_ADLAR); // Clear ADLAR bit for right adjustment 
    2548:	a7 e2       	ldi	r26, 0x27	; 39
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	e7 e2       	ldi	r30, 0x27	; 39
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	80 81       	ld	r24, Z
    2552:	8f 7d       	andi	r24, 0xDF	; 223
    2554:	8c 93       	st	X, r24
	     {
               Ret_enuADCErrorStatus = MADC_enuDATA_ADJUST_ERROR;
	     }
         
		 /*SET PRESCALLER */
		 LOC_u8ADCRegValue=ADCSRA;
    2556:	e6 e2       	ldi	r30, 0x26	; 38
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	8a 83       	std	Y+2, r24	; 0x02
		 LOC_u8ADCRegValue &= ADCSRA_PRESCALLER_CLEAR_MASK ;
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	88 7f       	andi	r24, 0xF8	; 248
    2562:	8a 83       	std	Y+2, r24	; 0x02
		 LOC_u8ADCRegValue |= MADC_PRESCALLER;
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	85 60       	ori	r24, 0x05	; 5
    2568:	8a 83       	std	Y+2, r24	; 0x02
		 ADCSRA = LOC_u8ADCRegValue;
    256a:	e6 e2       	ldi	r30, 0x26	; 38
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	80 83       	st	Z, r24

		 if ( MADC_INT_STATUS == MADC_INT_ENABLE) 
		{
         ADCSRA |= (1 <<ADCSRA_ADIE); // Set ADIE bit for Enable Interrupt 
    2572:	a6 e2       	ldi	r26, 0x26	; 38
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	e6 e2       	ldi	r30, 0x26	; 38
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	88 60       	ori	r24, 0x08	; 8
    257e:	8c 93       	st	X, r24
	     {
               Ret_enuADCErrorStatus = MADC_enuINT_STATUS_ERROR;
	     }
        
	}
	return Ret_enuADCErrorStatus ;
    2580:	89 81       	ldd	r24, Y+1	; 0x01
}
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	cf 91       	pop	r28
    2588:	df 91       	pop	r29
    258a:	08 95       	ret

0000258c <MADC_u8StartConversionSync>:

MADC_enuADCErrorStatus_t MADC_u8StartConversionSync ( u8 Copy_u8Channel , u16* Copy_pu16Result )
{
    258c:	df 93       	push	r29
    258e:	cf 93       	push	r28
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
    2594:	2a 97       	sbiw	r28, 0x0a	; 10
    2596:	0f b6       	in	r0, 0x3f	; 63
    2598:	f8 94       	cli
    259a:	de bf       	out	0x3e, r29	; 62
    259c:	0f be       	out	0x3f, r0	; 63
    259e:	cd bf       	out	0x3d, r28	; 61
    25a0:	88 87       	std	Y+8, r24	; 0x08
    25a2:	7a 87       	std	Y+10, r23	; 0x0a
    25a4:	69 87       	std	Y+9, r22	; 0x09
	u16 LOC_u16Digital_Read=0;
    25a6:	1f 82       	std	Y+7, r1	; 0x07
    25a8:	1e 82       	std	Y+6, r1	; 0x06
	u32 Local_u32TimeoutCounter = 0 ;
    25aa:	1a 82       	std	Y+2, r1	; 0x02
    25ac:	1b 82       	std	Y+3, r1	; 0x03
    25ae:	1c 82       	std	Y+4, r1	; 0x04
    25b0:	1d 82       	std	Y+5, r1	; 0x05
	MADC_enuADCErrorStatus_t Ret_enuADCErrorStatus = MADC_enuOK;
    25b2:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA |= (1<<ADCSRA_ADATE);
    25b4:	a6 e2       	ldi	r26, 0x26	; 38
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	e6 e2       	ldi	r30, 0x26	; 38
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	80 62       	ori	r24, 0x20	; 32
    25c0:	8c 93       	st	X, r24
	if(Copy_pu16Result != NULL)
    25c2:	89 85       	ldd	r24, Y+9	; 0x09
    25c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	09 f4       	brne	.+2      	; 0x25cc <MADC_u8StartConversionSync+0x40>
    25ca:	58 c0       	rjmp	.+176    	; 0x267c <MADC_u8StartConversionSync+0xf0>
	{
      //Select the Channel of ADC 
	  ADMUX &= ADMUX_ANALOG_CHANNEL_AND_GAIN_SELECTION_CLEAR_MASK   ;
    25cc:	a7 e2       	ldi	r26, 0x27	; 39
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	e7 e2       	ldi	r30, 0x27	; 39
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	80 7e       	andi	r24, 0xE0	; 224
    25d8:	8c 93       	st	X, r24
	  ADMUX |= Copy_u8Channel ;
    25da:	a7 e2       	ldi	r26, 0x27	; 39
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	e7 e2       	ldi	r30, 0x27	; 39
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	90 81       	ld	r25, Z
    25e4:	88 85       	ldd	r24, Y+8	; 0x08
    25e6:	89 2b       	or	r24, r25
    25e8:	8c 93       	st	X, r24

	  ADCSRA |= (1 << ADCSRA_ADSC) ;       //Start Conversion 
    25ea:	a6 e2       	ldi	r26, 0x26	; 38
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	e6 e2       	ldi	r30, 0x26	; 38
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	80 81       	ld	r24, Z
    25f4:	80 64       	ori	r24, 0x40	; 64
    25f6:	8c 93       	st	X, r24
    25f8:	0b c0       	rjmp	.+22     	; 0x2610 <MADC_u8StartConversionSync+0x84>

	  while (((GET_BIT(ADCSRA , ADCSRA_ADIF)) == 0) && (Local_u32TimeoutCounter < MADC_TIMEOUT))
			{
				Local_u32TimeoutCounter++ ;
    25fa:	8a 81       	ldd	r24, Y+2	; 0x02
    25fc:	9b 81       	ldd	r25, Y+3	; 0x03
    25fe:	ac 81       	ldd	r26, Y+4	; 0x04
    2600:	bd 81       	ldd	r27, Y+5	; 0x05
    2602:	01 96       	adiw	r24, 0x01	; 1
    2604:	a1 1d       	adc	r26, r1
    2606:	b1 1d       	adc	r27, r1
    2608:	8a 83       	std	Y+2, r24	; 0x02
    260a:	9b 83       	std	Y+3, r25	; 0x03
    260c:	ac 83       	std	Y+4, r26	; 0x04
    260e:	bd 83       	std	Y+5, r27	; 0x05
	  ADMUX &= ADMUX_ANALOG_CHANNEL_AND_GAIN_SELECTION_CLEAR_MASK   ;
	  ADMUX |= Copy_u8Channel ;

	  ADCSRA |= (1 << ADCSRA_ADSC) ;       //Start Conversion 

	  while (((GET_BIT(ADCSRA , ADCSRA_ADIF)) == 0) && (Local_u32TimeoutCounter < MADC_TIMEOUT))
    2610:	e6 e2       	ldi	r30, 0x26	; 38
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	82 95       	swap	r24
    2618:	8f 70       	andi	r24, 0x0F	; 15
    261a:	88 2f       	mov	r24, r24
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	81 70       	andi	r24, 0x01	; 1
    2620:	90 70       	andi	r25, 0x00	; 0
    2622:	00 97       	sbiw	r24, 0x00	; 0
    2624:	61 f4       	brne	.+24     	; 0x263e <MADC_u8StartConversionSync+0xb2>
    2626:	8a 81       	ldd	r24, Y+2	; 0x02
    2628:	9b 81       	ldd	r25, Y+3	; 0x03
    262a:	ac 81       	ldd	r26, Y+4	; 0x04
    262c:	bd 81       	ldd	r27, Y+5	; 0x05
    262e:	80 35       	cpi	r24, 0x50	; 80
    2630:	23 ec       	ldi	r18, 0xC3	; 195
    2632:	92 07       	cpc	r25, r18
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	a2 07       	cpc	r26, r18
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	b2 07       	cpc	r27, r18
    263c:	f0 f2       	brcs	.-68     	; 0x25fa <MADC_u8StartConversionSync+0x6e>
			{
				Local_u32TimeoutCounter++ ;
			}
			if (Local_u32TimeoutCounter == MADC_TIMEOUT)
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
    2640:	9b 81       	ldd	r25, Y+3	; 0x03
    2642:	ac 81       	ldd	r26, Y+4	; 0x04
    2644:	bd 81       	ldd	r27, Y+5	; 0x05
    2646:	80 35       	cpi	r24, 0x50	; 80
    2648:	23 ec       	ldi	r18, 0xC3	; 195
    264a:	92 07       	cpc	r25, r18
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	a2 07       	cpc	r26, r18
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	b2 07       	cpc	r27, r18
    2654:	19 f4       	brne	.+6      	; 0x265c <MADC_u8StartConversionSync+0xd0>
			{
				 Ret_enuADCErrorStatus =  MADC_enuTIMEOUT_STATE_ERROR ;
    2656:	86 e0       	ldi	r24, 0x06	; 6
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	12 c0       	rjmp	.+36     	; 0x2680 <MADC_u8StartConversionSync+0xf4>
			}
			else
			{   
				 ADCSRA |= (1 << ADCSRA_ADIF);      //Set the flag to clear it 
    265c:	a6 e2       	ldi	r26, 0x26	; 38
    265e:	b0 e0       	ldi	r27, 0x00	; 0
    2660:	e6 e2       	ldi	r30, 0x26	; 38
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	80 81       	ld	r24, Z
    2666:	80 61       	ori	r24, 0x10	; 16
    2668:	8c 93       	st	X, r24

                 *Copy_pu16Result = ADC ;          //Value of ADC
    266a:	e4 e2       	ldi	r30, 0x24	; 36
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	80 81       	ld	r24, Z
    2670:	91 81       	ldd	r25, Z+1	; 0x01
    2672:	e9 85       	ldd	r30, Y+9	; 0x09
    2674:	fa 85       	ldd	r31, Y+10	; 0x0a
    2676:	91 83       	std	Z+1, r25	; 0x01
    2678:	80 83       	st	Z, r24
    267a:	02 c0       	rjmp	.+4      	; 0x2680 <MADC_u8StartConversionSync+0xf4>
			}	
	}
    
	else
	{
       Ret_enuADCErrorStatus = MADC_enuNULL_POINTER_ERROR;
    267c:	85 e0       	ldi	r24, 0x05	; 5
    267e:	89 83       	std	Y+1, r24	; 0x01
	}
  
  return Ret_enuADCErrorStatus  ;
    2680:	89 81       	ldd	r24, Y+1	; 0x01
}
    2682:	2a 96       	adiw	r28, 0x0a	; 10
    2684:	0f b6       	in	r0, 0x3f	; 63
    2686:	f8 94       	cli
    2688:	de bf       	out	0x3e, r29	; 62
    268a:	0f be       	out	0x3f, r0	; 63
    268c:	cd bf       	out	0x3d, r28	; 61
    268e:	cf 91       	pop	r28
    2690:	df 91       	pop	r29
    2692:	08 95       	ret

00002694 <MADC_u8StartConversionAsynch>:

MADC_enuADCErrorStatus_t MADC_u8StartConversionAsynch(u8 Copy_u8Channel, u16 *Copy_pu16Result, void (*Copy_pvEndOfJobFunc)(void)) {
    2694:	df 93       	push	r29
    2696:	cf 93       	push	r28
    2698:	cd b7       	in	r28, 0x3d	; 61
    269a:	de b7       	in	r29, 0x3e	; 62
    269c:	2a 97       	sbiw	r28, 0x0a	; 10
    269e:	0f b6       	in	r0, 0x3f	; 63
    26a0:	f8 94       	cli
    26a2:	de bf       	out	0x3e, r29	; 62
    26a4:	0f be       	out	0x3f, r0	; 63
    26a6:	cd bf       	out	0x3d, r28	; 61
    26a8:	8e 83       	std	Y+6, r24	; 0x06
    26aa:	78 87       	std	Y+8, r23	; 0x08
    26ac:	6f 83       	std	Y+7, r22	; 0x07
    26ae:	5a 87       	std	Y+10, r21	; 0x0a
    26b0:	49 87       	std	Y+9, r20	; 0x09
    u32 Local_u32TimeoutCounter = 0;
    26b2:	1a 82       	std	Y+2, r1	; 0x02
    26b4:	1b 82       	std	Y+3, r1	; 0x03
    26b6:	1c 82       	std	Y+4, r1	; 0x04
    26b8:	1d 82       	std	Y+5, r1	; 0x05
    MADC_enuADCErrorStatus_t Ret_enuADCErrorStatus = MADC_enuOK;
    26ba:	19 82       	std	Y+1, r1	; 0x01

    if ((Copy_pu16Result != NULL) && (Copy_pvEndOfJobFunc!= NULL)) {
    26bc:	8f 81       	ldd	r24, Y+7	; 0x07
    26be:	98 85       	ldd	r25, Y+8	; 0x08
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	49 f1       	breq	.+82     	; 0x2716 <MADC_u8StartConversionAsynch+0x82>
    26c4:	89 85       	ldd	r24, Y+9	; 0x09
    26c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	29 f1       	breq	.+74     	; 0x2716 <MADC_u8StartConversionAsynch+0x82>
        // Set asynchronous conversion state
        MADC_u8ISRState = SINGLE_CHANNEL_ASYNCH;
    26cc:	10 92 78 02 	sts	0x0278, r1

        // Assign result pointer and callback function pointer
        MADC_pu16AsynchConversionResult = Copy_pu16Result;
    26d0:	8f 81       	ldd	r24, Y+7	; 0x07
    26d2:	98 85       	ldd	r25, Y+8	; 0x08
    26d4:	90 93 75 02 	sts	0x0275, r25
    26d8:	80 93 74 02 	sts	0x0274, r24
        ADC_pvCBFunc = Copy_pvEndOfJobFunc;
    26dc:	89 85       	ldd	r24, Y+9	; 0x09
    26de:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e0:	90 93 77 02 	sts	0x0277, r25
    26e4:	80 93 76 02 	sts	0x0276, r24

        // Select the Channel of ADC 
        ADMUX &= ADMUX_ANALOG_CHANNEL_AND_GAIN_SELECTION_CLEAR_MASK;
    26e8:	a7 e2       	ldi	r26, 0x27	; 39
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	e7 e2       	ldi	r30, 0x27	; 39
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	80 7e       	andi	r24, 0xE0	; 224
    26f4:	8c 93       	st	X, r24
        ADMUX |= Copy_u8Channel;
    26f6:	a7 e2       	ldi	r26, 0x27	; 39
    26f8:	b0 e0       	ldi	r27, 0x00	; 0
    26fa:	e7 e2       	ldi	r30, 0x27	; 39
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	90 81       	ld	r25, Z
    2700:	8e 81       	ldd	r24, Y+6	; 0x06
    2702:	89 2b       	or	r24, r25
    2704:	8c 93       	st	X, r24

        // Start Conversion and enable ADC interrupt
        ADCSRA |= (1 << ADCSRA_ADSC) | (1 << ADCSRA_ADIE);
    2706:	a6 e2       	ldi	r26, 0x26	; 38
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	e6 e2       	ldi	r30, 0x26	; 38
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	80 81       	ld	r24, Z
    2710:	88 64       	ori	r24, 0x48	; 72
    2712:	8c 93       	st	X, r24
    2714:	02 c0       	rjmp	.+4      	; 0x271a <MADC_u8StartConversionAsynch+0x86>
    } else
	 {
        Ret_enuADCErrorStatus = MADC_enuNULL_POINTER_ERROR;
    2716:	85 e0       	ldi	r24, 0x05	; 5
    2718:	89 83       	std	Y+1, r24	; 0x01
     }
    return Ret_enuADCErrorStatus;
    271a:	89 81       	ldd	r24, Y+1	; 0x01
}
    271c:	2a 96       	adiw	r28, 0x0a	; 10
    271e:	0f b6       	in	r0, 0x3f	; 63
    2720:	f8 94       	cli
    2722:	de bf       	out	0x3e, r29	; 62
    2724:	0f be       	out	0x3f, r0	; 63
    2726:	cd bf       	out	0x3d, r28	; 61
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	08 95       	ret

0000272e <__vector_16>:

/* ISR for ADC conversion complete */
void __vector_16 (void)  __attribute__((signal)) ;
void __vector_16 (void)
{
    272e:	1f 92       	push	r1
    2730:	0f 92       	push	r0
    2732:	0f b6       	in	r0, 0x3f	; 63
    2734:	0f 92       	push	r0
    2736:	11 24       	eor	r1, r1
    2738:	2f 93       	push	r18
    273a:	3f 93       	push	r19
    273c:	4f 93       	push	r20
    273e:	5f 93       	push	r21
    2740:	6f 93       	push	r22
    2742:	7f 93       	push	r23
    2744:	8f 93       	push	r24
    2746:	9f 93       	push	r25
    2748:	af 93       	push	r26
    274a:	bf 93       	push	r27
    274c:	ef 93       	push	r30
    274e:	ff 93       	push	r31
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62
	if (MADC_u8ISRState == SINGLE_CHANNEL_ASYNCH)
    2758:	80 91 78 02 	lds	r24, 0x0278
    275c:	88 23       	and	r24, r24
    275e:	b1 f4       	brne	.+44     	; 0x278c <__vector_16+0x5e>
	{
		/*Return Conversion Result*/
		* MADC_pu16AsynchConversionResult = ADC ;
    2760:	a0 91 74 02 	lds	r26, 0x0274
    2764:	b0 91 75 02 	lds	r27, 0x0275
    2768:	e4 e2       	ldi	r30, 0x24	; 36
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	91 81       	ldd	r25, Z+1	; 0x01
    2770:	8d 93       	st	X+, r24
    2772:	9c 93       	st	X, r25

		/*Call Notification Function*/
		ADC_pvCBFunc() ;
    2774:	e0 91 76 02 	lds	r30, 0x0276
    2778:	f0 91 77 02 	lds	r31, 0x0277
    277c:	09 95       	icall

		/*Disable the Conversion Complete Interrupt*/
	    ADCSRA &= ~(1 << ADCSRA_ADIE);
    277e:	a6 e2       	ldi	r26, 0x26	; 38
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	e6 e2       	ldi	r30, 0x26	; 38
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	87 7f       	andi	r24, 0xF7	; 247
    278a:	8c 93       	st	X, r24
	}
}
    278c:	cf 91       	pop	r28
    278e:	df 91       	pop	r29
    2790:	ff 91       	pop	r31
    2792:	ef 91       	pop	r30
    2794:	bf 91       	pop	r27
    2796:	af 91       	pop	r26
    2798:	9f 91       	pop	r25
    279a:	8f 91       	pop	r24
    279c:	7f 91       	pop	r23
    279e:	6f 91       	pop	r22
    27a0:	5f 91       	pop	r21
    27a2:	4f 91       	pop	r20
    27a4:	3f 91       	pop	r19
    27a6:	2f 91       	pop	r18
    27a8:	0f 90       	pop	r0
    27aa:	0f be       	out	0x3f, r0	; 63
    27ac:	0f 90       	pop	r0
    27ae:	1f 90       	pop	r1
    27b0:	18 95       	reti

000027b2 <PORT_voidPortInit>:

extern  MPORT_ENU_PIN_CONFIGRATIONS_t MPORT_PINCFG [NUMBER_OF_USED_PINS];


void PORT_voidPortInit()
{
    27b2:	df 93       	push	r29
    27b4:	cf 93       	push	r28
    27b6:	cd b7       	in	r28, 0x3d	; 61
    27b8:	de b7       	in	r29, 0x3e	; 62
          #define MPORT_PORTD_PIN7_DIR    PORT_HIGH
          #define MPORT_PORTD_PIN7_PORT   PORT_LOW

        #endif       

         DDRA = CONCAT_BITS (
    27ba:	ea e3       	ldi	r30, 0x3A	; 58
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 ef       	ldi	r24, 0xF0	; 240
    27c0:	80 83       	st	Z, r24
         MPORT_PORTA_PIN3_DIR,
         MPORT_PORTA_PIN2_DIR,
         MPORT_PORTA_PIN1_DIR,
         MPORT_PORTA_PIN0_DIR);

         DDRB = CONCAT_BITS (
    27c2:	e7 e3       	ldi	r30, 0x37	; 55
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	8f ef       	ldi	r24, 0xFF	; 255
    27c8:	80 83       	st	Z, r24
         MPORT_PORTB_PIN3_DIR,
         MPORT_PORTB_PIN2_DIR,
         MPORT_PORTB_PIN1_DIR,
         MPORT_PORTB_PIN0_DIR);

         DDRC = CONCAT_BITS(
    27ca:	e4 e3       	ldi	r30, 0x34	; 52
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	8f ef       	ldi	r24, 0xFF	; 255
    27d0:	80 83       	st	Z, r24
         MPORT_PORTC_PIN3_DIR,
         MPORT_PORTC_PIN2_DIR,
         MPORT_PORTC_PIN1_DIR,
         MPORT_PORTC_PIN0_DIR);

         DDRD = CONCAT_BITS(
    27d2:	e1 e3       	ldi	r30, 0x31	; 49
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	8f ef       	ldi	r24, 0xFF	; 255
    27d8:	80 83       	st	Z, r24
         MPORT_PORTD_PIN3_DIR,
         MPORT_PORTD_PIN2_DIR,
         MPORT_PORTD_PIN1_DIR,
         MPORT_PORTD_PIN0_DIR);

        PORTA = CONCAT_BITS (
    27da:	eb e3       	ldi	r30, 0x3B	; 59
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	8f ef       	ldi	r24, 0xFF	; 255
    27e0:	80 83       	st	Z, r24
        MPORT_PORTA_PIN2_PORT,
        MPORT_PORTA_PIN1_PORT,
        MPORT_PORTA_PIN0_PORT);   


        PORTB = CONCAT_BITS (
    27e2:	e8 e3       	ldi	r30, 0x38	; 56
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	8f ef       	ldi	r24, 0xFF	; 255
    27e8:	80 83       	st	Z, r24
        MPORT_PORTB_PIN3_PORT,
        MPORT_PORTB_PIN2_PORT,
        MPORT_PORTB_PIN1_PORT,
        MPORT_PORTB_PIN0_PORT);   

        PORTC = CONCAT_BITS (
    27ea:	e5 e3       	ldi	r30, 0x35	; 53
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	8f ef       	ldi	r24, 0xFF	; 255
    27f0:	80 83       	st	Z, r24
        MPORT_PORTC_PIN3_PORT,
        MPORT_PORTC_PIN2_PORT,
        MPORT_PORTC_PIN1_PORT,
        MPORT_PORTC_PIN0_PORT);   

        PORTD = CONCAT_BITS (
    27f2:	e2 e3       	ldi	r30, 0x32	; 50
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	8f ef       	ldi	r24, 0xFF	; 255
    27f8:	80 83       	st	Z, r24
#else 
   // #error "Invalid Configuration " 
 #endif


}
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	08 95       	ret

00002800 <MPORT_enuSetConfig>:

MPORT_enuPortErrorStatus_t MPORT_enuSetConfig(MPORT_strConfig_t* Add_strPinConfig)
{
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	2d 97       	sbiw	r28, 0x0d	; 13
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	f8 94       	cli
    280e:	de bf       	out	0x3e, r29	; 62
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	cd bf       	out	0x3d, r28	; 61
    2814:	9b 83       	std	Y+3, r25	; 0x03
    2816:	8a 83       	std	Y+2, r24	; 0x02
  MPORT_enuPortErrorStatus_t Ret_enuPortErrorStatus = MPORT_enuOK;
    2818:	19 82       	std	Y+1, r1	; 0x01

  if(Add_strPinConfig->Pin < Max_Pins_Per_Port )
    281a:	ea 81       	ldd	r30, Y+2	; 0x02
    281c:	fb 81       	ldd	r31, Y+3	; 0x03
    281e:	81 81       	ldd	r24, Z+1	; 0x01
    2820:	88 30       	cpi	r24, 0x08	; 8
    2822:	08 f0       	brcs	.+2      	; 0x2826 <MPORT_enuSetConfig+0x26>
    2824:	73 c3       	rjmp	.+1766   	; 0x2f0c <MPORT_enuSetConfig+0x70c>
  {
    switch(Add_strPinConfig->Port)
    2826:	ea 81       	ldd	r30, Y+2	; 0x02
    2828:	fb 81       	ldd	r31, Y+3	; 0x03
    282a:	80 81       	ld	r24, Z
    282c:	28 2f       	mov	r18, r24
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	3d 87       	std	Y+13, r19	; 0x0d
    2832:	2c 87       	std	Y+12, r18	; 0x0c
    2834:	8c 85       	ldd	r24, Y+12	; 0x0c
    2836:	9d 85       	ldd	r25, Y+13	; 0x0d
    2838:	81 30       	cpi	r24, 0x01	; 1
    283a:	91 05       	cpc	r25, r1
    283c:	09 f4       	brne	.+2      	; 0x2840 <MPORT_enuSetConfig+0x40>
    283e:	ea c0       	rjmp	.+468    	; 0x2a14 <MPORT_enuSetConfig+0x214>
    2840:	2c 85       	ldd	r18, Y+12	; 0x0c
    2842:	3d 85       	ldd	r19, Y+13	; 0x0d
    2844:	22 30       	cpi	r18, 0x02	; 2
    2846:	31 05       	cpc	r19, r1
    2848:	2c f4       	brge	.+10     	; 0x2854 <MPORT_enuSetConfig+0x54>
    284a:	8c 85       	ldd	r24, Y+12	; 0x0c
    284c:	9d 85       	ldd	r25, Y+13	; 0x0d
    284e:	00 97       	sbiw	r24, 0x00	; 0
    2850:	71 f0       	breq	.+28     	; 0x286e <MPORT_enuSetConfig+0x6e>
    2852:	59 c3       	rjmp	.+1714   	; 0x2f06 <MPORT_enuSetConfig+0x706>
    2854:	2c 85       	ldd	r18, Y+12	; 0x0c
    2856:	3d 85       	ldd	r19, Y+13	; 0x0d
    2858:	22 30       	cpi	r18, 0x02	; 2
    285a:	31 05       	cpc	r19, r1
    285c:	09 f4       	brne	.+2      	; 0x2860 <MPORT_enuSetConfig+0x60>
    285e:	ad c1       	rjmp	.+858    	; 0x2bba <MPORT_enuSetConfig+0x3ba>
    2860:	8c 85       	ldd	r24, Y+12	; 0x0c
    2862:	9d 85       	ldd	r25, Y+13	; 0x0d
    2864:	83 30       	cpi	r24, 0x03	; 3
    2866:	91 05       	cpc	r25, r1
    2868:	09 f4       	brne	.+2      	; 0x286c <MPORT_enuSetConfig+0x6c>
    286a:	7a c2       	rjmp	.+1268   	; 0x2d60 <MPORT_enuSetConfig+0x560>
    286c:	4c c3       	rjmp	.+1688   	; 0x2f06 <MPORT_enuSetConfig+0x706>
    {
      case MPORT_enuPort_A :
       switch(Add_strPinConfig->Mode)
    286e:	ea 81       	ldd	r30, Y+2	; 0x02
    2870:	fb 81       	ldd	r31, Y+3	; 0x03
    2872:	82 81       	ldd	r24, Z+2	; 0x02
    2874:	28 2f       	mov	r18, r24
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	3b 87       	std	Y+11, r19	; 0x0b
    287a:	2a 87       	std	Y+10, r18	; 0x0a
    287c:	8a 85       	ldd	r24, Y+10	; 0x0a
    287e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2880:	81 30       	cpi	r24, 0x01	; 1
    2882:	91 05       	cpc	r25, r1
    2884:	09 f4       	brne	.+2      	; 0x2888 <MPORT_enuSetConfig+0x88>
    2886:	42 c0       	rjmp	.+132    	; 0x290c <MPORT_enuSetConfig+0x10c>
    2888:	2a 85       	ldd	r18, Y+10	; 0x0a
    288a:	3b 85       	ldd	r19, Y+11	; 0x0b
    288c:	22 30       	cpi	r18, 0x02	; 2
    288e:	31 05       	cpc	r19, r1
    2890:	2c f4       	brge	.+10     	; 0x289c <MPORT_enuSetConfig+0x9c>
    2892:	8a 85       	ldd	r24, Y+10	; 0x0a
    2894:	9b 85       	ldd	r25, Y+11	; 0x0b
    2896:	00 97       	sbiw	r24, 0x00	; 0
    2898:	71 f0       	breq	.+28     	; 0x28b6 <MPORT_enuSetConfig+0xb6>
    289a:	b9 c0       	rjmp	.+370    	; 0x2a0e <MPORT_enuSetConfig+0x20e>
    289c:	2a 85       	ldd	r18, Y+10	; 0x0a
    289e:	3b 85       	ldd	r19, Y+11	; 0x0b
    28a0:	22 30       	cpi	r18, 0x02	; 2
    28a2:	31 05       	cpc	r19, r1
    28a4:	09 f4       	brne	.+2      	; 0x28a8 <MPORT_enuSetConfig+0xa8>
    28a6:	5e c0       	rjmp	.+188    	; 0x2964 <MPORT_enuSetConfig+0x164>
    28a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    28aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    28ac:	83 30       	cpi	r24, 0x03	; 3
    28ae:	91 05       	cpc	r25, r1
    28b0:	09 f4       	brne	.+2      	; 0x28b4 <MPORT_enuSetConfig+0xb4>
    28b2:	82 c0       	rjmp	.+260    	; 0x29b8 <MPORT_enuSetConfig+0x1b8>
    28b4:	ac c0       	rjmp	.+344    	; 0x2a0e <MPORT_enuSetConfig+0x20e>
       {
         case MPORT_enu_INPUT_PU:
         CLR_BIT(DDRA,Add_strPinConfig->Pin);
    28b6:	aa e3       	ldi	r26, 0x3A	; 58
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	ea e3       	ldi	r30, 0x3A	; 58
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
    28c0:	48 2f       	mov	r20, r24
    28c2:	ea 81       	ldd	r30, Y+2	; 0x02
    28c4:	fb 81       	ldd	r31, Y+3	; 0x03
    28c6:	81 81       	ldd	r24, Z+1	; 0x01
    28c8:	28 2f       	mov	r18, r24
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	02 c0       	rjmp	.+4      	; 0x28d6 <MPORT_enuSetConfig+0xd6>
    28d2:	88 0f       	add	r24, r24
    28d4:	99 1f       	adc	r25, r25
    28d6:	2a 95       	dec	r18
    28d8:	e2 f7       	brpl	.-8      	; 0x28d2 <MPORT_enuSetConfig+0xd2>
    28da:	80 95       	com	r24
    28dc:	84 23       	and	r24, r20
    28de:	8c 93       	st	X, r24
         SET_BIT(PORTA,Add_strPinConfig->Pin);
    28e0:	ab e3       	ldi	r26, 0x3B	; 59
    28e2:	b0 e0       	ldi	r27, 0x00	; 0
    28e4:	eb e3       	ldi	r30, 0x3B	; 59
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	80 81       	ld	r24, Z
    28ea:	48 2f       	mov	r20, r24
    28ec:	ea 81       	ldd	r30, Y+2	; 0x02
    28ee:	fb 81       	ldd	r31, Y+3	; 0x03
    28f0:	81 81       	ldd	r24, Z+1	; 0x01
    28f2:	28 2f       	mov	r18, r24
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	02 2e       	mov	r0, r18
    28fc:	02 c0       	rjmp	.+4      	; 0x2902 <MPORT_enuSetConfig+0x102>
    28fe:	88 0f       	add	r24, r24
    2900:	99 1f       	adc	r25, r25
    2902:	0a 94       	dec	r0
    2904:	e2 f7       	brpl	.-8      	; 0x28fe <MPORT_enuSetConfig+0xfe>
    2906:	84 2b       	or	r24, r20
    2908:	8c 93       	st	X, r24
    290a:	02 c3       	rjmp	.+1540   	; 0x2f10 <MPORT_enuSetConfig+0x710>
         break;


       case MPORT_enu_INPUT_PD:
         CLR_BIT(DDRA,Add_strPinConfig->Pin);
    290c:	aa e3       	ldi	r26, 0x3A	; 58
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	ea e3       	ldi	r30, 0x3A	; 58
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	48 2f       	mov	r20, r24
    2918:	ea 81       	ldd	r30, Y+2	; 0x02
    291a:	fb 81       	ldd	r31, Y+3	; 0x03
    291c:	81 81       	ldd	r24, Z+1	; 0x01
    291e:	28 2f       	mov	r18, r24
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	02 c0       	rjmp	.+4      	; 0x292c <MPORT_enuSetConfig+0x12c>
    2928:	88 0f       	add	r24, r24
    292a:	99 1f       	adc	r25, r25
    292c:	2a 95       	dec	r18
    292e:	e2 f7       	brpl	.-8      	; 0x2928 <MPORT_enuSetConfig+0x128>
    2930:	80 95       	com	r24
    2932:	84 23       	and	r24, r20
    2934:	8c 93       	st	X, r24
         CLR_BIT(PORTA,Add_strPinConfig->Pin);
    2936:	ab e3       	ldi	r26, 0x3B	; 59
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	eb e3       	ldi	r30, 0x3B	; 59
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	80 81       	ld	r24, Z
    2940:	48 2f       	mov	r20, r24
    2942:	ea 81       	ldd	r30, Y+2	; 0x02
    2944:	fb 81       	ldd	r31, Y+3	; 0x03
    2946:	81 81       	ldd	r24, Z+1	; 0x01
    2948:	28 2f       	mov	r18, r24
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	02 2e       	mov	r0, r18
    2952:	02 c0       	rjmp	.+4      	; 0x2958 <MPORT_enuSetConfig+0x158>
    2954:	88 0f       	add	r24, r24
    2956:	99 1f       	adc	r25, r25
    2958:	0a 94       	dec	r0
    295a:	e2 f7       	brpl	.-8      	; 0x2954 <MPORT_enuSetConfig+0x154>
    295c:	80 95       	com	r24
    295e:	84 23       	and	r24, r20
    2960:	8c 93       	st	X, r24
    2962:	d6 c2       	rjmp	.+1452   	; 0x2f10 <MPORT_enuSetConfig+0x710>
         break;


         case MPORT_enu_OUTPUT_HIGH:
         SET_BIT(DDRA,Add_strPinConfig->Pin);
    2964:	aa e3       	ldi	r26, 0x3A	; 58
    2966:	b0 e0       	ldi	r27, 0x00	; 0
    2968:	ea e3       	ldi	r30, 0x3A	; 58
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	80 81       	ld	r24, Z
    296e:	48 2f       	mov	r20, r24
    2970:	ea 81       	ldd	r30, Y+2	; 0x02
    2972:	fb 81       	ldd	r31, Y+3	; 0x03
    2974:	81 81       	ldd	r24, Z+1	; 0x01
    2976:	28 2f       	mov	r18, r24
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	02 c0       	rjmp	.+4      	; 0x2984 <MPORT_enuSetConfig+0x184>
    2980:	88 0f       	add	r24, r24
    2982:	99 1f       	adc	r25, r25
    2984:	2a 95       	dec	r18
    2986:	e2 f7       	brpl	.-8      	; 0x2980 <MPORT_enuSetConfig+0x180>
    2988:	84 2b       	or	r24, r20
    298a:	8c 93       	st	X, r24
         SET_BIT(PORTA,Add_strPinConfig->Pin);
    298c:	ab e3       	ldi	r26, 0x3B	; 59
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	eb e3       	ldi	r30, 0x3B	; 59
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	80 81       	ld	r24, Z
    2996:	48 2f       	mov	r20, r24
    2998:	ea 81       	ldd	r30, Y+2	; 0x02
    299a:	fb 81       	ldd	r31, Y+3	; 0x03
    299c:	81 81       	ldd	r24, Z+1	; 0x01
    299e:	28 2f       	mov	r18, r24
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	02 2e       	mov	r0, r18
    29a8:	02 c0       	rjmp	.+4      	; 0x29ae <MPORT_enuSetConfig+0x1ae>
    29aa:	88 0f       	add	r24, r24
    29ac:	99 1f       	adc	r25, r25
    29ae:	0a 94       	dec	r0
    29b0:	e2 f7       	brpl	.-8      	; 0x29aa <MPORT_enuSetConfig+0x1aa>
    29b2:	84 2b       	or	r24, r20
    29b4:	8c 93       	st	X, r24
    29b6:	ac c2       	rjmp	.+1368   	; 0x2f10 <MPORT_enuSetConfig+0x710>
         break;


         case MPORT_enu_OUTPUT_LOW:
         SET_BIT(DDRA,Add_strPinConfig->Pin);
    29b8:	aa e3       	ldi	r26, 0x3A	; 58
    29ba:	b0 e0       	ldi	r27, 0x00	; 0
    29bc:	ea e3       	ldi	r30, 0x3A	; 58
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	48 2f       	mov	r20, r24
    29c4:	ea 81       	ldd	r30, Y+2	; 0x02
    29c6:	fb 81       	ldd	r31, Y+3	; 0x03
    29c8:	81 81       	ldd	r24, Z+1	; 0x01
    29ca:	28 2f       	mov	r18, r24
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	02 c0       	rjmp	.+4      	; 0x29d8 <MPORT_enuSetConfig+0x1d8>
    29d4:	88 0f       	add	r24, r24
    29d6:	99 1f       	adc	r25, r25
    29d8:	2a 95       	dec	r18
    29da:	e2 f7       	brpl	.-8      	; 0x29d4 <MPORT_enuSetConfig+0x1d4>
    29dc:	84 2b       	or	r24, r20
    29de:	8c 93       	st	X, r24
         CLR_BIT(PORTA,Add_strPinConfig->Pin);
    29e0:	ab e3       	ldi	r26, 0x3B	; 59
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	eb e3       	ldi	r30, 0x3B	; 59
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	80 81       	ld	r24, Z
    29ea:	48 2f       	mov	r20, r24
    29ec:	ea 81       	ldd	r30, Y+2	; 0x02
    29ee:	fb 81       	ldd	r31, Y+3	; 0x03
    29f0:	81 81       	ldd	r24, Z+1	; 0x01
    29f2:	28 2f       	mov	r18, r24
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	02 2e       	mov	r0, r18
    29fc:	02 c0       	rjmp	.+4      	; 0x2a02 <MPORT_enuSetConfig+0x202>
    29fe:	88 0f       	add	r24, r24
    2a00:	99 1f       	adc	r25, r25
    2a02:	0a 94       	dec	r0
    2a04:	e2 f7       	brpl	.-8      	; 0x29fe <MPORT_enuSetConfig+0x1fe>
    2a06:	80 95       	com	r24
    2a08:	84 23       	and	r24, r20
    2a0a:	8c 93       	st	X, r24
    2a0c:	81 c2       	rjmp	.+1282   	; 0x2f10 <MPORT_enuSetConfig+0x710>
         break;
         default :
         Ret_enuPortErrorStatus = MPORT_enuInvalidConfigration;
    2a0e:	83 e0       	ldi	r24, 0x03	; 3
    2a10:	89 83       	std	Y+1, r24	; 0x01
    2a12:	7e c2       	rjmp	.+1276   	; 0x2f10 <MPORT_enuSetConfig+0x710>
         break;
       }
       break;
       case MPORT_enuPort_B :
       switch(Add_strPinConfig->Mode)
    2a14:	ea 81       	ldd	r30, Y+2	; 0x02
    2a16:	fb 81       	ldd	r31, Y+3	; 0x03
    2a18:	82 81       	ldd	r24, Z+2	; 0x02
    2a1a:	28 2f       	mov	r18, r24
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	39 87       	std	Y+9, r19	; 0x09
    2a20:	28 87       	std	Y+8, r18	; 0x08
    2a22:	88 85       	ldd	r24, Y+8	; 0x08
    2a24:	99 85       	ldd	r25, Y+9	; 0x09
    2a26:	81 30       	cpi	r24, 0x01	; 1
    2a28:	91 05       	cpc	r25, r1
    2a2a:	09 f4       	brne	.+2      	; 0x2a2e <MPORT_enuSetConfig+0x22e>
    2a2c:	42 c0       	rjmp	.+132    	; 0x2ab2 <MPORT_enuSetConfig+0x2b2>
    2a2e:	28 85       	ldd	r18, Y+8	; 0x08
    2a30:	39 85       	ldd	r19, Y+9	; 0x09
    2a32:	22 30       	cpi	r18, 0x02	; 2
    2a34:	31 05       	cpc	r19, r1
    2a36:	2c f4       	brge	.+10     	; 0x2a42 <MPORT_enuSetConfig+0x242>
    2a38:	88 85       	ldd	r24, Y+8	; 0x08
    2a3a:	99 85       	ldd	r25, Y+9	; 0x09
    2a3c:	00 97       	sbiw	r24, 0x00	; 0
    2a3e:	71 f0       	breq	.+28     	; 0x2a5c <MPORT_enuSetConfig+0x25c>
    2a40:	b9 c0       	rjmp	.+370    	; 0x2bb4 <MPORT_enuSetConfig+0x3b4>
    2a42:	28 85       	ldd	r18, Y+8	; 0x08
    2a44:	39 85       	ldd	r19, Y+9	; 0x09
    2a46:	22 30       	cpi	r18, 0x02	; 2
    2a48:	31 05       	cpc	r19, r1
    2a4a:	09 f4       	brne	.+2      	; 0x2a4e <MPORT_enuSetConfig+0x24e>
    2a4c:	5e c0       	rjmp	.+188    	; 0x2b0a <MPORT_enuSetConfig+0x30a>
    2a4e:	88 85       	ldd	r24, Y+8	; 0x08
    2a50:	99 85       	ldd	r25, Y+9	; 0x09
    2a52:	83 30       	cpi	r24, 0x03	; 3
    2a54:	91 05       	cpc	r25, r1
    2a56:	09 f4       	brne	.+2      	; 0x2a5a <MPORT_enuSetConfig+0x25a>
    2a58:	82 c0       	rjmp	.+260    	; 0x2b5e <MPORT_enuSetConfig+0x35e>
    2a5a:	ac c0       	rjmp	.+344    	; 0x2bb4 <MPORT_enuSetConfig+0x3b4>
       {
         case MPORT_enu_INPUT_PU:
         CLR_BIT(DDRB,Add_strPinConfig->Pin);
    2a5c:	a7 e3       	ldi	r26, 0x37	; 55
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	e7 e3       	ldi	r30, 0x37	; 55
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	48 2f       	mov	r20, r24
    2a68:	ea 81       	ldd	r30, Y+2	; 0x02
    2a6a:	fb 81       	ldd	r31, Y+3	; 0x03
    2a6c:	81 81       	ldd	r24, Z+1	; 0x01
    2a6e:	28 2f       	mov	r18, r24
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	02 c0       	rjmp	.+4      	; 0x2a7c <MPORT_enuSetConfig+0x27c>
    2a78:	88 0f       	add	r24, r24
    2a7a:	99 1f       	adc	r25, r25
    2a7c:	2a 95       	dec	r18
    2a7e:	e2 f7       	brpl	.-8      	; 0x2a78 <MPORT_enuSetConfig+0x278>
    2a80:	80 95       	com	r24
    2a82:	84 23       	and	r24, r20
    2a84:	8c 93       	st	X, r24
         SET_BIT(PORTB,Add_strPinConfig->Pin);
    2a86:	a8 e3       	ldi	r26, 0x38	; 56
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	e8 e3       	ldi	r30, 0x38	; 56
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	80 81       	ld	r24, Z
    2a90:	48 2f       	mov	r20, r24
    2a92:	ea 81       	ldd	r30, Y+2	; 0x02
    2a94:	fb 81       	ldd	r31, Y+3	; 0x03
    2a96:	81 81       	ldd	r24, Z+1	; 0x01
    2a98:	28 2f       	mov	r18, r24
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	02 2e       	mov	r0, r18
    2aa2:	02 c0       	rjmp	.+4      	; 0x2aa8 <MPORT_enuSetConfig+0x2a8>
    2aa4:	88 0f       	add	r24, r24
    2aa6:	99 1f       	adc	r25, r25
    2aa8:	0a 94       	dec	r0
    2aaa:	e2 f7       	brpl	.-8      	; 0x2aa4 <MPORT_enuSetConfig+0x2a4>
    2aac:	84 2b       	or	r24, r20
    2aae:	8c 93       	st	X, r24
    2ab0:	2f c2       	rjmp	.+1118   	; 0x2f10 <MPORT_enuSetConfig+0x710>
         break;


         case MPORT_enu_INPUT_PD:
         CLR_BIT(DDRB,Add_strPinConfig->Pin);
    2ab2:	a7 e3       	ldi	r26, 0x37	; 55
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	e7 e3       	ldi	r30, 0x37	; 55
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	48 2f       	mov	r20, r24
    2abe:	ea 81       	ldd	r30, Y+2	; 0x02
    2ac0:	fb 81       	ldd	r31, Y+3	; 0x03
    2ac2:	81 81       	ldd	r24, Z+1	; 0x01
    2ac4:	28 2f       	mov	r18, r24
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	02 c0       	rjmp	.+4      	; 0x2ad2 <MPORT_enuSetConfig+0x2d2>
    2ace:	88 0f       	add	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	2a 95       	dec	r18
    2ad4:	e2 f7       	brpl	.-8      	; 0x2ace <MPORT_enuSetConfig+0x2ce>
    2ad6:	80 95       	com	r24
    2ad8:	84 23       	and	r24, r20
    2ada:	8c 93       	st	X, r24
         CLR_BIT(PORTB,Add_strPinConfig->Pin);
    2adc:	a8 e3       	ldi	r26, 0x38	; 56
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	e8 e3       	ldi	r30, 0x38	; 56
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	48 2f       	mov	r20, r24
    2ae8:	ea 81       	ldd	r30, Y+2	; 0x02
    2aea:	fb 81       	ldd	r31, Y+3	; 0x03
    2aec:	81 81       	ldd	r24, Z+1	; 0x01
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	02 2e       	mov	r0, r18
    2af8:	02 c0       	rjmp	.+4      	; 0x2afe <MPORT_enuSetConfig+0x2fe>
    2afa:	88 0f       	add	r24, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	0a 94       	dec	r0
    2b00:	e2 f7       	brpl	.-8      	; 0x2afa <MPORT_enuSetConfig+0x2fa>
    2b02:	80 95       	com	r24
    2b04:	84 23       	and	r24, r20
    2b06:	8c 93       	st	X, r24
    2b08:	03 c2       	rjmp	.+1030   	; 0x2f10 <MPORT_enuSetConfig+0x710>
         break;


         case MPORT_enu_OUTPUT_HIGH:
         SET_BIT(DDRB,Add_strPinConfig->Pin);
    2b0a:	a7 e3       	ldi	r26, 0x37	; 55
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	e7 e3       	ldi	r30, 0x37	; 55
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
    2b14:	48 2f       	mov	r20, r24
    2b16:	ea 81       	ldd	r30, Y+2	; 0x02
    2b18:	fb 81       	ldd	r31, Y+3	; 0x03
    2b1a:	81 81       	ldd	r24, Z+1	; 0x01
    2b1c:	28 2f       	mov	r18, r24
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	02 c0       	rjmp	.+4      	; 0x2b2a <MPORT_enuSetConfig+0x32a>
    2b26:	88 0f       	add	r24, r24
    2b28:	99 1f       	adc	r25, r25
    2b2a:	2a 95       	dec	r18
    2b2c:	e2 f7       	brpl	.-8      	; 0x2b26 <MPORT_enuSetConfig+0x326>
    2b2e:	84 2b       	or	r24, r20
    2b30:	8c 93       	st	X, r24
         SET_BIT(PORTB,Add_strPinConfig->Pin);
    2b32:	a8 e3       	ldi	r26, 0x38	; 56
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	e8 e3       	ldi	r30, 0x38	; 56
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 81       	ld	r24, Z
    2b3c:	48 2f       	mov	r20, r24
    2b3e:	ea 81       	ldd	r30, Y+2	; 0x02
    2b40:	fb 81       	ldd	r31, Y+3	; 0x03
    2b42:	81 81       	ldd	r24, Z+1	; 0x01
    2b44:	28 2f       	mov	r18, r24
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	02 2e       	mov	r0, r18
    2b4e:	02 c0       	rjmp	.+4      	; 0x2b54 <MPORT_enuSetConfig+0x354>
    2b50:	88 0f       	add	r24, r24
    2b52:	99 1f       	adc	r25, r25
    2b54:	0a 94       	dec	r0
    2b56:	e2 f7       	brpl	.-8      	; 0x2b50 <MPORT_enuSetConfig+0x350>
    2b58:	84 2b       	or	r24, r20
    2b5a:	8c 93       	st	X, r24
    2b5c:	d9 c1       	rjmp	.+946    	; 0x2f10 <MPORT_enuSetConfig+0x710>
         break;


         case MPORT_enu_OUTPUT_LOW:
         SET_BIT(DDRB,Add_strPinConfig->Pin);
    2b5e:	a7 e3       	ldi	r26, 0x37	; 55
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	e7 e3       	ldi	r30, 0x37	; 55
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 81       	ld	r24, Z
    2b68:	48 2f       	mov	r20, r24
    2b6a:	ea 81       	ldd	r30, Y+2	; 0x02
    2b6c:	fb 81       	ldd	r31, Y+3	; 0x03
    2b6e:	81 81       	ldd	r24, Z+1	; 0x01
    2b70:	28 2f       	mov	r18, r24
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	02 c0       	rjmp	.+4      	; 0x2b7e <MPORT_enuSetConfig+0x37e>
    2b7a:	88 0f       	add	r24, r24
    2b7c:	99 1f       	adc	r25, r25
    2b7e:	2a 95       	dec	r18
    2b80:	e2 f7       	brpl	.-8      	; 0x2b7a <MPORT_enuSetConfig+0x37a>
    2b82:	84 2b       	or	r24, r20
    2b84:	8c 93       	st	X, r24
         CLR_BIT(PORTB,Add_strPinConfig->Pin);
    2b86:	a8 e3       	ldi	r26, 0x38	; 56
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	e8 e3       	ldi	r30, 0x38	; 56
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	80 81       	ld	r24, Z
    2b90:	48 2f       	mov	r20, r24
    2b92:	ea 81       	ldd	r30, Y+2	; 0x02
    2b94:	fb 81       	ldd	r31, Y+3	; 0x03
    2b96:	81 81       	ldd	r24, Z+1	; 0x01
    2b98:	28 2f       	mov	r18, r24
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	02 2e       	mov	r0, r18
    2ba2:	02 c0       	rjmp	.+4      	; 0x2ba8 <MPORT_enuSetConfig+0x3a8>
    2ba4:	88 0f       	add	r24, r24
    2ba6:	99 1f       	adc	r25, r25
    2ba8:	0a 94       	dec	r0
    2baa:	e2 f7       	brpl	.-8      	; 0x2ba4 <MPORT_enuSetConfig+0x3a4>
    2bac:	80 95       	com	r24
    2bae:	84 23       	and	r24, r20
    2bb0:	8c 93       	st	X, r24
    2bb2:	ae c1       	rjmp	.+860    	; 0x2f10 <MPORT_enuSetConfig+0x710>
         break;
         default :
         Ret_enuPortErrorStatus = MPORT_enuInvalidConfigration;
    2bb4:	83 e0       	ldi	r24, 0x03	; 3
    2bb6:	89 83       	std	Y+1, r24	; 0x01
    2bb8:	ab c1       	rjmp	.+854    	; 0x2f10 <MPORT_enuSetConfig+0x710>
         break;
       }
       break;
       case MPORT_enuPort_C:
       switch(Add_strPinConfig->Mode)
    2bba:	ea 81       	ldd	r30, Y+2	; 0x02
    2bbc:	fb 81       	ldd	r31, Y+3	; 0x03
    2bbe:	82 81       	ldd	r24, Z+2	; 0x02
    2bc0:	28 2f       	mov	r18, r24
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	3f 83       	std	Y+7, r19	; 0x07
    2bc6:	2e 83       	std	Y+6, r18	; 0x06
    2bc8:	8e 81       	ldd	r24, Y+6	; 0x06
    2bca:	9f 81       	ldd	r25, Y+7	; 0x07
    2bcc:	81 30       	cpi	r24, 0x01	; 1
    2bce:	91 05       	cpc	r25, r1
    2bd0:	09 f4       	brne	.+2      	; 0x2bd4 <MPORT_enuSetConfig+0x3d4>
    2bd2:	42 c0       	rjmp	.+132    	; 0x2c58 <MPORT_enuSetConfig+0x458>
    2bd4:	2e 81       	ldd	r18, Y+6	; 0x06
    2bd6:	3f 81       	ldd	r19, Y+7	; 0x07
    2bd8:	22 30       	cpi	r18, 0x02	; 2
    2bda:	31 05       	cpc	r19, r1
    2bdc:	2c f4       	brge	.+10     	; 0x2be8 <MPORT_enuSetConfig+0x3e8>
    2bde:	8e 81       	ldd	r24, Y+6	; 0x06
    2be0:	9f 81       	ldd	r25, Y+7	; 0x07
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	71 f0       	breq	.+28     	; 0x2c02 <MPORT_enuSetConfig+0x402>
    2be6:	b9 c0       	rjmp	.+370    	; 0x2d5a <MPORT_enuSetConfig+0x55a>
    2be8:	2e 81       	ldd	r18, Y+6	; 0x06
    2bea:	3f 81       	ldd	r19, Y+7	; 0x07
    2bec:	22 30       	cpi	r18, 0x02	; 2
    2bee:	31 05       	cpc	r19, r1
    2bf0:	09 f4       	brne	.+2      	; 0x2bf4 <MPORT_enuSetConfig+0x3f4>
    2bf2:	5e c0       	rjmp	.+188    	; 0x2cb0 <MPORT_enuSetConfig+0x4b0>
    2bf4:	8e 81       	ldd	r24, Y+6	; 0x06
    2bf6:	9f 81       	ldd	r25, Y+7	; 0x07
    2bf8:	83 30       	cpi	r24, 0x03	; 3
    2bfa:	91 05       	cpc	r25, r1
    2bfc:	09 f4       	brne	.+2      	; 0x2c00 <MPORT_enuSetConfig+0x400>
    2bfe:	82 c0       	rjmp	.+260    	; 0x2d04 <MPORT_enuSetConfig+0x504>
    2c00:	ac c0       	rjmp	.+344    	; 0x2d5a <MPORT_enuSetConfig+0x55a>
       {
         case MPORT_enu_INPUT_PU:
         CLR_BIT(DDRC,Add_strPinConfig->Pin);
    2c02:	a4 e3       	ldi	r26, 0x34	; 52
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	e4 e3       	ldi	r30, 0x34	; 52
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	48 2f       	mov	r20, r24
    2c0e:	ea 81       	ldd	r30, Y+2	; 0x02
    2c10:	fb 81       	ldd	r31, Y+3	; 0x03
    2c12:	81 81       	ldd	r24, Z+1	; 0x01
    2c14:	28 2f       	mov	r18, r24
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	02 c0       	rjmp	.+4      	; 0x2c22 <MPORT_enuSetConfig+0x422>
    2c1e:	88 0f       	add	r24, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	2a 95       	dec	r18
    2c24:	e2 f7       	brpl	.-8      	; 0x2c1e <MPORT_enuSetConfig+0x41e>
    2c26:	80 95       	com	r24
    2c28:	84 23       	and	r24, r20
    2c2a:	8c 93       	st	X, r24
         SET_BIT(PORTC,Add_strPinConfig->Pin);
    2c2c:	a5 e3       	ldi	r26, 0x35	; 53
    2c2e:	b0 e0       	ldi	r27, 0x00	; 0
    2c30:	e5 e3       	ldi	r30, 0x35	; 53
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	80 81       	ld	r24, Z
    2c36:	48 2f       	mov	r20, r24
    2c38:	ea 81       	ldd	r30, Y+2	; 0x02
    2c3a:	fb 81       	ldd	r31, Y+3	; 0x03
    2c3c:	81 81       	ldd	r24, Z+1	; 0x01
    2c3e:	28 2f       	mov	r18, r24
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	02 2e       	mov	r0, r18
    2c48:	02 c0       	rjmp	.+4      	; 0x2c4e <MPORT_enuSetConfig+0x44e>
    2c4a:	88 0f       	add	r24, r24
    2c4c:	99 1f       	adc	r25, r25
    2c4e:	0a 94       	dec	r0
    2c50:	e2 f7       	brpl	.-8      	; 0x2c4a <MPORT_enuSetConfig+0x44a>
    2c52:	84 2b       	or	r24, r20
    2c54:	8c 93       	st	X, r24
    2c56:	5c c1       	rjmp	.+696    	; 0x2f10 <MPORT_enuSetConfig+0x710>
         break;


         case MPORT_enu_INPUT_PD:
         CLR_BIT(DDRC,Add_strPinConfig->Pin);
    2c58:	a4 e3       	ldi	r26, 0x34	; 52
    2c5a:	b0 e0       	ldi	r27, 0x00	; 0
    2c5c:	e4 e3       	ldi	r30, 0x34	; 52
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	80 81       	ld	r24, Z
    2c62:	48 2f       	mov	r20, r24
    2c64:	ea 81       	ldd	r30, Y+2	; 0x02
    2c66:	fb 81       	ldd	r31, Y+3	; 0x03
    2c68:	81 81       	ldd	r24, Z+1	; 0x01
    2c6a:	28 2f       	mov	r18, r24
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	02 c0       	rjmp	.+4      	; 0x2c78 <MPORT_enuSetConfig+0x478>
    2c74:	88 0f       	add	r24, r24
    2c76:	99 1f       	adc	r25, r25
    2c78:	2a 95       	dec	r18
    2c7a:	e2 f7       	brpl	.-8      	; 0x2c74 <MPORT_enuSetConfig+0x474>
    2c7c:	80 95       	com	r24
    2c7e:	84 23       	and	r24, r20
    2c80:	8c 93       	st	X, r24
         CLR_BIT(PORTC,Add_strPinConfig->Pin);
    2c82:	a5 e3       	ldi	r26, 0x35	; 53
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	e5 e3       	ldi	r30, 0x35	; 53
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	48 2f       	mov	r20, r24
    2c8e:	ea 81       	ldd	r30, Y+2	; 0x02
    2c90:	fb 81       	ldd	r31, Y+3	; 0x03
    2c92:	81 81       	ldd	r24, Z+1	; 0x01
    2c94:	28 2f       	mov	r18, r24
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	02 2e       	mov	r0, r18
    2c9e:	02 c0       	rjmp	.+4      	; 0x2ca4 <MPORT_enuSetConfig+0x4a4>
    2ca0:	88 0f       	add	r24, r24
    2ca2:	99 1f       	adc	r25, r25
    2ca4:	0a 94       	dec	r0
    2ca6:	e2 f7       	brpl	.-8      	; 0x2ca0 <MPORT_enuSetConfig+0x4a0>
    2ca8:	80 95       	com	r24
    2caa:	84 23       	and	r24, r20
    2cac:	8c 93       	st	X, r24
    2cae:	30 c1       	rjmp	.+608    	; 0x2f10 <MPORT_enuSetConfig+0x710>
         break;


         case MPORT_enu_OUTPUT_HIGH:
         SET_BIT(DDRC,Add_strPinConfig->Pin);
    2cb0:	a4 e3       	ldi	r26, 0x34	; 52
    2cb2:	b0 e0       	ldi	r27, 0x00	; 0
    2cb4:	e4 e3       	ldi	r30, 0x34	; 52
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	80 81       	ld	r24, Z
    2cba:	48 2f       	mov	r20, r24
    2cbc:	ea 81       	ldd	r30, Y+2	; 0x02
    2cbe:	fb 81       	ldd	r31, Y+3	; 0x03
    2cc0:	81 81       	ldd	r24, Z+1	; 0x01
    2cc2:	28 2f       	mov	r18, r24
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	02 c0       	rjmp	.+4      	; 0x2cd0 <MPORT_enuSetConfig+0x4d0>
    2ccc:	88 0f       	add	r24, r24
    2cce:	99 1f       	adc	r25, r25
    2cd0:	2a 95       	dec	r18
    2cd2:	e2 f7       	brpl	.-8      	; 0x2ccc <MPORT_enuSetConfig+0x4cc>
    2cd4:	84 2b       	or	r24, r20
    2cd6:	8c 93       	st	X, r24
         SET_BIT(PORTC,Add_strPinConfig->Pin);
    2cd8:	a5 e3       	ldi	r26, 0x35	; 53
    2cda:	b0 e0       	ldi	r27, 0x00	; 0
    2cdc:	e5 e3       	ldi	r30, 0x35	; 53
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	80 81       	ld	r24, Z
    2ce2:	48 2f       	mov	r20, r24
    2ce4:	ea 81       	ldd	r30, Y+2	; 0x02
    2ce6:	fb 81       	ldd	r31, Y+3	; 0x03
    2ce8:	81 81       	ldd	r24, Z+1	; 0x01
    2cea:	28 2f       	mov	r18, r24
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	02 2e       	mov	r0, r18
    2cf4:	02 c0       	rjmp	.+4      	; 0x2cfa <MPORT_enuSetConfig+0x4fa>
    2cf6:	88 0f       	add	r24, r24
    2cf8:	99 1f       	adc	r25, r25
    2cfa:	0a 94       	dec	r0
    2cfc:	e2 f7       	brpl	.-8      	; 0x2cf6 <MPORT_enuSetConfig+0x4f6>
    2cfe:	84 2b       	or	r24, r20
    2d00:	8c 93       	st	X, r24
    2d02:	06 c1       	rjmp	.+524    	; 0x2f10 <MPORT_enuSetConfig+0x710>
         break;


         case MPORT_enu_OUTPUT_LOW:
         SET_BIT(DDRC,Add_strPinConfig->Pin);
    2d04:	a4 e3       	ldi	r26, 0x34	; 52
    2d06:	b0 e0       	ldi	r27, 0x00	; 0
    2d08:	e4 e3       	ldi	r30, 0x34	; 52
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	48 2f       	mov	r20, r24
    2d10:	ea 81       	ldd	r30, Y+2	; 0x02
    2d12:	fb 81       	ldd	r31, Y+3	; 0x03
    2d14:	81 81       	ldd	r24, Z+1	; 0x01
    2d16:	28 2f       	mov	r18, r24
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	02 c0       	rjmp	.+4      	; 0x2d24 <MPORT_enuSetConfig+0x524>
    2d20:	88 0f       	add	r24, r24
    2d22:	99 1f       	adc	r25, r25
    2d24:	2a 95       	dec	r18
    2d26:	e2 f7       	brpl	.-8      	; 0x2d20 <MPORT_enuSetConfig+0x520>
    2d28:	84 2b       	or	r24, r20
    2d2a:	8c 93       	st	X, r24
         CLR_BIT(PORTC,Add_strPinConfig->Pin);
    2d2c:	a5 e3       	ldi	r26, 0x35	; 53
    2d2e:	b0 e0       	ldi	r27, 0x00	; 0
    2d30:	e5 e3       	ldi	r30, 0x35	; 53
    2d32:	f0 e0       	ldi	r31, 0x00	; 0
    2d34:	80 81       	ld	r24, Z
    2d36:	48 2f       	mov	r20, r24
    2d38:	ea 81       	ldd	r30, Y+2	; 0x02
    2d3a:	fb 81       	ldd	r31, Y+3	; 0x03
    2d3c:	81 81       	ldd	r24, Z+1	; 0x01
    2d3e:	28 2f       	mov	r18, r24
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	02 2e       	mov	r0, r18
    2d48:	02 c0       	rjmp	.+4      	; 0x2d4e <MPORT_enuSetConfig+0x54e>
    2d4a:	88 0f       	add	r24, r24
    2d4c:	99 1f       	adc	r25, r25
    2d4e:	0a 94       	dec	r0
    2d50:	e2 f7       	brpl	.-8      	; 0x2d4a <MPORT_enuSetConfig+0x54a>
    2d52:	80 95       	com	r24
    2d54:	84 23       	and	r24, r20
    2d56:	8c 93       	st	X, r24
    2d58:	db c0       	rjmp	.+438    	; 0x2f10 <MPORT_enuSetConfig+0x710>
         break;
         default :
         Ret_enuPortErrorStatus = MPORT_enuInvalidConfigration;
    2d5a:	83 e0       	ldi	r24, 0x03	; 3
    2d5c:	89 83       	std	Y+1, r24	; 0x01
    2d5e:	d8 c0       	rjmp	.+432    	; 0x2f10 <MPORT_enuSetConfig+0x710>
         break;
       }
       break;
       case MPORT_enuPort_D:
       switch(Add_strPinConfig->Mode)
    2d60:	ea 81       	ldd	r30, Y+2	; 0x02
    2d62:	fb 81       	ldd	r31, Y+3	; 0x03
    2d64:	82 81       	ldd	r24, Z+2	; 0x02
    2d66:	28 2f       	mov	r18, r24
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	3d 83       	std	Y+5, r19	; 0x05
    2d6c:	2c 83       	std	Y+4, r18	; 0x04
    2d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d70:	9d 81       	ldd	r25, Y+5	; 0x05
    2d72:	81 30       	cpi	r24, 0x01	; 1
    2d74:	91 05       	cpc	r25, r1
    2d76:	09 f4       	brne	.+2      	; 0x2d7a <MPORT_enuSetConfig+0x57a>
    2d78:	42 c0       	rjmp	.+132    	; 0x2dfe <MPORT_enuSetConfig+0x5fe>
    2d7a:	2c 81       	ldd	r18, Y+4	; 0x04
    2d7c:	3d 81       	ldd	r19, Y+5	; 0x05
    2d7e:	22 30       	cpi	r18, 0x02	; 2
    2d80:	31 05       	cpc	r19, r1
    2d82:	2c f4       	brge	.+10     	; 0x2d8e <MPORT_enuSetConfig+0x58e>
    2d84:	8c 81       	ldd	r24, Y+4	; 0x04
    2d86:	9d 81       	ldd	r25, Y+5	; 0x05
    2d88:	00 97       	sbiw	r24, 0x00	; 0
    2d8a:	71 f0       	breq	.+28     	; 0x2da8 <MPORT_enuSetConfig+0x5a8>
    2d8c:	b9 c0       	rjmp	.+370    	; 0x2f00 <MPORT_enuSetConfig+0x700>
    2d8e:	2c 81       	ldd	r18, Y+4	; 0x04
    2d90:	3d 81       	ldd	r19, Y+5	; 0x05
    2d92:	22 30       	cpi	r18, 0x02	; 2
    2d94:	31 05       	cpc	r19, r1
    2d96:	09 f4       	brne	.+2      	; 0x2d9a <MPORT_enuSetConfig+0x59a>
    2d98:	5e c0       	rjmp	.+188    	; 0x2e56 <MPORT_enuSetConfig+0x656>
    2d9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d9c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d9e:	83 30       	cpi	r24, 0x03	; 3
    2da0:	91 05       	cpc	r25, r1
    2da2:	09 f4       	brne	.+2      	; 0x2da6 <MPORT_enuSetConfig+0x5a6>
    2da4:	82 c0       	rjmp	.+260    	; 0x2eaa <MPORT_enuSetConfig+0x6aa>
    2da6:	ac c0       	rjmp	.+344    	; 0x2f00 <MPORT_enuSetConfig+0x700>
       {
         case MPORT_enu_INPUT_PU:
         CLR_BIT(DDRD,Add_strPinConfig->Pin);
    2da8:	a1 e3       	ldi	r26, 0x31	; 49
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	e1 e3       	ldi	r30, 0x31	; 49
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	80 81       	ld	r24, Z
    2db2:	48 2f       	mov	r20, r24
    2db4:	ea 81       	ldd	r30, Y+2	; 0x02
    2db6:	fb 81       	ldd	r31, Y+3	; 0x03
    2db8:	81 81       	ldd	r24, Z+1	; 0x01
    2dba:	28 2f       	mov	r18, r24
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	02 c0       	rjmp	.+4      	; 0x2dc8 <MPORT_enuSetConfig+0x5c8>
    2dc4:	88 0f       	add	r24, r24
    2dc6:	99 1f       	adc	r25, r25
    2dc8:	2a 95       	dec	r18
    2dca:	e2 f7       	brpl	.-8      	; 0x2dc4 <MPORT_enuSetConfig+0x5c4>
    2dcc:	80 95       	com	r24
    2dce:	84 23       	and	r24, r20
    2dd0:	8c 93       	st	X, r24
         SET_BIT(PORTD,Add_strPinConfig->Pin);
    2dd2:	a2 e3       	ldi	r26, 0x32	; 50
    2dd4:	b0 e0       	ldi	r27, 0x00	; 0
    2dd6:	e2 e3       	ldi	r30, 0x32	; 50
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	80 81       	ld	r24, Z
    2ddc:	48 2f       	mov	r20, r24
    2dde:	ea 81       	ldd	r30, Y+2	; 0x02
    2de0:	fb 81       	ldd	r31, Y+3	; 0x03
    2de2:	81 81       	ldd	r24, Z+1	; 0x01
    2de4:	28 2f       	mov	r18, r24
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	02 2e       	mov	r0, r18
    2dee:	02 c0       	rjmp	.+4      	; 0x2df4 <MPORT_enuSetConfig+0x5f4>
    2df0:	88 0f       	add	r24, r24
    2df2:	99 1f       	adc	r25, r25
    2df4:	0a 94       	dec	r0
    2df6:	e2 f7       	brpl	.-8      	; 0x2df0 <MPORT_enuSetConfig+0x5f0>
    2df8:	84 2b       	or	r24, r20
    2dfa:	8c 93       	st	X, r24
    2dfc:	89 c0       	rjmp	.+274    	; 0x2f10 <MPORT_enuSetConfig+0x710>
         break;


         case MPORT_enu_INPUT_PD:
         CLR_BIT(DDRD,Add_strPinConfig->Pin);
    2dfe:	a1 e3       	ldi	r26, 0x31	; 49
    2e00:	b0 e0       	ldi	r27, 0x00	; 0
    2e02:	e1 e3       	ldi	r30, 0x31	; 49
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	80 81       	ld	r24, Z
    2e08:	48 2f       	mov	r20, r24
    2e0a:	ea 81       	ldd	r30, Y+2	; 0x02
    2e0c:	fb 81       	ldd	r31, Y+3	; 0x03
    2e0e:	81 81       	ldd	r24, Z+1	; 0x01
    2e10:	28 2f       	mov	r18, r24
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	02 c0       	rjmp	.+4      	; 0x2e1e <MPORT_enuSetConfig+0x61e>
    2e1a:	88 0f       	add	r24, r24
    2e1c:	99 1f       	adc	r25, r25
    2e1e:	2a 95       	dec	r18
    2e20:	e2 f7       	brpl	.-8      	; 0x2e1a <MPORT_enuSetConfig+0x61a>
    2e22:	80 95       	com	r24
    2e24:	84 23       	and	r24, r20
    2e26:	8c 93       	st	X, r24
         CLR_BIT(PORTD,Add_strPinConfig->Pin);
    2e28:	a2 e3       	ldi	r26, 0x32	; 50
    2e2a:	b0 e0       	ldi	r27, 0x00	; 0
    2e2c:	e2 e3       	ldi	r30, 0x32	; 50
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	80 81       	ld	r24, Z
    2e32:	48 2f       	mov	r20, r24
    2e34:	ea 81       	ldd	r30, Y+2	; 0x02
    2e36:	fb 81       	ldd	r31, Y+3	; 0x03
    2e38:	81 81       	ldd	r24, Z+1	; 0x01
    2e3a:	28 2f       	mov	r18, r24
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	02 2e       	mov	r0, r18
    2e44:	02 c0       	rjmp	.+4      	; 0x2e4a <MPORT_enuSetConfig+0x64a>
    2e46:	88 0f       	add	r24, r24
    2e48:	99 1f       	adc	r25, r25
    2e4a:	0a 94       	dec	r0
    2e4c:	e2 f7       	brpl	.-8      	; 0x2e46 <MPORT_enuSetConfig+0x646>
    2e4e:	80 95       	com	r24
    2e50:	84 23       	and	r24, r20
    2e52:	8c 93       	st	X, r24
    2e54:	5d c0       	rjmp	.+186    	; 0x2f10 <MPORT_enuSetConfig+0x710>
         break;


         case MPORT_enu_OUTPUT_HIGH:
         SET_BIT(DDRD,Add_strPinConfig->Pin);
    2e56:	a1 e3       	ldi	r26, 0x31	; 49
    2e58:	b0 e0       	ldi	r27, 0x00	; 0
    2e5a:	e1 e3       	ldi	r30, 0x31	; 49
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	80 81       	ld	r24, Z
    2e60:	48 2f       	mov	r20, r24
    2e62:	ea 81       	ldd	r30, Y+2	; 0x02
    2e64:	fb 81       	ldd	r31, Y+3	; 0x03
    2e66:	81 81       	ldd	r24, Z+1	; 0x01
    2e68:	28 2f       	mov	r18, r24
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	02 c0       	rjmp	.+4      	; 0x2e76 <MPORT_enuSetConfig+0x676>
    2e72:	88 0f       	add	r24, r24
    2e74:	99 1f       	adc	r25, r25
    2e76:	2a 95       	dec	r18
    2e78:	e2 f7       	brpl	.-8      	; 0x2e72 <MPORT_enuSetConfig+0x672>
    2e7a:	84 2b       	or	r24, r20
    2e7c:	8c 93       	st	X, r24
         SET_BIT(PORTD,Add_strPinConfig->Pin);
    2e7e:	a2 e3       	ldi	r26, 0x32	; 50
    2e80:	b0 e0       	ldi	r27, 0x00	; 0
    2e82:	e2 e3       	ldi	r30, 0x32	; 50
    2e84:	f0 e0       	ldi	r31, 0x00	; 0
    2e86:	80 81       	ld	r24, Z
    2e88:	48 2f       	mov	r20, r24
    2e8a:	ea 81       	ldd	r30, Y+2	; 0x02
    2e8c:	fb 81       	ldd	r31, Y+3	; 0x03
    2e8e:	81 81       	ldd	r24, Z+1	; 0x01
    2e90:	28 2f       	mov	r18, r24
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	02 2e       	mov	r0, r18
    2e9a:	02 c0       	rjmp	.+4      	; 0x2ea0 <MPORT_enuSetConfig+0x6a0>
    2e9c:	88 0f       	add	r24, r24
    2e9e:	99 1f       	adc	r25, r25
    2ea0:	0a 94       	dec	r0
    2ea2:	e2 f7       	brpl	.-8      	; 0x2e9c <MPORT_enuSetConfig+0x69c>
    2ea4:	84 2b       	or	r24, r20
    2ea6:	8c 93       	st	X, r24
    2ea8:	33 c0       	rjmp	.+102    	; 0x2f10 <MPORT_enuSetConfig+0x710>
         break;


         case MPORT_enu_OUTPUT_LOW:
         SET_BIT(DDRD,Add_strPinConfig->Pin);
    2eaa:	a1 e3       	ldi	r26, 0x31	; 49
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
    2eae:	e1 e3       	ldi	r30, 0x31	; 49
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	80 81       	ld	r24, Z
    2eb4:	48 2f       	mov	r20, r24
    2eb6:	ea 81       	ldd	r30, Y+2	; 0x02
    2eb8:	fb 81       	ldd	r31, Y+3	; 0x03
    2eba:	81 81       	ldd	r24, Z+1	; 0x01
    2ebc:	28 2f       	mov	r18, r24
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	02 c0       	rjmp	.+4      	; 0x2eca <MPORT_enuSetConfig+0x6ca>
    2ec6:	88 0f       	add	r24, r24
    2ec8:	99 1f       	adc	r25, r25
    2eca:	2a 95       	dec	r18
    2ecc:	e2 f7       	brpl	.-8      	; 0x2ec6 <MPORT_enuSetConfig+0x6c6>
    2ece:	84 2b       	or	r24, r20
    2ed0:	8c 93       	st	X, r24
         CLR_BIT(PORTD,Add_strPinConfig->Pin);
    2ed2:	a2 e3       	ldi	r26, 0x32	; 50
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	e2 e3       	ldi	r30, 0x32	; 50
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	48 2f       	mov	r20, r24
    2ede:	ea 81       	ldd	r30, Y+2	; 0x02
    2ee0:	fb 81       	ldd	r31, Y+3	; 0x03
    2ee2:	81 81       	ldd	r24, Z+1	; 0x01
    2ee4:	28 2f       	mov	r18, r24
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	02 2e       	mov	r0, r18
    2eee:	02 c0       	rjmp	.+4      	; 0x2ef4 <MPORT_enuSetConfig+0x6f4>
    2ef0:	88 0f       	add	r24, r24
    2ef2:	99 1f       	adc	r25, r25
    2ef4:	0a 94       	dec	r0
    2ef6:	e2 f7       	brpl	.-8      	; 0x2ef0 <MPORT_enuSetConfig+0x6f0>
    2ef8:	80 95       	com	r24
    2efa:	84 23       	and	r24, r20
    2efc:	8c 93       	st	X, r24
    2efe:	08 c0       	rjmp	.+16     	; 0x2f10 <MPORT_enuSetConfig+0x710>
         break;
         default :
         Ret_enuPortErrorStatus = MPORT_enuInvalidConfigration;
    2f00:	83 e0       	ldi	r24, 0x03	; 3
    2f02:	89 83       	std	Y+1, r24	; 0x01
    2f04:	05 c0       	rjmp	.+10     	; 0x2f10 <MPORT_enuSetConfig+0x710>
         break;
       }
       break;
       default :
         Ret_enuPortErrorStatus = MPORT_enuInvalidPort;
    2f06:	82 e0       	ldi	r24, 0x02	; 2
    2f08:	89 83       	std	Y+1, r24	; 0x01
    2f0a:	02 c0       	rjmp	.+4      	; 0x2f10 <MPORT_enuSetConfig+0x710>
         break;
    }
  }
  else
  {
  Ret_enuPortErrorStatus = MPORT_enuInvalidPin;
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	89 83       	std	Y+1, r24	; 0x01
  }
  return  Ret_enuPortErrorStatus;
    2f10:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f12:	2d 96       	adiw	r28, 0x0d	; 13
    2f14:	0f b6       	in	r0, 0x3f	; 63
    2f16:	f8 94       	cli
    2f18:	de bf       	out	0x3e, r29	; 62
    2f1a:	0f be       	out	0x3f, r0	; 63
    2f1c:	cd bf       	out	0x3d, r28	; 61
    2f1e:	cf 91       	pop	r28
    2f20:	df 91       	pop	r29
    2f22:	08 95       	ret

00002f24 <DIO_enuSetPinConfigration>:




DIO_enuErrorState_t DIO_enuSetPinConfigration(DIO_enuPORT_OPTS_t Copy_enuPortNum , DIO_enuPIN_OPTS_t Copy_enuPinNum , DIO_enuCONFIGRATIONS_OPTS_t Copy_enuConfigration )
{
    2f24:	df 93       	push	r29
    2f26:	cf 93       	push	r28
    2f28:	cd b7       	in	r28, 0x3d	; 61
    2f2a:	de b7       	in	r29, 0x3e	; 62
    2f2c:	2e 97       	sbiw	r28, 0x0e	; 14
    2f2e:	0f b6       	in	r0, 0x3f	; 63
    2f30:	f8 94       	cli
    2f32:	de bf       	out	0x3e, r29	; 62
    2f34:	0f be       	out	0x3f, r0	; 63
    2f36:	cd bf       	out	0x3d, r28	; 61
    2f38:	8a 83       	std	Y+2, r24	; 0x02
    2f3a:	6b 83       	std	Y+3, r22	; 0x03
    2f3c:	4c 83       	std	Y+4, r20	; 0x04
	DIO_enuErrorState_t Ret_enuErrorStates = DIO_enu_NOK  ;
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	89 83       	std	Y+1, r24	; 0x01
	
	 // Check for invalid port number
	if(Copy_enuPortNum > DIO_enuPort_D)
    2f42:	8a 81       	ldd	r24, Y+2	; 0x02
    2f44:	84 30       	cpi	r24, 0x04	; 4
    2f46:	18 f0       	brcs	.+6      	; 0x2f4e <DIO_enuSetPinConfigration+0x2a>
	 Ret_enuErrorStates = DIO_enu_INVALID_PORT_NUM ;
    2f48:	82 e0       	ldi	r24, 0x02	; 2
    2f4a:	89 83       	std	Y+1, r24	; 0x01
    2f4c:	0d c2       	rjmp	.+1050   	; 0x3368 <DIO_enuSetPinConfigration+0x444>

     // Check for invalid pin number
	else if(Copy_enuPinNum > DIO_enuPin_7)
    2f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f50:	88 30       	cpi	r24, 0x08	; 8
    2f52:	18 f0       	brcs	.+6      	; 0x2f5a <DIO_enuSetPinConfigration+0x36>
	 Ret_enuErrorStates = DIO_enu_INVALID_PIN_NUM ;
    2f54:	83 e0       	ldi	r24, 0x03	; 3
    2f56:	89 83       	std	Y+1, r24	; 0x01
    2f58:	07 c2       	rjmp	.+1038   	; 0x3368 <DIO_enuSetPinConfigration+0x444>

     // Check for invalid configuration option
    else if(Copy_enuConfigration > DIO_enuInputExternalPulldown)
    2f5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f5c:	83 30       	cpi	r24, 0x03	; 3
    2f5e:	18 f0       	brcs	.+6      	; 0x2f66 <DIO_enuSetPinConfigration+0x42>
	 Ret_enuErrorStates = DIO_enu_INVALID_CONFIGRATION;
    2f60:	84 e0       	ldi	r24, 0x04	; 4
    2f62:	89 83       	std	Y+1, r24	; 0x01
    2f64:	01 c2       	rjmp	.+1026   	; 0x3368 <DIO_enuSetPinConfigration+0x444>
    
	else 
	{  
	// Configure the specified pin based on the provided parameters
	   switch (Copy_enuPortNum)
    2f66:	8a 81       	ldd	r24, Y+2	; 0x02
    2f68:	28 2f       	mov	r18, r24
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	3e 87       	std	Y+14, r19	; 0x0e
    2f6e:	2d 87       	std	Y+13, r18	; 0x0d
    2f70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f74:	81 30       	cpi	r24, 0x01	; 1
    2f76:	91 05       	cpc	r25, r1
    2f78:	09 f4       	brne	.+2      	; 0x2f7c <DIO_enuSetPinConfigration+0x58>
    2f7a:	8f c0       	rjmp	.+286    	; 0x309a <DIO_enuSetPinConfigration+0x176>
    2f7c:	2d 85       	ldd	r18, Y+13	; 0x0d
    2f7e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2f80:	22 30       	cpi	r18, 0x02	; 2
    2f82:	31 05       	cpc	r19, r1
    2f84:	2c f4       	brge	.+10     	; 0x2f90 <DIO_enuSetPinConfigration+0x6c>
    2f86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f8a:	00 97       	sbiw	r24, 0x00	; 0
    2f8c:	71 f0       	breq	.+28     	; 0x2faa <DIO_enuSetPinConfigration+0x86>
    2f8e:	ec c1       	rjmp	.+984    	; 0x3368 <DIO_enuSetPinConfigration+0x444>
    2f90:	2d 85       	ldd	r18, Y+13	; 0x0d
    2f92:	3e 85       	ldd	r19, Y+14	; 0x0e
    2f94:	22 30       	cpi	r18, 0x02	; 2
    2f96:	31 05       	cpc	r19, r1
    2f98:	09 f4       	brne	.+2      	; 0x2f9c <DIO_enuSetPinConfigration+0x78>
    2f9a:	f7 c0       	rjmp	.+494    	; 0x318a <DIO_enuSetPinConfigration+0x266>
    2f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fa0:	83 30       	cpi	r24, 0x03	; 3
    2fa2:	91 05       	cpc	r25, r1
    2fa4:	09 f4       	brne	.+2      	; 0x2fa8 <DIO_enuSetPinConfigration+0x84>
    2fa6:	69 c1       	rjmp	.+722    	; 0x327a <DIO_enuSetPinConfigration+0x356>
    2fa8:	df c1       	rjmp	.+958    	; 0x3368 <DIO_enuSetPinConfigration+0x444>
	   { 
		// Handle configuration for each port separately
         case DIO_enuPort_A:
		 switch(Copy_enuConfigration)
    2faa:	8c 81       	ldd	r24, Y+4	; 0x04
    2fac:	28 2f       	mov	r18, r24
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	3c 87       	std	Y+12, r19	; 0x0c
    2fb2:	2b 87       	std	Y+11, r18	; 0x0b
    2fb4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fb6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fb8:	81 30       	cpi	r24, 0x01	; 1
    2fba:	91 05       	cpc	r25, r1
    2fbc:	f9 f0       	breq	.+62     	; 0x2ffc <DIO_enuSetPinConfigration+0xd8>
    2fbe:	2b 85       	ldd	r18, Y+11	; 0x0b
    2fc0:	3c 85       	ldd	r19, Y+12	; 0x0c
    2fc2:	22 30       	cpi	r18, 0x02	; 2
    2fc4:	31 05       	cpc	r19, r1
    2fc6:	09 f4       	brne	.+2      	; 0x2fca <DIO_enuSetPinConfigration+0xa6>
    2fc8:	40 c0       	rjmp	.+128    	; 0x304a <DIO_enuSetPinConfigration+0x126>
    2fca:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fcc:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fce:	00 97       	sbiw	r24, 0x00	; 0
    2fd0:	09 f0       	breq	.+2      	; 0x2fd4 <DIO_enuSetPinConfigration+0xb0>
    2fd2:	ca c1       	rjmp	.+916    	; 0x3368 <DIO_enuSetPinConfigration+0x444>
		 {  
			// Set pin as output
			case DIO_enuOutput :                     SET_BIT(DDRA,Copy_enuPinNum) ;            break;
    2fd4:	aa e3       	ldi	r26, 0x3A	; 58
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	ea e3       	ldi	r30, 0x3A	; 58
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
    2fde:	48 2f       	mov	r20, r24
    2fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe2:	28 2f       	mov	r18, r24
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	02 2e       	mov	r0, r18
    2fec:	02 c0       	rjmp	.+4      	; 0x2ff2 <DIO_enuSetPinConfigration+0xce>
    2fee:	88 0f       	add	r24, r24
    2ff0:	99 1f       	adc	r25, r25
    2ff2:	0a 94       	dec	r0
    2ff4:	e2 f7       	brpl	.-8      	; 0x2fee <DIO_enuSetPinConfigration+0xca>
    2ff6:	84 2b       	or	r24, r20
    2ff8:	8c 93       	st	X, r24
    2ffa:	b6 c1       	rjmp	.+876    	; 0x3368 <DIO_enuSetPinConfigration+0x444>
            
			// Set pin as input with internal pull-up
			case DIO_enuInputInternalPullup :        CLR_BIT(DDRA,Copy_enuPinNum) ;      
    2ffc:	aa e3       	ldi	r26, 0x3A	; 58
    2ffe:	b0 e0       	ldi	r27, 0x00	; 0
    3000:	ea e3       	ldi	r30, 0x3A	; 58
    3002:	f0 e0       	ldi	r31, 0x00	; 0
    3004:	80 81       	ld	r24, Z
    3006:	48 2f       	mov	r20, r24
    3008:	8b 81       	ldd	r24, Y+3	; 0x03
    300a:	28 2f       	mov	r18, r24
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	02 c0       	rjmp	.+4      	; 0x3018 <DIO_enuSetPinConfigration+0xf4>
    3014:	88 0f       	add	r24, r24
    3016:	99 1f       	adc	r25, r25
    3018:	2a 95       	dec	r18
    301a:	e2 f7       	brpl	.-8      	; 0x3014 <DIO_enuSetPinConfigration+0xf0>
    301c:	80 95       	com	r24
    301e:	84 23       	and	r24, r20
    3020:	8c 93       	st	X, r24
			                                         SET_BIT(PORTA,Copy_enuPinNum);            break;
    3022:	ab e3       	ldi	r26, 0x3B	; 59
    3024:	b0 e0       	ldi	r27, 0x00	; 0
    3026:	eb e3       	ldi	r30, 0x3B	; 59
    3028:	f0 e0       	ldi	r31, 0x00	; 0
    302a:	80 81       	ld	r24, Z
    302c:	48 2f       	mov	r20, r24
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	28 2f       	mov	r18, r24
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	02 2e       	mov	r0, r18
    303a:	02 c0       	rjmp	.+4      	; 0x3040 <DIO_enuSetPinConfigration+0x11c>
    303c:	88 0f       	add	r24, r24
    303e:	99 1f       	adc	r25, r25
    3040:	0a 94       	dec	r0
    3042:	e2 f7       	brpl	.-8      	; 0x303c <DIO_enuSetPinConfigration+0x118>
    3044:	84 2b       	or	r24, r20
    3046:	8c 93       	st	X, r24
    3048:	8f c1       	rjmp	.+798    	; 0x3368 <DIO_enuSetPinConfigration+0x444>
													 
            // Set pin as input with internal pull-Down
			case DIO_enuInputExternalPulldown :      CLR_BIT(DDRA,Copy_enuPinNum) ;            
    304a:	aa e3       	ldi	r26, 0x3A	; 58
    304c:	b0 e0       	ldi	r27, 0x00	; 0
    304e:	ea e3       	ldi	r30, 0x3A	; 58
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
    3054:	48 2f       	mov	r20, r24
    3056:	8b 81       	ldd	r24, Y+3	; 0x03
    3058:	28 2f       	mov	r18, r24
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	02 c0       	rjmp	.+4      	; 0x3066 <DIO_enuSetPinConfigration+0x142>
    3062:	88 0f       	add	r24, r24
    3064:	99 1f       	adc	r25, r25
    3066:	2a 95       	dec	r18
    3068:	e2 f7       	brpl	.-8      	; 0x3062 <DIO_enuSetPinConfigration+0x13e>
    306a:	80 95       	com	r24
    306c:	84 23       	and	r24, r20
    306e:	8c 93       	st	X, r24
                                                     CLR_BIT(PORTA,Copy_enuPinNum);            break;  
    3070:	ab e3       	ldi	r26, 0x3B	; 59
    3072:	b0 e0       	ldi	r27, 0x00	; 0
    3074:	eb e3       	ldi	r30, 0x3B	; 59
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	80 81       	ld	r24, Z
    307a:	48 2f       	mov	r20, r24
    307c:	8b 81       	ldd	r24, Y+3	; 0x03
    307e:	28 2f       	mov	r18, r24
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	81 e0       	ldi	r24, 0x01	; 1
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	02 2e       	mov	r0, r18
    3088:	02 c0       	rjmp	.+4      	; 0x308e <DIO_enuSetPinConfigration+0x16a>
    308a:	88 0f       	add	r24, r24
    308c:	99 1f       	adc	r25, r25
    308e:	0a 94       	dec	r0
    3090:	e2 f7       	brpl	.-8      	; 0x308a <DIO_enuSetPinConfigration+0x166>
    3092:	80 95       	com	r24
    3094:	84 23       	and	r24, r20
    3096:	8c 93       	st	X, r24
    3098:	67 c1       	rjmp	.+718    	; 0x3368 <DIO_enuSetPinConfigration+0x444>
			default :                                                                          break;										 
		 }
           break;

	    case DIO_enuPort_B:
		switch(Copy_enuConfigration)
    309a:	8c 81       	ldd	r24, Y+4	; 0x04
    309c:	28 2f       	mov	r18, r24
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	3a 87       	std	Y+10, r19	; 0x0a
    30a2:	29 87       	std	Y+9, r18	; 0x09
    30a4:	89 85       	ldd	r24, Y+9	; 0x09
    30a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30a8:	81 30       	cpi	r24, 0x01	; 1
    30aa:	91 05       	cpc	r25, r1
    30ac:	f9 f0       	breq	.+62     	; 0x30ec <DIO_enuSetPinConfigration+0x1c8>
    30ae:	29 85       	ldd	r18, Y+9	; 0x09
    30b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    30b2:	22 30       	cpi	r18, 0x02	; 2
    30b4:	31 05       	cpc	r19, r1
    30b6:	09 f4       	brne	.+2      	; 0x30ba <DIO_enuSetPinConfigration+0x196>
    30b8:	40 c0       	rjmp	.+128    	; 0x313a <DIO_enuSetPinConfigration+0x216>
    30ba:	89 85       	ldd	r24, Y+9	; 0x09
    30bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    30be:	00 97       	sbiw	r24, 0x00	; 0
    30c0:	09 f0       	breq	.+2      	; 0x30c4 <DIO_enuSetPinConfigration+0x1a0>
    30c2:	52 c1       	rjmp	.+676    	; 0x3368 <DIO_enuSetPinConfigration+0x444>
		 {  
			// Set pin as output
			case DIO_enuOutput :                     SET_BIT(DDRB,Copy_enuPinNum) ;            break;
    30c4:	a7 e3       	ldi	r26, 0x37	; 55
    30c6:	b0 e0       	ldi	r27, 0x00	; 0
    30c8:	e7 e3       	ldi	r30, 0x37	; 55
    30ca:	f0 e0       	ldi	r31, 0x00	; 0
    30cc:	80 81       	ld	r24, Z
    30ce:	48 2f       	mov	r20, r24
    30d0:	8b 81       	ldd	r24, Y+3	; 0x03
    30d2:	28 2f       	mov	r18, r24
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	81 e0       	ldi	r24, 0x01	; 1
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	02 2e       	mov	r0, r18
    30dc:	02 c0       	rjmp	.+4      	; 0x30e2 <DIO_enuSetPinConfigration+0x1be>
    30de:	88 0f       	add	r24, r24
    30e0:	99 1f       	adc	r25, r25
    30e2:	0a 94       	dec	r0
    30e4:	e2 f7       	brpl	.-8      	; 0x30de <DIO_enuSetPinConfigration+0x1ba>
    30e6:	84 2b       	or	r24, r20
    30e8:	8c 93       	st	X, r24
    30ea:	3e c1       	rjmp	.+636    	; 0x3368 <DIO_enuSetPinConfigration+0x444>
            
			// Set pin as input with internal pull-up
			case DIO_enuInputInternalPullup :        CLR_BIT(DDRB,Copy_enuPinNum) ;      
    30ec:	a7 e3       	ldi	r26, 0x37	; 55
    30ee:	b0 e0       	ldi	r27, 0x00	; 0
    30f0:	e7 e3       	ldi	r30, 0x37	; 55
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	80 81       	ld	r24, Z
    30f6:	48 2f       	mov	r20, r24
    30f8:	8b 81       	ldd	r24, Y+3	; 0x03
    30fa:	28 2f       	mov	r18, r24
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	02 c0       	rjmp	.+4      	; 0x3108 <DIO_enuSetPinConfigration+0x1e4>
    3104:	88 0f       	add	r24, r24
    3106:	99 1f       	adc	r25, r25
    3108:	2a 95       	dec	r18
    310a:	e2 f7       	brpl	.-8      	; 0x3104 <DIO_enuSetPinConfigration+0x1e0>
    310c:	80 95       	com	r24
    310e:	84 23       	and	r24, r20
    3110:	8c 93       	st	X, r24
			                                         SET_BIT(PORTB,Copy_enuPinNum);            break;
    3112:	a8 e3       	ldi	r26, 0x38	; 56
    3114:	b0 e0       	ldi	r27, 0x00	; 0
    3116:	e8 e3       	ldi	r30, 0x38	; 56
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	80 81       	ld	r24, Z
    311c:	48 2f       	mov	r20, r24
    311e:	8b 81       	ldd	r24, Y+3	; 0x03
    3120:	28 2f       	mov	r18, r24
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	02 2e       	mov	r0, r18
    312a:	02 c0       	rjmp	.+4      	; 0x3130 <DIO_enuSetPinConfigration+0x20c>
    312c:	88 0f       	add	r24, r24
    312e:	99 1f       	adc	r25, r25
    3130:	0a 94       	dec	r0
    3132:	e2 f7       	brpl	.-8      	; 0x312c <DIO_enuSetPinConfigration+0x208>
    3134:	84 2b       	or	r24, r20
    3136:	8c 93       	st	X, r24
    3138:	17 c1       	rjmp	.+558    	; 0x3368 <DIO_enuSetPinConfigration+0x444>

            // Set pin as input with internal pull-Down
			case DIO_enuInputExternalPulldown :      CLR_BIT(DDRB,Copy_enuPinNum) ;            
    313a:	a7 e3       	ldi	r26, 0x37	; 55
    313c:	b0 e0       	ldi	r27, 0x00	; 0
    313e:	e7 e3       	ldi	r30, 0x37	; 55
    3140:	f0 e0       	ldi	r31, 0x00	; 0
    3142:	80 81       	ld	r24, Z
    3144:	48 2f       	mov	r20, r24
    3146:	8b 81       	ldd	r24, Y+3	; 0x03
    3148:	28 2f       	mov	r18, r24
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	02 c0       	rjmp	.+4      	; 0x3156 <DIO_enuSetPinConfigration+0x232>
    3152:	88 0f       	add	r24, r24
    3154:	99 1f       	adc	r25, r25
    3156:	2a 95       	dec	r18
    3158:	e2 f7       	brpl	.-8      	; 0x3152 <DIO_enuSetPinConfigration+0x22e>
    315a:	80 95       	com	r24
    315c:	84 23       	and	r24, r20
    315e:	8c 93       	st	X, r24
                                                     CLR_BIT(PORTB,Copy_enuPinNum);            break;  
    3160:	a8 e3       	ldi	r26, 0x38	; 56
    3162:	b0 e0       	ldi	r27, 0x00	; 0
    3164:	e8 e3       	ldi	r30, 0x38	; 56
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	80 81       	ld	r24, Z
    316a:	48 2f       	mov	r20, r24
    316c:	8b 81       	ldd	r24, Y+3	; 0x03
    316e:	28 2f       	mov	r18, r24
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	02 2e       	mov	r0, r18
    3178:	02 c0       	rjmp	.+4      	; 0x317e <DIO_enuSetPinConfigration+0x25a>
    317a:	88 0f       	add	r24, r24
    317c:	99 1f       	adc	r25, r25
    317e:	0a 94       	dec	r0
    3180:	e2 f7       	brpl	.-8      	; 0x317a <DIO_enuSetPinConfigration+0x256>
    3182:	80 95       	com	r24
    3184:	84 23       	and	r24, r20
    3186:	8c 93       	st	X, r24
    3188:	ef c0       	rjmp	.+478    	; 0x3368 <DIO_enuSetPinConfigration+0x444>
			default :                                                                          break;										 
		 }
           break;
 
		case DIO_enuPort_C:
		switch(Copy_enuConfigration)
    318a:	8c 81       	ldd	r24, Y+4	; 0x04
    318c:	28 2f       	mov	r18, r24
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	38 87       	std	Y+8, r19	; 0x08
    3192:	2f 83       	std	Y+7, r18	; 0x07
    3194:	8f 81       	ldd	r24, Y+7	; 0x07
    3196:	98 85       	ldd	r25, Y+8	; 0x08
    3198:	81 30       	cpi	r24, 0x01	; 1
    319a:	91 05       	cpc	r25, r1
    319c:	f9 f0       	breq	.+62     	; 0x31dc <DIO_enuSetPinConfigration+0x2b8>
    319e:	2f 81       	ldd	r18, Y+7	; 0x07
    31a0:	38 85       	ldd	r19, Y+8	; 0x08
    31a2:	22 30       	cpi	r18, 0x02	; 2
    31a4:	31 05       	cpc	r19, r1
    31a6:	09 f4       	brne	.+2      	; 0x31aa <DIO_enuSetPinConfigration+0x286>
    31a8:	40 c0       	rjmp	.+128    	; 0x322a <DIO_enuSetPinConfigration+0x306>
    31aa:	8f 81       	ldd	r24, Y+7	; 0x07
    31ac:	98 85       	ldd	r25, Y+8	; 0x08
    31ae:	00 97       	sbiw	r24, 0x00	; 0
    31b0:	09 f0       	breq	.+2      	; 0x31b4 <DIO_enuSetPinConfigration+0x290>
    31b2:	da c0       	rjmp	.+436    	; 0x3368 <DIO_enuSetPinConfigration+0x444>
		 {
			case DIO_enuOutput :                     SET_BIT(DDRC,Copy_enuPinNum) ;            break;
    31b4:	a4 e3       	ldi	r26, 0x34	; 52
    31b6:	b0 e0       	ldi	r27, 0x00	; 0
    31b8:	e4 e3       	ldi	r30, 0x34	; 52
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	80 81       	ld	r24, Z
    31be:	48 2f       	mov	r20, r24
    31c0:	8b 81       	ldd	r24, Y+3	; 0x03
    31c2:	28 2f       	mov	r18, r24
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	81 e0       	ldi	r24, 0x01	; 1
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	02 2e       	mov	r0, r18
    31cc:	02 c0       	rjmp	.+4      	; 0x31d2 <DIO_enuSetPinConfigration+0x2ae>
    31ce:	88 0f       	add	r24, r24
    31d0:	99 1f       	adc	r25, r25
    31d2:	0a 94       	dec	r0
    31d4:	e2 f7       	brpl	.-8      	; 0x31ce <DIO_enuSetPinConfigration+0x2aa>
    31d6:	84 2b       	or	r24, r20
    31d8:	8c 93       	st	X, r24
    31da:	c6 c0       	rjmp	.+396    	; 0x3368 <DIO_enuSetPinConfigration+0x444>

			case DIO_enuInputInternalPullup :        CLR_BIT(DDRC,Copy_enuPinNum) ;      
    31dc:	a4 e3       	ldi	r26, 0x34	; 52
    31de:	b0 e0       	ldi	r27, 0x00	; 0
    31e0:	e4 e3       	ldi	r30, 0x34	; 52
    31e2:	f0 e0       	ldi	r31, 0x00	; 0
    31e4:	80 81       	ld	r24, Z
    31e6:	48 2f       	mov	r20, r24
    31e8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ea:	28 2f       	mov	r18, r24
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	02 c0       	rjmp	.+4      	; 0x31f8 <DIO_enuSetPinConfigration+0x2d4>
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	2a 95       	dec	r18
    31fa:	e2 f7       	brpl	.-8      	; 0x31f4 <DIO_enuSetPinConfigration+0x2d0>
    31fc:	80 95       	com	r24
    31fe:	84 23       	and	r24, r20
    3200:	8c 93       	st	X, r24
			                                         SET_BIT(PORTC,Copy_enuPinNum);            break;
    3202:	a5 e3       	ldi	r26, 0x35	; 53
    3204:	b0 e0       	ldi	r27, 0x00	; 0
    3206:	e5 e3       	ldi	r30, 0x35	; 53
    3208:	f0 e0       	ldi	r31, 0x00	; 0
    320a:	80 81       	ld	r24, Z
    320c:	48 2f       	mov	r20, r24
    320e:	8b 81       	ldd	r24, Y+3	; 0x03
    3210:	28 2f       	mov	r18, r24
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	02 2e       	mov	r0, r18
    321a:	02 c0       	rjmp	.+4      	; 0x3220 <DIO_enuSetPinConfigration+0x2fc>
    321c:	88 0f       	add	r24, r24
    321e:	99 1f       	adc	r25, r25
    3220:	0a 94       	dec	r0
    3222:	e2 f7       	brpl	.-8      	; 0x321c <DIO_enuSetPinConfigration+0x2f8>
    3224:	84 2b       	or	r24, r20
    3226:	8c 93       	st	X, r24
    3228:	9f c0       	rjmp	.+318    	; 0x3368 <DIO_enuSetPinConfigration+0x444>

			case DIO_enuInputExternalPulldown :      CLR_BIT(DDRC,Copy_enuPinNum) ;            
    322a:	a4 e3       	ldi	r26, 0x34	; 52
    322c:	b0 e0       	ldi	r27, 0x00	; 0
    322e:	e4 e3       	ldi	r30, 0x34	; 52
    3230:	f0 e0       	ldi	r31, 0x00	; 0
    3232:	80 81       	ld	r24, Z
    3234:	48 2f       	mov	r20, r24
    3236:	8b 81       	ldd	r24, Y+3	; 0x03
    3238:	28 2f       	mov	r18, r24
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	81 e0       	ldi	r24, 0x01	; 1
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	02 c0       	rjmp	.+4      	; 0x3246 <DIO_enuSetPinConfigration+0x322>
    3242:	88 0f       	add	r24, r24
    3244:	99 1f       	adc	r25, r25
    3246:	2a 95       	dec	r18
    3248:	e2 f7       	brpl	.-8      	; 0x3242 <DIO_enuSetPinConfigration+0x31e>
    324a:	80 95       	com	r24
    324c:	84 23       	and	r24, r20
    324e:	8c 93       	st	X, r24
                                                     CLR_BIT(PORTC,Copy_enuPinNum);            break;  
    3250:	a5 e3       	ldi	r26, 0x35	; 53
    3252:	b0 e0       	ldi	r27, 0x00	; 0
    3254:	e5 e3       	ldi	r30, 0x35	; 53
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	80 81       	ld	r24, Z
    325a:	48 2f       	mov	r20, r24
    325c:	8b 81       	ldd	r24, Y+3	; 0x03
    325e:	28 2f       	mov	r18, r24
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	02 2e       	mov	r0, r18
    3268:	02 c0       	rjmp	.+4      	; 0x326e <DIO_enuSetPinConfigration+0x34a>
    326a:	88 0f       	add	r24, r24
    326c:	99 1f       	adc	r25, r25
    326e:	0a 94       	dec	r0
    3270:	e2 f7       	brpl	.-8      	; 0x326a <DIO_enuSetPinConfigration+0x346>
    3272:	80 95       	com	r24
    3274:	84 23       	and	r24, r20
    3276:	8c 93       	st	X, r24
    3278:	77 c0       	rjmp	.+238    	; 0x3368 <DIO_enuSetPinConfigration+0x444>
			default :                                                                          break;										 
		 }
           break;

        case DIO_enuPort_D:
		switch(Copy_enuConfigration)
    327a:	8c 81       	ldd	r24, Y+4	; 0x04
    327c:	28 2f       	mov	r18, r24
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	3e 83       	std	Y+6, r19	; 0x06
    3282:	2d 83       	std	Y+5, r18	; 0x05
    3284:	8d 81       	ldd	r24, Y+5	; 0x05
    3286:	9e 81       	ldd	r25, Y+6	; 0x06
    3288:	81 30       	cpi	r24, 0x01	; 1
    328a:	91 05       	cpc	r25, r1
    328c:	f9 f0       	breq	.+62     	; 0x32cc <DIO_enuSetPinConfigration+0x3a8>
    328e:	2d 81       	ldd	r18, Y+5	; 0x05
    3290:	3e 81       	ldd	r19, Y+6	; 0x06
    3292:	22 30       	cpi	r18, 0x02	; 2
    3294:	31 05       	cpc	r19, r1
    3296:	09 f4       	brne	.+2      	; 0x329a <DIO_enuSetPinConfigration+0x376>
    3298:	40 c0       	rjmp	.+128    	; 0x331a <DIO_enuSetPinConfigration+0x3f6>
    329a:	8d 81       	ldd	r24, Y+5	; 0x05
    329c:	9e 81       	ldd	r25, Y+6	; 0x06
    329e:	00 97       	sbiw	r24, 0x00	; 0
    32a0:	09 f0       	breq	.+2      	; 0x32a4 <DIO_enuSetPinConfigration+0x380>
    32a2:	62 c0       	rjmp	.+196    	; 0x3368 <DIO_enuSetPinConfigration+0x444>
		 {
			case DIO_enuOutput :                     SET_BIT(DDRD,Copy_enuPinNum) ;            break;
    32a4:	a1 e3       	ldi	r26, 0x31	; 49
    32a6:	b0 e0       	ldi	r27, 0x00	; 0
    32a8:	e1 e3       	ldi	r30, 0x31	; 49
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	80 81       	ld	r24, Z
    32ae:	48 2f       	mov	r20, r24
    32b0:	8b 81       	ldd	r24, Y+3	; 0x03
    32b2:	28 2f       	mov	r18, r24
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	02 2e       	mov	r0, r18
    32bc:	02 c0       	rjmp	.+4      	; 0x32c2 <DIO_enuSetPinConfigration+0x39e>
    32be:	88 0f       	add	r24, r24
    32c0:	99 1f       	adc	r25, r25
    32c2:	0a 94       	dec	r0
    32c4:	e2 f7       	brpl	.-8      	; 0x32be <DIO_enuSetPinConfigration+0x39a>
    32c6:	84 2b       	or	r24, r20
    32c8:	8c 93       	st	X, r24
    32ca:	4e c0       	rjmp	.+156    	; 0x3368 <DIO_enuSetPinConfigration+0x444>

			case DIO_enuInputInternalPullup :        CLR_BIT(DDRD,Copy_enuPinNum) ;      
    32cc:	a1 e3       	ldi	r26, 0x31	; 49
    32ce:	b0 e0       	ldi	r27, 0x00	; 0
    32d0:	e1 e3       	ldi	r30, 0x31	; 49
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	80 81       	ld	r24, Z
    32d6:	48 2f       	mov	r20, r24
    32d8:	8b 81       	ldd	r24, Y+3	; 0x03
    32da:	28 2f       	mov	r18, r24
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	81 e0       	ldi	r24, 0x01	; 1
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	02 c0       	rjmp	.+4      	; 0x32e8 <DIO_enuSetPinConfigration+0x3c4>
    32e4:	88 0f       	add	r24, r24
    32e6:	99 1f       	adc	r25, r25
    32e8:	2a 95       	dec	r18
    32ea:	e2 f7       	brpl	.-8      	; 0x32e4 <DIO_enuSetPinConfigration+0x3c0>
    32ec:	80 95       	com	r24
    32ee:	84 23       	and	r24, r20
    32f0:	8c 93       	st	X, r24
			                                         SET_BIT(PORTD,Copy_enuPinNum);            break;
    32f2:	a2 e3       	ldi	r26, 0x32	; 50
    32f4:	b0 e0       	ldi	r27, 0x00	; 0
    32f6:	e2 e3       	ldi	r30, 0x32	; 50
    32f8:	f0 e0       	ldi	r31, 0x00	; 0
    32fa:	80 81       	ld	r24, Z
    32fc:	48 2f       	mov	r20, r24
    32fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3300:	28 2f       	mov	r18, r24
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	02 2e       	mov	r0, r18
    330a:	02 c0       	rjmp	.+4      	; 0x3310 <DIO_enuSetPinConfigration+0x3ec>
    330c:	88 0f       	add	r24, r24
    330e:	99 1f       	adc	r25, r25
    3310:	0a 94       	dec	r0
    3312:	e2 f7       	brpl	.-8      	; 0x330c <DIO_enuSetPinConfigration+0x3e8>
    3314:	84 2b       	or	r24, r20
    3316:	8c 93       	st	X, r24
    3318:	27 c0       	rjmp	.+78     	; 0x3368 <DIO_enuSetPinConfigration+0x444>

			case DIO_enuInputExternalPulldown :      CLR_BIT(DDRD,Copy_enuPinNum) ;            
    331a:	a1 e3       	ldi	r26, 0x31	; 49
    331c:	b0 e0       	ldi	r27, 0x00	; 0
    331e:	e1 e3       	ldi	r30, 0x31	; 49
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	80 81       	ld	r24, Z
    3324:	48 2f       	mov	r20, r24
    3326:	8b 81       	ldd	r24, Y+3	; 0x03
    3328:	28 2f       	mov	r18, r24
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	02 c0       	rjmp	.+4      	; 0x3336 <DIO_enuSetPinConfigration+0x412>
    3332:	88 0f       	add	r24, r24
    3334:	99 1f       	adc	r25, r25
    3336:	2a 95       	dec	r18
    3338:	e2 f7       	brpl	.-8      	; 0x3332 <DIO_enuSetPinConfigration+0x40e>
    333a:	80 95       	com	r24
    333c:	84 23       	and	r24, r20
    333e:	8c 93       	st	X, r24
                                                     CLR_BIT(PORTD,Copy_enuPinNum);            break;  
    3340:	a2 e3       	ldi	r26, 0x32	; 50
    3342:	b0 e0       	ldi	r27, 0x00	; 0
    3344:	e2 e3       	ldi	r30, 0x32	; 50
    3346:	f0 e0       	ldi	r31, 0x00	; 0
    3348:	80 81       	ld	r24, Z
    334a:	48 2f       	mov	r20, r24
    334c:	8b 81       	ldd	r24, Y+3	; 0x03
    334e:	28 2f       	mov	r18, r24
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	02 2e       	mov	r0, r18
    3358:	02 c0       	rjmp	.+4      	; 0x335e <DIO_enuSetPinConfigration+0x43a>
    335a:	88 0f       	add	r24, r24
    335c:	99 1f       	adc	r25, r25
    335e:	0a 94       	dec	r0
    3360:	e2 f7       	brpl	.-8      	; 0x335a <DIO_enuSetPinConfigration+0x436>
    3362:	80 95       	com	r24
    3364:	84 23       	and	r24, r20
    3366:	8c 93       	st	X, r24
 
	   }
	   
	   
	}
	return Ret_enuErrorStates ;
    3368:	89 81       	ldd	r24, Y+1	; 0x01
}
    336a:	2e 96       	adiw	r28, 0x0e	; 14
    336c:	0f b6       	in	r0, 0x3f	; 63
    336e:	f8 94       	cli
    3370:	de bf       	out	0x3e, r29	; 62
    3372:	0f be       	out	0x3f, r0	; 63
    3374:	cd bf       	out	0x3d, r28	; 61
    3376:	cf 91       	pop	r28
    3378:	df 91       	pop	r29
    337a:	08 95       	ret

0000337c <DIO_enuSetPortConfigration>:




DIO_enuErrorState_t DIO_enuSetPortConfigration (DIO_enuPORT_OPTS_t Copy_enuPortNum , DIO_enuCONFIGRATIONS_OPTS_t Copy_enuConfigration )
{
    337c:	df 93       	push	r29
    337e:	cf 93       	push	r28
    3380:	cd b7       	in	r28, 0x3d	; 61
    3382:	de b7       	in	r29, 0x3e	; 62
    3384:	2d 97       	sbiw	r28, 0x0d	; 13
    3386:	0f b6       	in	r0, 0x3f	; 63
    3388:	f8 94       	cli
    338a:	de bf       	out	0x3e, r29	; 62
    338c:	0f be       	out	0x3f, r0	; 63
    338e:	cd bf       	out	0x3d, r28	; 61
    3390:	8a 83       	std	Y+2, r24	; 0x02
    3392:	6b 83       	std	Y+3, r22	; 0x03
	DIO_enuErrorState_t Ret_enuErrorStates = DIO_enu_NOK  ;
    3394:	81 e0       	ldi	r24, 0x01	; 1
    3396:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_enuPortNum > DIO_enuPort_D)
    3398:	8a 81       	ldd	r24, Y+2	; 0x02
    339a:	84 30       	cpi	r24, 0x04	; 4
    339c:	18 f0       	brcs	.+6      	; 0x33a4 <DIO_enuSetPortConfigration+0x28>
	 Ret_enuErrorStates = DIO_enu_INVALID_PORT_NUM ;
    339e:	82 e0       	ldi	r24, 0x02	; 2
    33a0:	89 83       	std	Y+1, r24	; 0x01
    33a2:	c6 c0       	rjmp	.+396    	; 0x3530 <DIO_enuSetPortConfigration+0x1b4>
 
   else if(Copy_enuConfigration > DIO_enuInputExternalPulldown)
    33a4:	8b 81       	ldd	r24, Y+3	; 0x03
    33a6:	83 30       	cpi	r24, 0x03	; 3
    33a8:	18 f0       	brcs	.+6      	; 0x33b0 <DIO_enuSetPortConfigration+0x34>
	 Ret_enuErrorStates = DIO_enu_INVALID_CONFIGRATION;
    33aa:	84 e0       	ldi	r24, 0x04	; 4
    33ac:	89 83       	std	Y+1, r24	; 0x01
    33ae:	c0 c0       	rjmp	.+384    	; 0x3530 <DIO_enuSetPortConfigration+0x1b4>
    
	else
	{
		Ret_enuErrorStates = DIO_enu_OK ;
    33b0:	19 82       	std	Y+1, r1	; 0x01
		
		switch (Copy_enuPortNum)
    33b2:	8a 81       	ldd	r24, Y+2	; 0x02
    33b4:	28 2f       	mov	r18, r24
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	3d 87       	std	Y+13, r19	; 0x0d
    33ba:	2c 87       	std	Y+12, r18	; 0x0c
    33bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    33be:	9d 85       	ldd	r25, Y+13	; 0x0d
    33c0:	81 30       	cpi	r24, 0x01	; 1
    33c2:	91 05       	cpc	r25, r1
    33c4:	09 f4       	brne	.+2      	; 0x33c8 <DIO_enuSetPortConfigration+0x4c>
    33c6:	3f c0       	rjmp	.+126    	; 0x3446 <DIO_enuSetPortConfigration+0xca>
    33c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    33ca:	3d 85       	ldd	r19, Y+13	; 0x0d
    33cc:	22 30       	cpi	r18, 0x02	; 2
    33ce:	31 05       	cpc	r19, r1
    33d0:	2c f4       	brge	.+10     	; 0x33dc <DIO_enuSetPortConfigration+0x60>
    33d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    33d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    33d6:	00 97       	sbiw	r24, 0x00	; 0
    33d8:	71 f0       	breq	.+28     	; 0x33f6 <DIO_enuSetPortConfigration+0x7a>
    33da:	aa c0       	rjmp	.+340    	; 0x3530 <DIO_enuSetPortConfigration+0x1b4>
    33dc:	2c 85       	ldd	r18, Y+12	; 0x0c
    33de:	3d 85       	ldd	r19, Y+13	; 0x0d
    33e0:	22 30       	cpi	r18, 0x02	; 2
    33e2:	31 05       	cpc	r19, r1
    33e4:	09 f4       	brne	.+2      	; 0x33e8 <DIO_enuSetPortConfigration+0x6c>
    33e6:	57 c0       	rjmp	.+174    	; 0x3496 <DIO_enuSetPortConfigration+0x11a>
    33e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    33ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    33ec:	83 30       	cpi	r24, 0x03	; 3
    33ee:	91 05       	cpc	r25, r1
    33f0:	09 f4       	brne	.+2      	; 0x33f4 <DIO_enuSetPortConfigration+0x78>
    33f2:	78 c0       	rjmp	.+240    	; 0x34e4 <DIO_enuSetPortConfigration+0x168>
    33f4:	9d c0       	rjmp	.+314    	; 0x3530 <DIO_enuSetPortConfigration+0x1b4>
		{
               case  DIO_enuPort_A:
			   switch(Copy_enuConfigration)
    33f6:	8b 81       	ldd	r24, Y+3	; 0x03
    33f8:	28 2f       	mov	r18, r24
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	3b 87       	std	Y+11, r19	; 0x0b
    33fe:	2a 87       	std	Y+10, r18	; 0x0a
    3400:	8a 85       	ldd	r24, Y+10	; 0x0a
    3402:	9b 85       	ldd	r25, Y+11	; 0x0b
    3404:	81 30       	cpi	r24, 0x01	; 1
    3406:	91 05       	cpc	r25, r1
    3408:	79 f0       	breq	.+30     	; 0x3428 <DIO_enuSetPortConfigration+0xac>
    340a:	2a 85       	ldd	r18, Y+10	; 0x0a
    340c:	3b 85       	ldd	r19, Y+11	; 0x0b
    340e:	22 30       	cpi	r18, 0x02	; 2
    3410:	31 05       	cpc	r19, r1
    3412:	91 f0       	breq	.+36     	; 0x3438 <DIO_enuSetPortConfigration+0xbc>
    3414:	8a 85       	ldd	r24, Y+10	; 0x0a
    3416:	9b 85       	ldd	r25, Y+11	; 0x0b
    3418:	00 97       	sbiw	r24, 0x00	; 0
    341a:	09 f0       	breq	.+2      	; 0x341e <DIO_enuSetPortConfigration+0xa2>
    341c:	89 c0       	rjmp	.+274    	; 0x3530 <DIO_enuSetPortConfigration+0x1b4>
			   {
                 case DIO_enuOutput:
                   DDRA=0xFF;
    341e:	ea e3       	ldi	r30, 0x3A	; 58
    3420:	f0 e0       	ldi	r31, 0x00	; 0
    3422:	8f ef       	ldi	r24, 0xFF	; 255
    3424:	80 83       	st	Z, r24
    3426:	84 c0       	rjmp	.+264    	; 0x3530 <DIO_enuSetPortConfigration+0x1b4>
				 break;

				 case DIO_enuInputInternalPullup:
				 DDRA=0x00;
    3428:	ea e3       	ldi	r30, 0x3A	; 58
    342a:	f0 e0       	ldi	r31, 0x00	; 0
    342c:	10 82       	st	Z, r1
				 PORTA=0xFF;
    342e:	eb e3       	ldi	r30, 0x3B	; 59
    3430:	f0 e0       	ldi	r31, 0x00	; 0
    3432:	8f ef       	ldi	r24, 0xFF	; 255
    3434:	80 83       	st	Z, r24
    3436:	7c c0       	rjmp	.+248    	; 0x3530 <DIO_enuSetPortConfigration+0x1b4>
				 break;

				 case DIO_enuInputExternalPulldown:
				 DDRA=0x00;
    3438:	ea e3       	ldi	r30, 0x3A	; 58
    343a:	f0 e0       	ldi	r31, 0x00	; 0
    343c:	10 82       	st	Z, r1
				 PORTA=0x00;
    343e:	eb e3       	ldi	r30, 0x3B	; 59
    3440:	f0 e0       	ldi	r31, 0x00	; 0
    3442:	10 82       	st	Z, r1
    3444:	75 c0       	rjmp	.+234    	; 0x3530 <DIO_enuSetPortConfigration+0x1b4>
				  default:   break;
			   }
			   break; 	

			   case  DIO_enuPort_B:
			   switch(Copy_enuConfigration)
    3446:	8b 81       	ldd	r24, Y+3	; 0x03
    3448:	28 2f       	mov	r18, r24
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	39 87       	std	Y+9, r19	; 0x09
    344e:	28 87       	std	Y+8, r18	; 0x08
    3450:	88 85       	ldd	r24, Y+8	; 0x08
    3452:	99 85       	ldd	r25, Y+9	; 0x09
    3454:	81 30       	cpi	r24, 0x01	; 1
    3456:	91 05       	cpc	r25, r1
    3458:	79 f0       	breq	.+30     	; 0x3478 <DIO_enuSetPortConfigration+0xfc>
    345a:	28 85       	ldd	r18, Y+8	; 0x08
    345c:	39 85       	ldd	r19, Y+9	; 0x09
    345e:	22 30       	cpi	r18, 0x02	; 2
    3460:	31 05       	cpc	r19, r1
    3462:	91 f0       	breq	.+36     	; 0x3488 <DIO_enuSetPortConfigration+0x10c>
    3464:	88 85       	ldd	r24, Y+8	; 0x08
    3466:	99 85       	ldd	r25, Y+9	; 0x09
    3468:	00 97       	sbiw	r24, 0x00	; 0
    346a:	09 f0       	breq	.+2      	; 0x346e <DIO_enuSetPortConfigration+0xf2>
    346c:	61 c0       	rjmp	.+194    	; 0x3530 <DIO_enuSetPortConfigration+0x1b4>
			   {
                 case DIO_enuOutput:
                   DDRB=0xFF;
    346e:	e7 e3       	ldi	r30, 0x37	; 55
    3470:	f0 e0       	ldi	r31, 0x00	; 0
    3472:	8f ef       	ldi	r24, 0xFF	; 255
    3474:	80 83       	st	Z, r24
    3476:	5c c0       	rjmp	.+184    	; 0x3530 <DIO_enuSetPortConfigration+0x1b4>
				 break;

				 case DIO_enuInputInternalPullup:
				 DDRB=0x00;
    3478:	e7 e3       	ldi	r30, 0x37	; 55
    347a:	f0 e0       	ldi	r31, 0x00	; 0
    347c:	10 82       	st	Z, r1
				 PORTB=0xFF;
    347e:	e8 e3       	ldi	r30, 0x38	; 56
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	8f ef       	ldi	r24, 0xFF	; 255
    3484:	80 83       	st	Z, r24
    3486:	54 c0       	rjmp	.+168    	; 0x3530 <DIO_enuSetPortConfigration+0x1b4>
				 break;

				 case DIO_enuInputExternalPulldown:
				 DDRB=0x00;
    3488:	e7 e3       	ldi	r30, 0x37	; 55
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	10 82       	st	Z, r1
				 PORTB=0x00;
    348e:	e8 e3       	ldi	r30, 0x38	; 56
    3490:	f0 e0       	ldi	r31, 0x00	; 0
    3492:	10 82       	st	Z, r1
    3494:	4d c0       	rjmp	.+154    	; 0x3530 <DIO_enuSetPortConfigration+0x1b4>
				 break;	  
				  default:   break;
			   } 
			   break;
			   case  DIO_enuPort_C:
			   switch(Copy_enuConfigration)
    3496:	8b 81       	ldd	r24, Y+3	; 0x03
    3498:	28 2f       	mov	r18, r24
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	3f 83       	std	Y+7, r19	; 0x07
    349e:	2e 83       	std	Y+6, r18	; 0x06
    34a0:	8e 81       	ldd	r24, Y+6	; 0x06
    34a2:	9f 81       	ldd	r25, Y+7	; 0x07
    34a4:	81 30       	cpi	r24, 0x01	; 1
    34a6:	91 05       	cpc	r25, r1
    34a8:	71 f0       	breq	.+28     	; 0x34c6 <DIO_enuSetPortConfigration+0x14a>
    34aa:	2e 81       	ldd	r18, Y+6	; 0x06
    34ac:	3f 81       	ldd	r19, Y+7	; 0x07
    34ae:	22 30       	cpi	r18, 0x02	; 2
    34b0:	31 05       	cpc	r19, r1
    34b2:	89 f0       	breq	.+34     	; 0x34d6 <DIO_enuSetPortConfigration+0x15a>
    34b4:	8e 81       	ldd	r24, Y+6	; 0x06
    34b6:	9f 81       	ldd	r25, Y+7	; 0x07
    34b8:	00 97       	sbiw	r24, 0x00	; 0
    34ba:	d1 f5       	brne	.+116    	; 0x3530 <DIO_enuSetPortConfigration+0x1b4>
			   {
                 case DIO_enuOutput:
                   DDRC=0xFF;
    34bc:	e4 e3       	ldi	r30, 0x34	; 52
    34be:	f0 e0       	ldi	r31, 0x00	; 0
    34c0:	8f ef       	ldi	r24, 0xFF	; 255
    34c2:	80 83       	st	Z, r24
    34c4:	35 c0       	rjmp	.+106    	; 0x3530 <DIO_enuSetPortConfigration+0x1b4>
				 break;

				 case DIO_enuInputInternalPullup:
				 DDRC=0x00;
    34c6:	e4 e3       	ldi	r30, 0x34	; 52
    34c8:	f0 e0       	ldi	r31, 0x00	; 0
    34ca:	10 82       	st	Z, r1
				 PORTC=0xFF;
    34cc:	e5 e3       	ldi	r30, 0x35	; 53
    34ce:	f0 e0       	ldi	r31, 0x00	; 0
    34d0:	8f ef       	ldi	r24, 0xFF	; 255
    34d2:	80 83       	st	Z, r24
    34d4:	2d c0       	rjmp	.+90     	; 0x3530 <DIO_enuSetPortConfigration+0x1b4>
				 break;

				 case DIO_enuInputExternalPulldown:
				 DDRC=0x00;
    34d6:	e4 e3       	ldi	r30, 0x34	; 52
    34d8:	f0 e0       	ldi	r31, 0x00	; 0
    34da:	10 82       	st	Z, r1
				 PORTC=0x00;
    34dc:	e5 e3       	ldi	r30, 0x35	; 53
    34de:	f0 e0       	ldi	r31, 0x00	; 0
    34e0:	10 82       	st	Z, r1
    34e2:	26 c0       	rjmp	.+76     	; 0x3530 <DIO_enuSetPortConfigration+0x1b4>
				  default:   break;  
			   } 
               break;

			   case  DIO_enuPort_D:
			   switch(Copy_enuConfigration)
    34e4:	8b 81       	ldd	r24, Y+3	; 0x03
    34e6:	28 2f       	mov	r18, r24
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	3d 83       	std	Y+5, r19	; 0x05
    34ec:	2c 83       	std	Y+4, r18	; 0x04
    34ee:	8c 81       	ldd	r24, Y+4	; 0x04
    34f0:	9d 81       	ldd	r25, Y+5	; 0x05
    34f2:	81 30       	cpi	r24, 0x01	; 1
    34f4:	91 05       	cpc	r25, r1
    34f6:	71 f0       	breq	.+28     	; 0x3514 <DIO_enuSetPortConfigration+0x198>
    34f8:	2c 81       	ldd	r18, Y+4	; 0x04
    34fa:	3d 81       	ldd	r19, Y+5	; 0x05
    34fc:	22 30       	cpi	r18, 0x02	; 2
    34fe:	31 05       	cpc	r19, r1
    3500:	89 f0       	breq	.+34     	; 0x3524 <DIO_enuSetPortConfigration+0x1a8>
    3502:	8c 81       	ldd	r24, Y+4	; 0x04
    3504:	9d 81       	ldd	r25, Y+5	; 0x05
    3506:	00 97       	sbiw	r24, 0x00	; 0
    3508:	99 f4       	brne	.+38     	; 0x3530 <DIO_enuSetPortConfigration+0x1b4>
			   {
                 case DIO_enuOutput:
                 DDRD=0xFF;
    350a:	e1 e3       	ldi	r30, 0x31	; 49
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	8f ef       	ldi	r24, 0xFF	; 255
    3510:	80 83       	st	Z, r24
    3512:	0e c0       	rjmp	.+28     	; 0x3530 <DIO_enuSetPortConfigration+0x1b4>
				 break;

				 case DIO_enuInputInternalPullup:
				 DDRD=0x00;
    3514:	e1 e3       	ldi	r30, 0x31	; 49
    3516:	f0 e0       	ldi	r31, 0x00	; 0
    3518:	10 82       	st	Z, r1
				 PORTD=0xFF;
    351a:	e2 e3       	ldi	r30, 0x32	; 50
    351c:	f0 e0       	ldi	r31, 0x00	; 0
    351e:	8f ef       	ldi	r24, 0xFF	; 255
    3520:	80 83       	st	Z, r24
    3522:	06 c0       	rjmp	.+12     	; 0x3530 <DIO_enuSetPortConfigration+0x1b4>
				 break;

				 case DIO_enuInputExternalPulldown:
				 DDRD=0x00;
    3524:	e1 e3       	ldi	r30, 0x31	; 49
    3526:	f0 e0       	ldi	r31, 0x00	; 0
    3528:	10 82       	st	Z, r1
				 PORTD=0x00;
    352a:	e2 e3       	ldi	r30, 0x32	; 50
    352c:	f0 e0       	ldi	r31, 0x00	; 0
    352e:	10 82       	st	Z, r1
			   } 
			   break;
			   default:     break;
		}
	}
	return Ret_enuErrorStates ;	
    3530:	89 81       	ldd	r24, Y+1	; 0x01
}
    3532:	2d 96       	adiw	r28, 0x0d	; 13
    3534:	0f b6       	in	r0, 0x3f	; 63
    3536:	f8 94       	cli
    3538:	de bf       	out	0x3e, r29	; 62
    353a:	0f be       	out	0x3f, r0	; 63
    353c:	cd bf       	out	0x3d, r28	; 61
    353e:	cf 91       	pop	r28
    3540:	df 91       	pop	r29
    3542:	08 95       	ret

00003544 <DIO_enuSetPinValue>:




DIO_enuErrorState_t DIO_enuSetPinValue(MPORT_enuPORT_OPTS_t Copy_enuPortNum , MPORT_enuPIN_OPTS_t Copy_enuPinNum , PORT_enuSTATE_OPTS_t Copy_enuState )
{
    3544:	df 93       	push	r29
    3546:	cf 93       	push	r28
    3548:	cd b7       	in	r28, 0x3d	; 61
    354a:	de b7       	in	r29, 0x3e	; 62
    354c:	2e 97       	sbiw	r28, 0x0e	; 14
    354e:	0f b6       	in	r0, 0x3f	; 63
    3550:	f8 94       	cli
    3552:	de bf       	out	0x3e, r29	; 62
    3554:	0f be       	out	0x3f, r0	; 63
    3556:	cd bf       	out	0x3d, r28	; 61
    3558:	8a 83       	std	Y+2, r24	; 0x02
    355a:	6b 83       	std	Y+3, r22	; 0x03
    355c:	4c 83       	std	Y+4, r20	; 0x04
	DIO_enuErrorState_t Ret_enuErrorStates = DIO_enu_NOK  ;
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_enuPortNum > MPORT_enuPort_D)
    3562:	8a 81       	ldd	r24, Y+2	; 0x02
    3564:	84 30       	cpi	r24, 0x04	; 4
    3566:	18 f0       	brcs	.+6      	; 0x356e <DIO_enuSetPinValue+0x2a>
     Ret_enuErrorStates = DIO_enu_INVALID_PORT_NUM ;
    3568:	82 e0       	ldi	r24, 0x02	; 2
    356a:	89 83       	std	Y+1, r24	; 0x01
    356c:	0d c1       	rjmp	.+538    	; 0x3788 <DIO_enuSetPinValue+0x244>

    else if(Copy_enuPinNum > MPORT_enuPin_7)
    356e:	8b 81       	ldd	r24, Y+3	; 0x03
    3570:	88 30       	cpi	r24, 0x08	; 8
    3572:	18 f0       	brcs	.+6      	; 0x357a <DIO_enuSetPinValue+0x36>
     Ret_enuErrorStates = DIO_enu_INVALID_PIN_NUM ;
    3574:	83 e0       	ldi	r24, 0x03	; 3
    3576:	89 83       	std	Y+1, r24	; 0x01
    3578:	07 c1       	rjmp	.+526    	; 0x3788 <DIO_enuSetPinValue+0x244>
 
    else if(Copy_enuState > MPORT_enuHIGH)
    357a:	8c 81       	ldd	r24, Y+4	; 0x04
    357c:	82 30       	cpi	r24, 0x02	; 2
    357e:	18 f0       	brcs	.+6      	; 0x3586 <DIO_enuSetPinValue+0x42>
     Ret_enuErrorStates = DIO_enu_INVALID_STATE;
    3580:	86 e0       	ldi	r24, 0x06	; 6
    3582:	89 83       	std	Y+1, r24	; 0x01
    3584:	01 c1       	rjmp	.+514    	; 0x3788 <DIO_enuSetPinValue+0x244>
    
    else 
    {
		 Ret_enuErrorStates = DIO_enu_OK  ;
    3586:	19 82       	std	Y+1, r1	; 0x01
       switch (Copy_enuPortNum)
    3588:	8a 81       	ldd	r24, Y+2	; 0x02
    358a:	28 2f       	mov	r18, r24
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	3e 87       	std	Y+14, r19	; 0x0e
    3590:	2d 87       	std	Y+13, r18	; 0x0d
    3592:	8d 85       	ldd	r24, Y+13	; 0x0d
    3594:	9e 85       	ldd	r25, Y+14	; 0x0e
    3596:	81 30       	cpi	r24, 0x01	; 1
    3598:	91 05       	cpc	r25, r1
    359a:	09 f4       	brne	.+2      	; 0x359e <DIO_enuSetPinValue+0x5a>
    359c:	4f c0       	rjmp	.+158    	; 0x363c <DIO_enuSetPinValue+0xf8>
    359e:	2d 85       	ldd	r18, Y+13	; 0x0d
    35a0:	3e 85       	ldd	r19, Y+14	; 0x0e
    35a2:	22 30       	cpi	r18, 0x02	; 2
    35a4:	31 05       	cpc	r19, r1
    35a6:	2c f4       	brge	.+10     	; 0x35b2 <DIO_enuSetPinValue+0x6e>
    35a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    35aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    35ac:	00 97       	sbiw	r24, 0x00	; 0
    35ae:	71 f0       	breq	.+28     	; 0x35cc <DIO_enuSetPinValue+0x88>
    35b0:	eb c0       	rjmp	.+470    	; 0x3788 <DIO_enuSetPinValue+0x244>
    35b2:	2d 85       	ldd	r18, Y+13	; 0x0d
    35b4:	3e 85       	ldd	r19, Y+14	; 0x0e
    35b6:	22 30       	cpi	r18, 0x02	; 2
    35b8:	31 05       	cpc	r19, r1
    35ba:	09 f4       	brne	.+2      	; 0x35be <DIO_enuSetPinValue+0x7a>
    35bc:	77 c0       	rjmp	.+238    	; 0x36ac <DIO_enuSetPinValue+0x168>
    35be:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35c2:	83 30       	cpi	r24, 0x03	; 3
    35c4:	91 05       	cpc	r25, r1
    35c6:	09 f4       	brne	.+2      	; 0x35ca <DIO_enuSetPinValue+0x86>
    35c8:	a9 c0       	rjmp	.+338    	; 0x371c <DIO_enuSetPinValue+0x1d8>
    35ca:	de c0       	rjmp	.+444    	; 0x3788 <DIO_enuSetPinValue+0x244>
       {
         case MPORT_enuPort_A:
         switch (Copy_enuState)
    35cc:	8c 81       	ldd	r24, Y+4	; 0x04
    35ce:	28 2f       	mov	r18, r24
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	3c 87       	std	Y+12, r19	; 0x0c
    35d4:	2b 87       	std	Y+11, r18	; 0x0b
    35d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    35d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    35da:	00 97       	sbiw	r24, 0x00	; 0
    35dc:	d1 f0       	breq	.+52     	; 0x3612 <DIO_enuSetPinValue+0xce>
    35de:	2b 85       	ldd	r18, Y+11	; 0x0b
    35e0:	3c 85       	ldd	r19, Y+12	; 0x0c
    35e2:	21 30       	cpi	r18, 0x01	; 1
    35e4:	31 05       	cpc	r19, r1
    35e6:	09 f0       	breq	.+2      	; 0x35ea <DIO_enuSetPinValue+0xa6>
    35e8:	cf c0       	rjmp	.+414    	; 0x3788 <DIO_enuSetPinValue+0x244>
		 {
            case MPORT_enuHIGH :              SET_BIT(PORTA,Copy_enuPinNum) ;                  break;
    35ea:	ab e3       	ldi	r26, 0x3B	; 59
    35ec:	b0 e0       	ldi	r27, 0x00	; 0
    35ee:	eb e3       	ldi	r30, 0x3B	; 59
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	80 81       	ld	r24, Z
    35f4:	48 2f       	mov	r20, r24
    35f6:	8b 81       	ldd	r24, Y+3	; 0x03
    35f8:	28 2f       	mov	r18, r24
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	81 e0       	ldi	r24, 0x01	; 1
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	02 2e       	mov	r0, r18
    3602:	02 c0       	rjmp	.+4      	; 0x3608 <DIO_enuSetPinValue+0xc4>
    3604:	88 0f       	add	r24, r24
    3606:	99 1f       	adc	r25, r25
    3608:	0a 94       	dec	r0
    360a:	e2 f7       	brpl	.-8      	; 0x3604 <DIO_enuSetPinValue+0xc0>
    360c:	84 2b       	or	r24, r20
    360e:	8c 93       	st	X, r24
    3610:	bb c0       	rjmp	.+374    	; 0x3788 <DIO_enuSetPinValue+0x244>
            case MPORT_enuLOW  :              CLR_BIT(PORTA,Copy_enuPinNum) ;                  break;   
    3612:	ab e3       	ldi	r26, 0x3B	; 59
    3614:	b0 e0       	ldi	r27, 0x00	; 0
    3616:	eb e3       	ldi	r30, 0x3B	; 59
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	80 81       	ld	r24, Z
    361c:	48 2f       	mov	r20, r24
    361e:	8b 81       	ldd	r24, Y+3	; 0x03
    3620:	28 2f       	mov	r18, r24
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	02 2e       	mov	r0, r18
    362a:	02 c0       	rjmp	.+4      	; 0x3630 <DIO_enuSetPinValue+0xec>
    362c:	88 0f       	add	r24, r24
    362e:	99 1f       	adc	r25, r25
    3630:	0a 94       	dec	r0
    3632:	e2 f7       	brpl	.-8      	; 0x362c <DIO_enuSetPinValue+0xe8>
    3634:	80 95       	com	r24
    3636:	84 23       	and	r24, r20
    3638:	8c 93       	st	X, r24
    363a:	a6 c0       	rjmp	.+332    	; 0x3788 <DIO_enuSetPinValue+0x244>
			default:                                                                           break;
		 }
          break;
           case MPORT_enuPort_B:
		   switch (Copy_enuState)
    363c:	8c 81       	ldd	r24, Y+4	; 0x04
    363e:	28 2f       	mov	r18, r24
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	3a 87       	std	Y+10, r19	; 0x0a
    3644:	29 87       	std	Y+9, r18	; 0x09
    3646:	89 85       	ldd	r24, Y+9	; 0x09
    3648:	9a 85       	ldd	r25, Y+10	; 0x0a
    364a:	00 97       	sbiw	r24, 0x00	; 0
    364c:	d1 f0       	breq	.+52     	; 0x3682 <DIO_enuSetPinValue+0x13e>
    364e:	29 85       	ldd	r18, Y+9	; 0x09
    3650:	3a 85       	ldd	r19, Y+10	; 0x0a
    3652:	21 30       	cpi	r18, 0x01	; 1
    3654:	31 05       	cpc	r19, r1
    3656:	09 f0       	breq	.+2      	; 0x365a <DIO_enuSetPinValue+0x116>
    3658:	97 c0       	rjmp	.+302    	; 0x3788 <DIO_enuSetPinValue+0x244>
		 {
            case MPORT_enuHIGH :              SET_BIT(PORTB,Copy_enuPinNum) ;                  break;
    365a:	a8 e3       	ldi	r26, 0x38	; 56
    365c:	b0 e0       	ldi	r27, 0x00	; 0
    365e:	e8 e3       	ldi	r30, 0x38	; 56
    3660:	f0 e0       	ldi	r31, 0x00	; 0
    3662:	80 81       	ld	r24, Z
    3664:	48 2f       	mov	r20, r24
    3666:	8b 81       	ldd	r24, Y+3	; 0x03
    3668:	28 2f       	mov	r18, r24
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	81 e0       	ldi	r24, 0x01	; 1
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	02 2e       	mov	r0, r18
    3672:	02 c0       	rjmp	.+4      	; 0x3678 <DIO_enuSetPinValue+0x134>
    3674:	88 0f       	add	r24, r24
    3676:	99 1f       	adc	r25, r25
    3678:	0a 94       	dec	r0
    367a:	e2 f7       	brpl	.-8      	; 0x3674 <DIO_enuSetPinValue+0x130>
    367c:	84 2b       	or	r24, r20
    367e:	8c 93       	st	X, r24
    3680:	83 c0       	rjmp	.+262    	; 0x3788 <DIO_enuSetPinValue+0x244>
            case MPORT_enuLOW  :              CLR_BIT(PORTB,Copy_enuPinNum) ;                  break;  
    3682:	a8 e3       	ldi	r26, 0x38	; 56
    3684:	b0 e0       	ldi	r27, 0x00	; 0
    3686:	e8 e3       	ldi	r30, 0x38	; 56
    3688:	f0 e0       	ldi	r31, 0x00	; 0
    368a:	80 81       	ld	r24, Z
    368c:	48 2f       	mov	r20, r24
    368e:	8b 81       	ldd	r24, Y+3	; 0x03
    3690:	28 2f       	mov	r18, r24
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	02 2e       	mov	r0, r18
    369a:	02 c0       	rjmp	.+4      	; 0x36a0 <DIO_enuSetPinValue+0x15c>
    369c:	88 0f       	add	r24, r24
    369e:	99 1f       	adc	r25, r25
    36a0:	0a 94       	dec	r0
    36a2:	e2 f7       	brpl	.-8      	; 0x369c <DIO_enuSetPinValue+0x158>
    36a4:	80 95       	com	r24
    36a6:	84 23       	and	r24, r20
    36a8:	8c 93       	st	X, r24
    36aa:	6e c0       	rjmp	.+220    	; 0x3788 <DIO_enuSetPinValue+0x244>
			default:                                                                           break;
 
		 }
          break;
		   case MPORT_enuPort_C:
		   switch (Copy_enuState)
    36ac:	8c 81       	ldd	r24, Y+4	; 0x04
    36ae:	28 2f       	mov	r18, r24
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	38 87       	std	Y+8, r19	; 0x08
    36b4:	2f 83       	std	Y+7, r18	; 0x07
    36b6:	8f 81       	ldd	r24, Y+7	; 0x07
    36b8:	98 85       	ldd	r25, Y+8	; 0x08
    36ba:	00 97       	sbiw	r24, 0x00	; 0
    36bc:	d1 f0       	breq	.+52     	; 0x36f2 <DIO_enuSetPinValue+0x1ae>
    36be:	2f 81       	ldd	r18, Y+7	; 0x07
    36c0:	38 85       	ldd	r19, Y+8	; 0x08
    36c2:	21 30       	cpi	r18, 0x01	; 1
    36c4:	31 05       	cpc	r19, r1
    36c6:	09 f0       	breq	.+2      	; 0x36ca <DIO_enuSetPinValue+0x186>
    36c8:	5f c0       	rjmp	.+190    	; 0x3788 <DIO_enuSetPinValue+0x244>
		 {
            case MPORT_enuHIGH :              SET_BIT(PORTC,Copy_enuPinNum) ;                  break;
    36ca:	a5 e3       	ldi	r26, 0x35	; 53
    36cc:	b0 e0       	ldi	r27, 0x00	; 0
    36ce:	e5 e3       	ldi	r30, 0x35	; 53
    36d0:	f0 e0       	ldi	r31, 0x00	; 0
    36d2:	80 81       	ld	r24, Z
    36d4:	48 2f       	mov	r20, r24
    36d6:	8b 81       	ldd	r24, Y+3	; 0x03
    36d8:	28 2f       	mov	r18, r24
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	81 e0       	ldi	r24, 0x01	; 1
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	02 2e       	mov	r0, r18
    36e2:	02 c0       	rjmp	.+4      	; 0x36e8 <DIO_enuSetPinValue+0x1a4>
    36e4:	88 0f       	add	r24, r24
    36e6:	99 1f       	adc	r25, r25
    36e8:	0a 94       	dec	r0
    36ea:	e2 f7       	brpl	.-8      	; 0x36e4 <DIO_enuSetPinValue+0x1a0>
    36ec:	84 2b       	or	r24, r20
    36ee:	8c 93       	st	X, r24
    36f0:	4b c0       	rjmp	.+150    	; 0x3788 <DIO_enuSetPinValue+0x244>
            case MPORT_enuLOW  :              CLR_BIT(PORTC,Copy_enuPinNum) ;                  break;   
    36f2:	a5 e3       	ldi	r26, 0x35	; 53
    36f4:	b0 e0       	ldi	r27, 0x00	; 0
    36f6:	e5 e3       	ldi	r30, 0x35	; 53
    36f8:	f0 e0       	ldi	r31, 0x00	; 0
    36fa:	80 81       	ld	r24, Z
    36fc:	48 2f       	mov	r20, r24
    36fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3700:	28 2f       	mov	r18, r24
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	81 e0       	ldi	r24, 0x01	; 1
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	02 2e       	mov	r0, r18
    370a:	02 c0       	rjmp	.+4      	; 0x3710 <DIO_enuSetPinValue+0x1cc>
    370c:	88 0f       	add	r24, r24
    370e:	99 1f       	adc	r25, r25
    3710:	0a 94       	dec	r0
    3712:	e2 f7       	brpl	.-8      	; 0x370c <DIO_enuSetPinValue+0x1c8>
    3714:	80 95       	com	r24
    3716:	84 23       	and	r24, r20
    3718:	8c 93       	st	X, r24
    371a:	36 c0       	rjmp	.+108    	; 0x3788 <DIO_enuSetPinValue+0x244>
			default:                                                                           break;

		 }
		  break;
		   case MPORT_enuPort_D:
		   switch (Copy_enuState)
    371c:	8c 81       	ldd	r24, Y+4	; 0x04
    371e:	28 2f       	mov	r18, r24
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	3e 83       	std	Y+6, r19	; 0x06
    3724:	2d 83       	std	Y+5, r18	; 0x05
    3726:	8d 81       	ldd	r24, Y+5	; 0x05
    3728:	9e 81       	ldd	r25, Y+6	; 0x06
    372a:	00 97       	sbiw	r24, 0x00	; 0
    372c:	c9 f0       	breq	.+50     	; 0x3760 <DIO_enuSetPinValue+0x21c>
    372e:	2d 81       	ldd	r18, Y+5	; 0x05
    3730:	3e 81       	ldd	r19, Y+6	; 0x06
    3732:	21 30       	cpi	r18, 0x01	; 1
    3734:	31 05       	cpc	r19, r1
    3736:	41 f5       	brne	.+80     	; 0x3788 <DIO_enuSetPinValue+0x244>
		 {
            case MPORT_enuHIGH :            SET_BIT(PORTD,Copy_enuPinNum) ;                  break;
    3738:	a2 e3       	ldi	r26, 0x32	; 50
    373a:	b0 e0       	ldi	r27, 0x00	; 0
    373c:	e2 e3       	ldi	r30, 0x32	; 50
    373e:	f0 e0       	ldi	r31, 0x00	; 0
    3740:	80 81       	ld	r24, Z
    3742:	48 2f       	mov	r20, r24
    3744:	8b 81       	ldd	r24, Y+3	; 0x03
    3746:	28 2f       	mov	r18, r24
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	02 2e       	mov	r0, r18
    3750:	02 c0       	rjmp	.+4      	; 0x3756 <DIO_enuSetPinValue+0x212>
    3752:	88 0f       	add	r24, r24
    3754:	99 1f       	adc	r25, r25
    3756:	0a 94       	dec	r0
    3758:	e2 f7       	brpl	.-8      	; 0x3752 <DIO_enuSetPinValue+0x20e>
    375a:	84 2b       	or	r24, r20
    375c:	8c 93       	st	X, r24
    375e:	14 c0       	rjmp	.+40     	; 0x3788 <DIO_enuSetPinValue+0x244>
            case MPORT_enuLOW:              CLR_BIT(PORTD,Copy_enuPinNum) ;                  break; 
    3760:	a2 e3       	ldi	r26, 0x32	; 50
    3762:	b0 e0       	ldi	r27, 0x00	; 0
    3764:	e2 e3       	ldi	r30, 0x32	; 50
    3766:	f0 e0       	ldi	r31, 0x00	; 0
    3768:	80 81       	ld	r24, Z
    376a:	48 2f       	mov	r20, r24
    376c:	8b 81       	ldd	r24, Y+3	; 0x03
    376e:	28 2f       	mov	r18, r24
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	81 e0       	ldi	r24, 0x01	; 1
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	02 2e       	mov	r0, r18
    3778:	02 c0       	rjmp	.+4      	; 0x377e <DIO_enuSetPinValue+0x23a>
    377a:	88 0f       	add	r24, r24
    377c:	99 1f       	adc	r25, r25
    377e:	0a 94       	dec	r0
    3780:	e2 f7       	brpl	.-8      	; 0x377a <DIO_enuSetPinValue+0x236>
    3782:	80 95       	com	r24
    3784:	84 23       	and	r24, r20
    3786:	8c 93       	st	X, r24
		 }
		 break;
		default:                                                                           break;
       }
     }
	 return Ret_enuErrorStates ;
    3788:	89 81       	ldd	r24, Y+1	; 0x01
}
    378a:	2e 96       	adiw	r28, 0x0e	; 14
    378c:	0f b6       	in	r0, 0x3f	; 63
    378e:	f8 94       	cli
    3790:	de bf       	out	0x3e, r29	; 62
    3792:	0f be       	out	0x3f, r0	; 63
    3794:	cd bf       	out	0x3d, r28	; 61
    3796:	cf 91       	pop	r28
    3798:	df 91       	pop	r29
    379a:	08 95       	ret

0000379c <DIO_enuSetPortValue>:


DIO_enuErrorState_t DIO_enuSetPortValue(DIO_enuPORT_OPTS_t Copy_enuPortNum ,DIO_enuPORTSTATE_OPTS_t Copy_enuPortState )
{
    379c:	df 93       	push	r29
    379e:	cf 93       	push	r28
    37a0:	00 d0       	rcall	.+0      	; 0x37a2 <DIO_enuSetPortValue+0x6>
    37a2:	00 d0       	rcall	.+0      	; 0x37a4 <DIO_enuSetPortValue+0x8>
    37a4:	0f 92       	push	r0
    37a6:	cd b7       	in	r28, 0x3d	; 61
    37a8:	de b7       	in	r29, 0x3e	; 62
    37aa:	8a 83       	std	Y+2, r24	; 0x02
    37ac:	6b 83       	std	Y+3, r22	; 0x03
	DIO_enuErrorState_t Ret_enuErrorStates = DIO_enu_NOK  ;
    37ae:	81 e0       	ldi	r24, 0x01	; 1
    37b0:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_enuPortNum > DIO_enuPort_D)
    37b2:	8a 81       	ldd	r24, Y+2	; 0x02
    37b4:	84 30       	cpi	r24, 0x04	; 4
    37b6:	18 f0       	brcs	.+6      	; 0x37be <DIO_enuSetPortValue+0x22>
     Ret_enuErrorStates = DIO_enu_INVALID_PORT_NUM ;
    37b8:	82 e0       	ldi	r24, 0x02	; 2
    37ba:	89 83       	std	Y+1, r24	; 0x01
    37bc:	33 c0       	rjmp	.+102    	; 0x3824 <DIO_enuSetPortValue+0x88>
    else if(Copy_enuPortState > DIO_enuPortHigh)
     Ret_enuErrorStates = DIO_enu_INVALID_STATE;
     
	 else 
	 {
           Ret_enuErrorStates = DIO_enu_OK  ;
    37be:	19 82       	std	Y+1, r1	; 0x01

		  switch(Copy_enuPortNum)
    37c0:	8a 81       	ldd	r24, Y+2	; 0x02
    37c2:	28 2f       	mov	r18, r24
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	3d 83       	std	Y+5, r19	; 0x05
    37c8:	2c 83       	std	Y+4, r18	; 0x04
    37ca:	8c 81       	ldd	r24, Y+4	; 0x04
    37cc:	9d 81       	ldd	r25, Y+5	; 0x05
    37ce:	81 30       	cpi	r24, 0x01	; 1
    37d0:	91 05       	cpc	r25, r1
    37d2:	d1 f0       	breq	.+52     	; 0x3808 <DIO_enuSetPortValue+0x6c>
    37d4:	2c 81       	ldd	r18, Y+4	; 0x04
    37d6:	3d 81       	ldd	r19, Y+5	; 0x05
    37d8:	22 30       	cpi	r18, 0x02	; 2
    37da:	31 05       	cpc	r19, r1
    37dc:	2c f4       	brge	.+10     	; 0x37e8 <DIO_enuSetPortValue+0x4c>
    37de:	8c 81       	ldd	r24, Y+4	; 0x04
    37e0:	9d 81       	ldd	r25, Y+5	; 0x05
    37e2:	00 97       	sbiw	r24, 0x00	; 0
    37e4:	61 f0       	breq	.+24     	; 0x37fe <DIO_enuSetPortValue+0x62>
    37e6:	1e c0       	rjmp	.+60     	; 0x3824 <DIO_enuSetPortValue+0x88>
    37e8:	2c 81       	ldd	r18, Y+4	; 0x04
    37ea:	3d 81       	ldd	r19, Y+5	; 0x05
    37ec:	22 30       	cpi	r18, 0x02	; 2
    37ee:	31 05       	cpc	r19, r1
    37f0:	81 f0       	breq	.+32     	; 0x3812 <DIO_enuSetPortValue+0x76>
    37f2:	8c 81       	ldd	r24, Y+4	; 0x04
    37f4:	9d 81       	ldd	r25, Y+5	; 0x05
    37f6:	83 30       	cpi	r24, 0x03	; 3
    37f8:	91 05       	cpc	r25, r1
    37fa:	81 f0       	breq	.+32     	; 0x381c <DIO_enuSetPortValue+0x80>
    37fc:	13 c0       	rjmp	.+38     	; 0x3824 <DIO_enuSetPortValue+0x88>
		  {
            case DIO_enuPort_A :       PORTA = Copy_enuPortState ;             break;
    37fe:	eb e3       	ldi	r30, 0x3B	; 59
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	8b 81       	ldd	r24, Y+3	; 0x03
    3804:	80 83       	st	Z, r24
    3806:	0e c0       	rjmp	.+28     	; 0x3824 <DIO_enuSetPortValue+0x88>
            case DIO_enuPort_B :       PORTB = Copy_enuPortState ;             break;
    3808:	e8 e3       	ldi	r30, 0x38	; 56
    380a:	f0 e0       	ldi	r31, 0x00	; 0
    380c:	8b 81       	ldd	r24, Y+3	; 0x03
    380e:	80 83       	st	Z, r24
    3810:	09 c0       	rjmp	.+18     	; 0x3824 <DIO_enuSetPortValue+0x88>
			case DIO_enuPort_C :       PORTC = Copy_enuPortState ;             break;
    3812:	e5 e3       	ldi	r30, 0x35	; 53
    3814:	f0 e0       	ldi	r31, 0x00	; 0
    3816:	8b 81       	ldd	r24, Y+3	; 0x03
    3818:	80 83       	st	Z, r24
    381a:	04 c0       	rjmp	.+8      	; 0x3824 <DIO_enuSetPortValue+0x88>
			case DIO_enuPort_D :       PORTD = Copy_enuPortState ;             break;
    381c:	e2 e3       	ldi	r30, 0x32	; 50
    381e:	f0 e0       	ldi	r31, 0x00	; 0
    3820:	8b 81       	ldd	r24, Y+3	; 0x03
    3822:	80 83       	st	Z, r24
            default:                                                           break;			
		  }
			
			
     }
   return Ret_enuErrorStates ;
    3824:	89 81       	ldd	r24, Y+1	; 0x01
}
    3826:	0f 90       	pop	r0
    3828:	0f 90       	pop	r0
    382a:	0f 90       	pop	r0
    382c:	0f 90       	pop	r0
    382e:	0f 90       	pop	r0
    3830:	cf 91       	pop	r28
    3832:	df 91       	pop	r29
    3834:	08 95       	ret

00003836 <DIO_enuGetPinValue>:



DIO_enuErrorState_t DIO_enuGetPinValue(MPORT_enuPORT_OPTS_t Copy_enuPortNum , MPORT_enuPIN_OPTS_t Copy_enuPinNum , u8* Add_pu8PinValue)
{
    3836:	df 93       	push	r29
    3838:	cf 93       	push	r28
    383a:	cd b7       	in	r28, 0x3d	; 61
    383c:	de b7       	in	r29, 0x3e	; 62
    383e:	27 97       	sbiw	r28, 0x07	; 7
    3840:	0f b6       	in	r0, 0x3f	; 63
    3842:	f8 94       	cli
    3844:	de bf       	out	0x3e, r29	; 62
    3846:	0f be       	out	0x3f, r0	; 63
    3848:	cd bf       	out	0x3d, r28	; 61
    384a:	8a 83       	std	Y+2, r24	; 0x02
    384c:	6b 83       	std	Y+3, r22	; 0x03
    384e:	5d 83       	std	Y+5, r21	; 0x05
    3850:	4c 83       	std	Y+4, r20	; 0x04
	DIO_enuErrorState_t Ret_enuErrorStates = DIO_enu_NOK  ;
    3852:	81 e0       	ldi	r24, 0x01	; 1
    3854:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_enuPortNum > MPORT_enuPort_D)
    3856:	8a 81       	ldd	r24, Y+2	; 0x02
    3858:	84 30       	cpi	r24, 0x04	; 4
    385a:	18 f0       	brcs	.+6      	; 0x3862 <DIO_enuGetPinValue+0x2c>
     Ret_enuErrorStates = DIO_enu_INVALID_PORT_NUM ;
    385c:	82 e0       	ldi	r24, 0x02	; 2
    385e:	89 83       	std	Y+1, r24	; 0x01
    3860:	7e c0       	rjmp	.+252    	; 0x395e <DIO_enuGetPinValue+0x128>

    else if(Copy_enuPinNum > MPORT_enuPin_7)
    3862:	8b 81       	ldd	r24, Y+3	; 0x03
    3864:	88 30       	cpi	r24, 0x08	; 8
    3866:	18 f0       	brcs	.+6      	; 0x386e <DIO_enuGetPinValue+0x38>
     Ret_enuErrorStates = DIO_enu_INVALID_PIN_NUM ;
    3868:	83 e0       	ldi	r24, 0x03	; 3
    386a:	89 83       	std	Y+1, r24	; 0x01
    386c:	78 c0       	rjmp	.+240    	; 0x395e <DIO_enuGetPinValue+0x128>
    
	else if(Add_pu8PinValue == NULL)
    386e:	8c 81       	ldd	r24, Y+4	; 0x04
    3870:	9d 81       	ldd	r25, Y+5	; 0x05
    3872:	00 97       	sbiw	r24, 0x00	; 0
    3874:	19 f4       	brne	.+6      	; 0x387c <DIO_enuGetPinValue+0x46>
     Ret_enuErrorStates = DIO_enu_NULL_PTR;
    3876:	85 e0       	ldi	r24, 0x05	; 5
    3878:	89 83       	std	Y+1, r24	; 0x01
    387a:	71 c0       	rjmp	.+226    	; 0x395e <DIO_enuGetPinValue+0x128>

	else
	{
		 Ret_enuErrorStates = DIO_enu_OK  ;               
    387c:	19 82       	std	Y+1, r1	; 0x01
        switch (Copy_enuPortNum)
    387e:	8a 81       	ldd	r24, Y+2	; 0x02
    3880:	28 2f       	mov	r18, r24
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	3f 83       	std	Y+7, r19	; 0x07
    3886:	2e 83       	std	Y+6, r18	; 0x06
    3888:	4e 81       	ldd	r20, Y+6	; 0x06
    388a:	5f 81       	ldd	r21, Y+7	; 0x07
    388c:	41 30       	cpi	r20, 0x01	; 1
    388e:	51 05       	cpc	r21, r1
    3890:	59 f1       	breq	.+86     	; 0x38e8 <DIO_enuGetPinValue+0xb2>
    3892:	8e 81       	ldd	r24, Y+6	; 0x06
    3894:	9f 81       	ldd	r25, Y+7	; 0x07
    3896:	82 30       	cpi	r24, 0x02	; 2
    3898:	91 05       	cpc	r25, r1
    389a:	34 f4       	brge	.+12     	; 0x38a8 <DIO_enuGetPinValue+0x72>
    389c:	2e 81       	ldd	r18, Y+6	; 0x06
    389e:	3f 81       	ldd	r19, Y+7	; 0x07
    38a0:	21 15       	cp	r18, r1
    38a2:	31 05       	cpc	r19, r1
    38a4:	69 f0       	breq	.+26     	; 0x38c0 <DIO_enuGetPinValue+0x8a>
    38a6:	5b c0       	rjmp	.+182    	; 0x395e <DIO_enuGetPinValue+0x128>
    38a8:	4e 81       	ldd	r20, Y+6	; 0x06
    38aa:	5f 81       	ldd	r21, Y+7	; 0x07
    38ac:	42 30       	cpi	r20, 0x02	; 2
    38ae:	51 05       	cpc	r21, r1
    38b0:	79 f1       	breq	.+94     	; 0x3910 <DIO_enuGetPinValue+0xda>
    38b2:	8e 81       	ldd	r24, Y+6	; 0x06
    38b4:	9f 81       	ldd	r25, Y+7	; 0x07
    38b6:	83 30       	cpi	r24, 0x03	; 3
    38b8:	91 05       	cpc	r25, r1
    38ba:	09 f4       	brne	.+2      	; 0x38be <DIO_enuGetPinValue+0x88>
    38bc:	3d c0       	rjmp	.+122    	; 0x3938 <DIO_enuGetPinValue+0x102>
    38be:	4f c0       	rjmp	.+158    	; 0x395e <DIO_enuGetPinValue+0x128>
        {
            case MPORT_enuPort_A: *Add_pu8PinValue = GET_BIT(PINA,Copy_enuPinNum);              break;
    38c0:	e9 e3       	ldi	r30, 0x39	; 57
    38c2:	f0 e0       	ldi	r31, 0x00	; 0
    38c4:	80 81       	ld	r24, Z
    38c6:	28 2f       	mov	r18, r24
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	8b 81       	ldd	r24, Y+3	; 0x03
    38cc:	88 2f       	mov	r24, r24
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	a9 01       	movw	r20, r18
    38d2:	02 c0       	rjmp	.+4      	; 0x38d8 <DIO_enuGetPinValue+0xa2>
    38d4:	55 95       	asr	r21
    38d6:	47 95       	ror	r20
    38d8:	8a 95       	dec	r24
    38da:	e2 f7       	brpl	.-8      	; 0x38d4 <DIO_enuGetPinValue+0x9e>
    38dc:	ca 01       	movw	r24, r20
    38de:	81 70       	andi	r24, 0x01	; 1
    38e0:	ec 81       	ldd	r30, Y+4	; 0x04
    38e2:	fd 81       	ldd	r31, Y+5	; 0x05
    38e4:	80 83       	st	Z, r24
    38e6:	3b c0       	rjmp	.+118    	; 0x395e <DIO_enuGetPinValue+0x128>
			case MPORT_enuPort_B: *Add_pu8PinValue = GET_BIT(PINB,Copy_enuPinNum);              break;
    38e8:	e6 e3       	ldi	r30, 0x36	; 54
    38ea:	f0 e0       	ldi	r31, 0x00	; 0
    38ec:	80 81       	ld	r24, Z
    38ee:	28 2f       	mov	r18, r24
    38f0:	30 e0       	ldi	r19, 0x00	; 0
    38f2:	8b 81       	ldd	r24, Y+3	; 0x03
    38f4:	88 2f       	mov	r24, r24
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	a9 01       	movw	r20, r18
    38fa:	02 c0       	rjmp	.+4      	; 0x3900 <DIO_enuGetPinValue+0xca>
    38fc:	55 95       	asr	r21
    38fe:	47 95       	ror	r20
    3900:	8a 95       	dec	r24
    3902:	e2 f7       	brpl	.-8      	; 0x38fc <DIO_enuGetPinValue+0xc6>
    3904:	ca 01       	movw	r24, r20
    3906:	81 70       	andi	r24, 0x01	; 1
    3908:	ec 81       	ldd	r30, Y+4	; 0x04
    390a:	fd 81       	ldd	r31, Y+5	; 0x05
    390c:	80 83       	st	Z, r24
    390e:	27 c0       	rjmp	.+78     	; 0x395e <DIO_enuGetPinValue+0x128>
            case MPORT_enuPort_C: *Add_pu8PinValue = GET_BIT(PINC,Copy_enuPinNum);              break;
    3910:	e3 e3       	ldi	r30, 0x33	; 51
    3912:	f0 e0       	ldi	r31, 0x00	; 0
    3914:	80 81       	ld	r24, Z
    3916:	28 2f       	mov	r18, r24
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	8b 81       	ldd	r24, Y+3	; 0x03
    391c:	88 2f       	mov	r24, r24
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	a9 01       	movw	r20, r18
    3922:	02 c0       	rjmp	.+4      	; 0x3928 <DIO_enuGetPinValue+0xf2>
    3924:	55 95       	asr	r21
    3926:	47 95       	ror	r20
    3928:	8a 95       	dec	r24
    392a:	e2 f7       	brpl	.-8      	; 0x3924 <DIO_enuGetPinValue+0xee>
    392c:	ca 01       	movw	r24, r20
    392e:	81 70       	andi	r24, 0x01	; 1
    3930:	ec 81       	ldd	r30, Y+4	; 0x04
    3932:	fd 81       	ldd	r31, Y+5	; 0x05
    3934:	80 83       	st	Z, r24
    3936:	13 c0       	rjmp	.+38     	; 0x395e <DIO_enuGetPinValue+0x128>
            case MPORT_enuPort_D: *Add_pu8PinValue = GET_BIT(PIND,Copy_enuPinNum);              break;
    3938:	e0 e3       	ldi	r30, 0x30	; 48
    393a:	f0 e0       	ldi	r31, 0x00	; 0
    393c:	80 81       	ld	r24, Z
    393e:	28 2f       	mov	r18, r24
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	8b 81       	ldd	r24, Y+3	; 0x03
    3944:	88 2f       	mov	r24, r24
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	a9 01       	movw	r20, r18
    394a:	02 c0       	rjmp	.+4      	; 0x3950 <DIO_enuGetPinValue+0x11a>
    394c:	55 95       	asr	r21
    394e:	47 95       	ror	r20
    3950:	8a 95       	dec	r24
    3952:	e2 f7       	brpl	.-8      	; 0x394c <DIO_enuGetPinValue+0x116>
    3954:	ca 01       	movw	r24, r20
    3956:	81 70       	andi	r24, 0x01	; 1
    3958:	ec 81       	ldd	r30, Y+4	; 0x04
    395a:	fd 81       	ldd	r31, Y+5	; 0x05
    395c:	80 83       	st	Z, r24
            default:                                                                            break;
	   }  

   }
   return Ret_enuErrorStates ;
    395e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3960:	27 96       	adiw	r28, 0x07	; 7
    3962:	0f b6       	in	r0, 0x3f	; 63
    3964:	f8 94       	cli
    3966:	de bf       	out	0x3e, r29	; 62
    3968:	0f be       	out	0x3f, r0	; 63
    396a:	cd bf       	out	0x3d, r28	; 61
    396c:	cf 91       	pop	r28
    396e:	df 91       	pop	r29
    3970:	08 95       	ret

00003972 <HTEMPSENSOR_u16TEMP_SENSOR_Init>:




u16 HTEMPSENSOR_u16TEMP_SENSOR_Init(u8 Copy_u8Channel)
{
    3972:	df 93       	push	r29
    3974:	cf 93       	push	r28
    3976:	00 d0       	rcall	.+0      	; 0x3978 <HTEMPSENSOR_u16TEMP_SENSOR_Init+0x6>
    3978:	00 d0       	rcall	.+0      	; 0x397a <HTEMPSENSOR_u16TEMP_SENSOR_Init+0x8>
    397a:	0f 92       	push	r0
    397c:	cd b7       	in	r28, 0x3d	; 61
    397e:	de b7       	in	r29, 0x3e	; 62
    3980:	8d 83       	std	Y+5, r24	; 0x05
////	    *LOC_u16Digital_Step = rounded_temperature;
//
//	    return rounded_temperature;


     u16 result = 0;
    3982:	1c 82       	std	Y+4, r1	; 0x04
    3984:	1b 82       	std	Y+3, r1	; 0x03
     MADC_u8StartConversionSync(Copy_u8Channel, &result);
    3986:	9e 01       	movw	r18, r28
    3988:	2d 5f       	subi	r18, 0xFD	; 253
    398a:	3f 4f       	sbci	r19, 0xFF	; 255
    398c:	8d 81       	ldd	r24, Y+5	; 0x05
    398e:	b9 01       	movw	r22, r18
    3990:	0e 94 c6 12 	call	0x258c	; 0x258c <MADC_u8StartConversionSync>
     u16 temperature = ((u32)(result * (u32)(REFRENCE_VOLTAGE * 1000)) / 1024UL) / 100;
    3994:	8b 81       	ldd	r24, Y+3	; 0x03
    3996:	9c 81       	ldd	r25, Y+4	; 0x04
    3998:	cc 01       	movw	r24, r24
    399a:	a0 e0       	ldi	r26, 0x00	; 0
    399c:	b0 e0       	ldi	r27, 0x00	; 0
    399e:	28 e8       	ldi	r18, 0x88	; 136
    39a0:	33 e1       	ldi	r19, 0x13	; 19
    39a2:	40 e0       	ldi	r20, 0x00	; 0
    39a4:	50 e0       	ldi	r21, 0x00	; 0
    39a6:	bc 01       	movw	r22, r24
    39a8:	cd 01       	movw	r24, r26
    39aa:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
    39ae:	dc 01       	movw	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	20 e0       	ldi	r18, 0x00	; 0
    39b4:	30 e9       	ldi	r19, 0x90	; 144
    39b6:	41 e0       	ldi	r20, 0x01	; 1
    39b8:	50 e0       	ldi	r21, 0x00	; 0
    39ba:	bc 01       	movw	r22, r24
    39bc:	cd 01       	movw	r24, r26
    39be:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
    39c2:	da 01       	movw	r26, r20
    39c4:	c9 01       	movw	r24, r18
    39c6:	9a 83       	std	Y+2, r25	; 0x02
    39c8:	89 83       	std	Y+1, r24	; 0x01
     return temperature;
    39ca:	89 81       	ldd	r24, Y+1	; 0x01
    39cc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    39ce:	0f 90       	pop	r0
    39d0:	0f 90       	pop	r0
    39d2:	0f 90       	pop	r0
    39d4:	0f 90       	pop	r0
    39d6:	0f 90       	pop	r0
    39d8:	cf 91       	pop	r28
    39da:	df 91       	pop	r29
    39dc:	08 95       	ret

000039de <HLDRSENSOR_GetValue>:
#include "../../LIB/STD_TYPES.h"
#include "HLDR_SENSOR_interface.h"

#define REFRENCE_VOLTAGE 5
u16 HLDRSENSOR_GetValue(u8 Copy_u8Channel)
{
    39de:	df 93       	push	r29
    39e0:	cf 93       	push	r28
    39e2:	00 d0       	rcall	.+0      	; 0x39e4 <HLDRSENSOR_GetValue+0x6>
    39e4:	00 d0       	rcall	.+0      	; 0x39e6 <HLDRSENSOR_GetValue+0x8>
    39e6:	0f 92       	push	r0
    39e8:	cd b7       	in	r28, 0x3d	; 61
    39ea:	de b7       	in	r29, 0x3e	; 62
    39ec:	8d 83       	std	Y+5, r24	; 0x05
         u16 result = 0;
    39ee:	1c 82       	std	Y+4, r1	; 0x04
    39f0:	1b 82       	std	Y+3, r1	; 0x03
	     MADC_u8StartConversionSync(Copy_u8Channel, &result);
    39f2:	8d 81       	ldd	r24, Y+5	; 0x05
    39f4:	88 2f       	mov	r24, r24
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	9e 01       	movw	r18, r28
    39fa:	2d 5f       	subi	r18, 0xFD	; 253
    39fc:	3f 4f       	sbci	r19, 0xFF	; 255
    39fe:	b9 01       	movw	r22, r18
    3a00:	0e 94 c6 12 	call	0x258c	; 0x258c <MADC_u8StartConversionSync>
	     u16 Light = ((u32)(result * (u32)(REFRENCE_VOLTAGE * 1000)) / 1024UL) ;
    3a04:	8b 81       	ldd	r24, Y+3	; 0x03
    3a06:	9c 81       	ldd	r25, Y+4	; 0x04
    3a08:	cc 01       	movw	r24, r24
    3a0a:	a0 e0       	ldi	r26, 0x00	; 0
    3a0c:	b0 e0       	ldi	r27, 0x00	; 0
    3a0e:	28 e8       	ldi	r18, 0x88	; 136
    3a10:	33 e1       	ldi	r19, 0x13	; 19
    3a12:	40 e0       	ldi	r20, 0x00	; 0
    3a14:	50 e0       	ldi	r21, 0x00	; 0
    3a16:	bc 01       	movw	r22, r24
    3a18:	cd 01       	movw	r24, r26
    3a1a:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
    3a1e:	dc 01       	movw	r26, r24
    3a20:	cb 01       	movw	r24, r22
    3a22:	07 2e       	mov	r0, r23
    3a24:	7a e0       	ldi	r23, 0x0A	; 10
    3a26:	b6 95       	lsr	r27
    3a28:	a7 95       	ror	r26
    3a2a:	97 95       	ror	r25
    3a2c:	87 95       	ror	r24
    3a2e:	7a 95       	dec	r23
    3a30:	d1 f7       	brne	.-12     	; 0x3a26 <HLDRSENSOR_GetValue+0x48>
    3a32:	70 2d       	mov	r23, r0
    3a34:	9a 83       	std	Y+2, r25	; 0x02
    3a36:	89 83       	std	Y+1, r24	; 0x01
	     return Light;
    3a38:	89 81       	ldd	r24, Y+1	; 0x01
    3a3a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3a3c:	0f 90       	pop	r0
    3a3e:	0f 90       	pop	r0
    3a40:	0f 90       	pop	r0
    3a42:	0f 90       	pop	r0
    3a44:	0f 90       	pop	r0
    3a46:	cf 91       	pop	r28
    3a48:	df 91       	pop	r29
    3a4a:	08 95       	ret

00003a4c <HLCD_enuLCDPinConfigration>:


extern  HLCD_strLCDPinConfigration LCD_Config;

HLCD_enuErrorStatus_t HLCD_enuLCDPinConfigration(void)
{
    3a4c:	df 93       	push	r29
    3a4e:	cf 93       	push	r28
    3a50:	00 d0       	rcall	.+0      	; 0x3a52 <HLCD_enuLCDPinConfigration+0x6>
    3a52:	00 d0       	rcall	.+0      	; 0x3a54 <HLCD_enuLCDPinConfigration+0x8>
    3a54:	cd b7       	in	r28, 0x3d	; 61
    3a56:	de b7       	in	r29, 0x3e	; 62
	HLCD_enuErrorStatus_t Ret_enuLCDErrorStatus = HLCD_enuOK;
    3a58:	19 82       	std	Y+1, r1	; 0x01
	/*********************************************ALL PINS****************************************************/

	/*********************************************DATABIT0****************************************************/


	LOC_strCurrentLCD.Port = LCD_Config.DATABIT0.PortNum;
    3a5a:	80 91 19 02 	lds	r24, 0x0219
    3a5e:	8a 83       	std	Y+2, r24	; 0x02
	LOC_strCurrentLCD.Pin  = LCD_Config.DATABIT0.PinNum ;
    3a60:	80 91 1a 02 	lds	r24, 0x021A
    3a64:	8b 83       	std	Y+3, r24	; 0x03
	LOC_strCurrentLCD.Mode = MPORT_enu_OUTPUT_LOW;
    3a66:	83 e0       	ldi	r24, 0x03	; 3
    3a68:	8c 83       	std	Y+4, r24	; 0x04
	Ret_enuLCDErrorStatus = MPORT_enuSetConfig(&LOC_strCurrentLCD);
    3a6a:	ce 01       	movw	r24, r28
    3a6c:	02 96       	adiw	r24, 0x02	; 2
    3a6e:	0e 94 00 14 	call	0x2800	; 0x2800 <MPORT_enuSetConfig>
    3a72:	89 83       	std	Y+1, r24	; 0x01

	/*********************************************DATABIT1****************************************************/

	LOC_strCurrentLCD.Port = LCD_Config.DATABIT1.PortNum;
    3a74:	80 91 1b 02 	lds	r24, 0x021B
    3a78:	8a 83       	std	Y+2, r24	; 0x02
	LOC_strCurrentLCD.Pin  = LCD_Config.DATABIT1.PinNum ;
    3a7a:	80 91 1c 02 	lds	r24, 0x021C
    3a7e:	8b 83       	std	Y+3, r24	; 0x03
	LOC_strCurrentLCD.Mode = MPORT_enu_OUTPUT_LOW;
    3a80:	83 e0       	ldi	r24, 0x03	; 3
    3a82:	8c 83       	std	Y+4, r24	; 0x04
	Ret_enuLCDErrorStatus = MPORT_enuSetConfig(&LOC_strCurrentLCD);
    3a84:	ce 01       	movw	r24, r28
    3a86:	02 96       	adiw	r24, 0x02	; 2
    3a88:	0e 94 00 14 	call	0x2800	; 0x2800 <MPORT_enuSetConfig>
    3a8c:	89 83       	std	Y+1, r24	; 0x01

	/*********************************************DATABIT2****************************************************/

	LOC_strCurrentLCD.Port = LCD_Config.DATABIT2.PortNum;
    3a8e:	80 91 1d 02 	lds	r24, 0x021D
    3a92:	8a 83       	std	Y+2, r24	; 0x02
	LOC_strCurrentLCD.Pin  = LCD_Config.DATABIT2.PinNum ;
    3a94:	80 91 1e 02 	lds	r24, 0x021E
    3a98:	8b 83       	std	Y+3, r24	; 0x03
	LOC_strCurrentLCD.Mode = MPORT_enu_OUTPUT_LOW;
    3a9a:	83 e0       	ldi	r24, 0x03	; 3
    3a9c:	8c 83       	std	Y+4, r24	; 0x04
	Ret_enuLCDErrorStatus = MPORT_enuSetConfig(&LOC_strCurrentLCD);
    3a9e:	ce 01       	movw	r24, r28
    3aa0:	02 96       	adiw	r24, 0x02	; 2
    3aa2:	0e 94 00 14 	call	0x2800	; 0x2800 <MPORT_enuSetConfig>
    3aa6:	89 83       	std	Y+1, r24	; 0x01

	/*********************************************DATABIT3****************************************************/

	LOC_strCurrentLCD.Port = LCD_Config.DATABIT3.PortNum;
    3aa8:	80 91 1f 02 	lds	r24, 0x021F
    3aac:	8a 83       	std	Y+2, r24	; 0x02
	LOC_strCurrentLCD.Pin  = LCD_Config.DATABIT3.PinNum ;
    3aae:	80 91 20 02 	lds	r24, 0x0220
    3ab2:	8b 83       	std	Y+3, r24	; 0x03
	LOC_strCurrentLCD.Mode = MPORT_enu_OUTPUT_LOW;
    3ab4:	83 e0       	ldi	r24, 0x03	; 3
    3ab6:	8c 83       	std	Y+4, r24	; 0x04
	Ret_enuLCDErrorStatus = MPORT_enuSetConfig(&LOC_strCurrentLCD);
    3ab8:	ce 01       	movw	r24, r28
    3aba:	02 96       	adiw	r24, 0x02	; 2
    3abc:	0e 94 00 14 	call	0x2800	; 0x2800 <MPORT_enuSetConfig>
    3ac0:	89 83       	std	Y+1, r24	; 0x01

	/*********************************************DATABIT4****************************************************/

	LOC_strCurrentLCD.Port = LCD_Config.DATABIT4.PortNum;
    3ac2:	80 91 21 02 	lds	r24, 0x0221
    3ac6:	8a 83       	std	Y+2, r24	; 0x02
	LOC_strCurrentLCD.Pin  = LCD_Config.DATABIT4.PinNum ;
    3ac8:	80 91 22 02 	lds	r24, 0x0222
    3acc:	8b 83       	std	Y+3, r24	; 0x03
	LOC_strCurrentLCD.Mode = MPORT_enu_OUTPUT_LOW;
    3ace:	83 e0       	ldi	r24, 0x03	; 3
    3ad0:	8c 83       	std	Y+4, r24	; 0x04
	Ret_enuLCDErrorStatus = MPORT_enuSetConfig(&LOC_strCurrentLCD);
    3ad2:	ce 01       	movw	r24, r28
    3ad4:	02 96       	adiw	r24, 0x02	; 2
    3ad6:	0e 94 00 14 	call	0x2800	; 0x2800 <MPORT_enuSetConfig>
    3ada:	89 83       	std	Y+1, r24	; 0x01

	/*********************************************DATABIT5****************************************************/

	LOC_strCurrentLCD.Port = LCD_Config.DATABIT5.PortNum;
    3adc:	80 91 23 02 	lds	r24, 0x0223
    3ae0:	8a 83       	std	Y+2, r24	; 0x02
	LOC_strCurrentLCD.Pin  = LCD_Config.DATABIT5.PinNum ;
    3ae2:	80 91 24 02 	lds	r24, 0x0224
    3ae6:	8b 83       	std	Y+3, r24	; 0x03
	LOC_strCurrentLCD.Mode = MPORT_enu_OUTPUT_LOW;
    3ae8:	83 e0       	ldi	r24, 0x03	; 3
    3aea:	8c 83       	std	Y+4, r24	; 0x04
	Ret_enuLCDErrorStatus = MPORT_enuSetConfig(&LOC_strCurrentLCD);
    3aec:	ce 01       	movw	r24, r28
    3aee:	02 96       	adiw	r24, 0x02	; 2
    3af0:	0e 94 00 14 	call	0x2800	; 0x2800 <MPORT_enuSetConfig>
    3af4:	89 83       	std	Y+1, r24	; 0x01

	/*********************************************DATABIT6****************************************************/

	LOC_strCurrentLCD.Port = LCD_Config.DATABIT6.PortNum;
    3af6:	80 91 25 02 	lds	r24, 0x0225
    3afa:	8a 83       	std	Y+2, r24	; 0x02
	LOC_strCurrentLCD.Pin  = LCD_Config.DATABIT6.PinNum ;
    3afc:	80 91 26 02 	lds	r24, 0x0226
    3b00:	8b 83       	std	Y+3, r24	; 0x03
	LOC_strCurrentLCD.Mode = MPORT_enu_OUTPUT_LOW;
    3b02:	83 e0       	ldi	r24, 0x03	; 3
    3b04:	8c 83       	std	Y+4, r24	; 0x04
	Ret_enuLCDErrorStatus = MPORT_enuSetConfig(&LOC_strCurrentLCD);
    3b06:	ce 01       	movw	r24, r28
    3b08:	02 96       	adiw	r24, 0x02	; 2
    3b0a:	0e 94 00 14 	call	0x2800	; 0x2800 <MPORT_enuSetConfig>
    3b0e:	89 83       	std	Y+1, r24	; 0x01

	/*********************************************DATABIT7****************************************************/

	LOC_strCurrentLCD.Port = LCD_Config.DATABIT7.PortNum;
    3b10:	80 91 27 02 	lds	r24, 0x0227
    3b14:	8a 83       	std	Y+2, r24	; 0x02
	LOC_strCurrentLCD.Pin  = LCD_Config.DATABIT7.PinNum ;
    3b16:	80 91 28 02 	lds	r24, 0x0228
    3b1a:	8b 83       	std	Y+3, r24	; 0x03
	LOC_strCurrentLCD.Mode = MPORT_enu_OUTPUT_LOW;
    3b1c:	83 e0       	ldi	r24, 0x03	; 3
    3b1e:	8c 83       	std	Y+4, r24	; 0x04
	Ret_enuLCDErrorStatus = MPORT_enuSetConfig(&LOC_strCurrentLCD);
    3b20:	ce 01       	movw	r24, r28
    3b22:	02 96       	adiw	r24, 0x02	; 2
    3b24:	0e 94 00 14 	call	0x2800	; 0x2800 <MPORT_enuSetConfig>
    3b28:	89 83       	std	Y+1, r24	; 0x01

	/**********************************************ENABLE*****************************************************/

	LOC_strCurrentLCD.Port = LCD_Config.ENABLE.PortNum;
    3b2a:	80 91 2d 02 	lds	r24, 0x022D
    3b2e:	8a 83       	std	Y+2, r24	; 0x02
	LOC_strCurrentLCD.Pin  = LCD_Config.ENABLE.PinNum;
    3b30:	80 91 2e 02 	lds	r24, 0x022E
    3b34:	8b 83       	std	Y+3, r24	; 0x03
	LOC_strCurrentLCD.Mode = MPORT_enu_OUTPUT_LOW;
    3b36:	83 e0       	ldi	r24, 0x03	; 3
    3b38:	8c 83       	std	Y+4, r24	; 0x04
	Ret_enuLCDErrorStatus = MPORT_enuSetConfig(&LOC_strCurrentLCD);
    3b3a:	ce 01       	movw	r24, r28
    3b3c:	02 96       	adiw	r24, 0x02	; 2
    3b3e:	0e 94 00 14 	call	0x2800	; 0x2800 <MPORT_enuSetConfig>
    3b42:	89 83       	std	Y+1, r24	; 0x01

	/************************************************RS************************************************************/

	LOC_strCurrentLCD.Port = LCD_Config.RS.PortNum;
    3b44:	80 91 29 02 	lds	r24, 0x0229
    3b48:	8a 83       	std	Y+2, r24	; 0x02
	LOC_strCurrentLCD.Pin  = LCD_Config.RS.PinNum;
    3b4a:	80 91 2a 02 	lds	r24, 0x022A
    3b4e:	8b 83       	std	Y+3, r24	; 0x03
	LOC_strCurrentLCD.Mode = MPORT_enu_OUTPUT_LOW;
    3b50:	83 e0       	ldi	r24, 0x03	; 3
    3b52:	8c 83       	std	Y+4, r24	; 0x04
	Ret_enuLCDErrorStatus  = MPORT_enuSetConfig(&LOC_strCurrentLCD);
    3b54:	ce 01       	movw	r24, r28
    3b56:	02 96       	adiw	r24, 0x02	; 2
    3b58:	0e 94 00 14 	call	0x2800	; 0x2800 <MPORT_enuSetConfig>
    3b5c:	89 83       	std	Y+1, r24	; 0x01

	/************************************************RW************************************************************/

	LOC_strCurrentLCD.Port = LCD_Config.RW.PortNum;
    3b5e:	80 91 2b 02 	lds	r24, 0x022B
    3b62:	8a 83       	std	Y+2, r24	; 0x02
	LOC_strCurrentLCD.Pin  = LCD_Config.RW.PinNum;
    3b64:	80 91 2c 02 	lds	r24, 0x022C
    3b68:	8b 83       	std	Y+3, r24	; 0x03
	LOC_strCurrentLCD.Mode = MPORT_enu_OUTPUT_LOW;
    3b6a:	83 e0       	ldi	r24, 0x03	; 3
    3b6c:	8c 83       	std	Y+4, r24	; 0x04
	Ret_enuLCDErrorStatus = MPORT_enuSetConfig(&LOC_strCurrentLCD);
    3b6e:	ce 01       	movw	r24, r28
    3b70:	02 96       	adiw	r24, 0x02	; 2
    3b72:	0e 94 00 14 	call	0x2800	; 0x2800 <MPORT_enuSetConfig>
    3b76:	89 83       	std	Y+1, r24	; 0x01

	/*********************************************End Of Initlization***********************************************************************/


	return Ret_enuLCDErrorStatus;
    3b78:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b7a:	0f 90       	pop	r0
    3b7c:	0f 90       	pop	r0
    3b7e:	0f 90       	pop	r0
    3b80:	0f 90       	pop	r0
    3b82:	cf 91       	pop	r28
    3b84:	df 91       	pop	r29
    3b86:	08 95       	ret

00003b88 <HLCD_voidLCDSendCommand>:


void HLCD_voidLCDSendCommand(u8 Copy_u8Command)
{ 
    3b88:	df 93       	push	r29
    3b8a:	cf 93       	push	r28
    3b8c:	cd b7       	in	r28, 0x3d	; 61
    3b8e:	de b7       	in	r29, 0x3e	; 62
    3b90:	c7 54       	subi	r28, 0x47	; 71
    3b92:	d0 40       	sbci	r29, 0x00	; 0
    3b94:	0f b6       	in	r0, 0x3f	; 63
    3b96:	f8 94       	cli
    3b98:	de bf       	out	0x3e, r29	; 62
    3b9a:	0f be       	out	0x3f, r0	; 63
    3b9c:	cd bf       	out	0x3d, r28	; 61
    3b9e:	fe 01       	movw	r30, r28
    3ba0:	ed 5b       	subi	r30, 0xBD	; 189
    3ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba4:	80 83       	st	Z, r24
	_delay_ms(2);

#elif HLCD_BIT_MODE  ==  HLCD_enu4BIT_MODE

	/*let the RS pin LOW to send command*/
	DIO_enuSetPinValue(LCD_Config.RS.PortNum,LCD_Config.RS.PinNum,MPORT_enuLOW);
    3ba6:	80 91 29 02 	lds	r24, 0x0229
    3baa:	90 91 2a 02 	lds	r25, 0x022A
    3bae:	69 2f       	mov	r22, r25
    3bb0:	40 e0       	ldi	r20, 0x00	; 0
    3bb2:	0e 94 a2 1a 	call	0x3544	; 0x3544 <DIO_enuSetPinValue>
	/*let the RW pin LOW to Write command*/
	DIO_enuSetPinValue(LCD_Config.RW.PortNum,LCD_Config.RW.PinNum,MPORT_enuLOW);
    3bb6:	80 91 2b 02 	lds	r24, 0x022B
    3bba:	90 91 2c 02 	lds	r25, 0x022C
    3bbe:	69 2f       	mov	r22, r25
    3bc0:	40 e0       	ldi	r20, 0x00	; 0
    3bc2:	0e 94 a2 1a 	call	0x3544	; 0x3544 <DIO_enuSetPinValue>
	/*for loop to send command on the pins which intlized in the config file */

	for (int LOC_u8Counter = 4 ; LOC_u8Counter  < NUMBER_OF_LCD_PINS_8BIT ; LOC_u8Counter ++) {
    3bc6:	fe 01       	movw	r30, r28
    3bc8:	ef 5b       	subi	r30, 0xBF	; 191
    3bca:	ff 4f       	sbci	r31, 0xFF	; 255
    3bcc:	84 e0       	ldi	r24, 0x04	; 4
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	91 83       	std	Z+1, r25	; 0x01
    3bd2:	80 83       	st	Z, r24
    3bd4:	71 c0       	rjmp	.+226    	; 0x3cb8 <HLCD_voidLCDSendCommand+0x130>
		// Extract each bit of the data
		u8 LOC_u8bitValue = (Copy_u8Command >> (LOC_u8Counter)) & 0x01;
    3bd6:	fe 01       	movw	r30, r28
    3bd8:	ed 5b       	subi	r30, 0xBD	; 189
    3bda:	ff 4f       	sbci	r31, 0xFF	; 255
    3bdc:	80 81       	ld	r24, Z
    3bde:	88 2f       	mov	r24, r24
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	fe 01       	movw	r30, r28
    3be4:	ef 5b       	subi	r30, 0xBF	; 191
    3be6:	ff 4f       	sbci	r31, 0xFF	; 255
    3be8:	00 80       	ld	r0, Z
    3bea:	02 c0       	rjmp	.+4      	; 0x3bf0 <HLCD_voidLCDSendCommand+0x68>
    3bec:	95 95       	asr	r25
    3bee:	87 95       	ror	r24
    3bf0:	0a 94       	dec	r0
    3bf2:	e2 f7       	brpl	.-8      	; 0x3bec <HLCD_voidLCDSendCommand+0x64>
    3bf4:	81 70       	andi	r24, 0x01	; 1
    3bf6:	fe 01       	movw	r30, r28
    3bf8:	e0 5c       	subi	r30, 0xC0	; 192
    3bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfc:	80 83       	st	Z, r24
		// Set the bitValue to the respective data pin using DIO_enuSetPinValue
		MPORT_enuPORT_OPTS_t    LOC_enucurrentPort;
		MPORT_enuPIN_OPTS_t     LOC_enucurrentPin;

		/*switch on the counter number to Write on each data bit from 4 to 8 to set high nibble first */
		switch (LOC_u8Counter ) {
    3bfe:	fe 01       	movw	r30, r28
    3c00:	ef 5b       	subi	r30, 0xBF	; 191
    3c02:	ff 4f       	sbci	r31, 0xFF	; 255
    3c04:	80 81       	ld	r24, Z
    3c06:	91 81       	ldd	r25, Z+1	; 0x01
    3c08:	26 96       	adiw	r28, 0x06	; 6
    3c0a:	9f af       	std	Y+63, r25	; 0x3f
    3c0c:	8e af       	std	Y+62, r24	; 0x3e
    3c0e:	26 97       	sbiw	r28, 0x06	; 6
    3c10:	26 96       	adiw	r28, 0x06	; 6
    3c12:	8e ad       	ldd	r24, Y+62	; 0x3e
    3c14:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c16:	26 97       	sbiw	r28, 0x06	; 6
    3c18:	85 30       	cpi	r24, 0x05	; 5
    3c1a:	91 05       	cpc	r25, r1
    3c1c:	29 f1       	breq	.+74     	; 0x3c68 <HLCD_voidLCDSendCommand+0xe0>
    3c1e:	26 96       	adiw	r28, 0x06	; 6
    3c20:	8e ad       	ldd	r24, Y+62	; 0x3e
    3c22:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c24:	26 97       	sbiw	r28, 0x06	; 6
    3c26:	86 30       	cpi	r24, 0x06	; 6
    3c28:	91 05       	cpc	r25, r1
    3c2a:	44 f4       	brge	.+16     	; 0x3c3c <HLCD_voidLCDSendCommand+0xb4>
    3c2c:	26 96       	adiw	r28, 0x06	; 6
    3c2e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3c30:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c32:	26 97       	sbiw	r28, 0x06	; 6
    3c34:	84 30       	cpi	r24, 0x04	; 4
    3c36:	91 05       	cpc	r25, r1
    3c38:	81 f0       	breq	.+32     	; 0x3c5a <HLCD_voidLCDSendCommand+0xd2>
    3c3a:	2a c0       	rjmp	.+84     	; 0x3c90 <HLCD_voidLCDSendCommand+0x108>
    3c3c:	26 96       	adiw	r28, 0x06	; 6
    3c3e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3c40:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c42:	26 97       	sbiw	r28, 0x06	; 6
    3c44:	86 30       	cpi	r24, 0x06	; 6
    3c46:	91 05       	cpc	r25, r1
    3c48:	b1 f0       	breq	.+44     	; 0x3c76 <HLCD_voidLCDSendCommand+0xee>
    3c4a:	26 96       	adiw	r28, 0x06	; 6
    3c4c:	8e ad       	ldd	r24, Y+62	; 0x3e
    3c4e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c50:	26 97       	sbiw	r28, 0x06	; 6
    3c52:	87 30       	cpi	r24, 0x07	; 7
    3c54:	91 05       	cpc	r25, r1
    3c56:	b1 f0       	breq	.+44     	; 0x3c84 <HLCD_voidLCDSendCommand+0xfc>
    3c58:	1b c0       	rjmp	.+54     	; 0x3c90 <HLCD_voidLCDSendCommand+0x108>
		case 4: LOC_enucurrentPort = LCD_Config.DATABIT4.PortNum; LOC_enucurrentPin = LCD_Config.DATABIT4.PinNum; break;
    3c5a:	80 91 21 02 	lds	r24, 0x0221
    3c5e:	8f af       	std	Y+63, r24	; 0x3f
    3c60:	80 91 22 02 	lds	r24, 0x0222
    3c64:	8e af       	std	Y+62, r24	; 0x3e
    3c66:	14 c0       	rjmp	.+40     	; 0x3c90 <HLCD_voidLCDSendCommand+0x108>
		case 5: LOC_enucurrentPort = LCD_Config.DATABIT5.PortNum; LOC_enucurrentPin = LCD_Config.DATABIT5.PinNum; break;
    3c68:	80 91 23 02 	lds	r24, 0x0223
    3c6c:	8f af       	std	Y+63, r24	; 0x3f
    3c6e:	80 91 24 02 	lds	r24, 0x0224
    3c72:	8e af       	std	Y+62, r24	; 0x3e
    3c74:	0d c0       	rjmp	.+26     	; 0x3c90 <HLCD_voidLCDSendCommand+0x108>
		case 6: LOC_enucurrentPort = LCD_Config.DATABIT6.PortNum; LOC_enucurrentPin = LCD_Config.DATABIT6.PinNum; break;
    3c76:	80 91 25 02 	lds	r24, 0x0225
    3c7a:	8f af       	std	Y+63, r24	; 0x3f
    3c7c:	80 91 26 02 	lds	r24, 0x0226
    3c80:	8e af       	std	Y+62, r24	; 0x3e
    3c82:	06 c0       	rjmp	.+12     	; 0x3c90 <HLCD_voidLCDSendCommand+0x108>
		case 7: LOC_enucurrentPort = LCD_Config.DATABIT7.PortNum; LOC_enucurrentPin = LCD_Config.DATABIT7.PinNum; break;
    3c84:	80 91 27 02 	lds	r24, 0x0227
    3c88:	8f af       	std	Y+63, r24	; 0x3f
    3c8a:	80 91 28 02 	lds	r24, 0x0228
    3c8e:	8e af       	std	Y+62, r24	; 0x3e
		default:                                                                                                  break;
		}

		/*after each case we use set pin value function to set the pin with its port and pin and the bit of the command*/
		DIO_enuSetPinValue(LOC_enucurrentPort, LOC_enucurrentPin, LOC_u8bitValue);
    3c90:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c92:	6e ad       	ldd	r22, Y+62	; 0x3e
    3c94:	fe 01       	movw	r30, r28
    3c96:	e0 5c       	subi	r30, 0xC0	; 192
    3c98:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9a:	40 81       	ld	r20, Z
    3c9c:	0e 94 a2 1a 	call	0x3544	; 0x3544 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_Config.RS.PortNum,LCD_Config.RS.PinNum,MPORT_enuLOW);
	/*let the RW pin LOW to Write command*/
	DIO_enuSetPinValue(LCD_Config.RW.PortNum,LCD_Config.RW.PinNum,MPORT_enuLOW);
	/*for loop to send command on the pins which intlized in the config file */

	for (int LOC_u8Counter = 4 ; LOC_u8Counter  < NUMBER_OF_LCD_PINS_8BIT ; LOC_u8Counter ++) {
    3ca0:	de 01       	movw	r26, r28
    3ca2:	af 5b       	subi	r26, 0xBF	; 191
    3ca4:	bf 4f       	sbci	r27, 0xFF	; 255
    3ca6:	fe 01       	movw	r30, r28
    3ca8:	ef 5b       	subi	r30, 0xBF	; 191
    3caa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cac:	80 81       	ld	r24, Z
    3cae:	91 81       	ldd	r25, Z+1	; 0x01
    3cb0:	01 96       	adiw	r24, 0x01	; 1
    3cb2:	11 96       	adiw	r26, 0x01	; 1
    3cb4:	9c 93       	st	X, r25
    3cb6:	8e 93       	st	-X, r24
    3cb8:	fe 01       	movw	r30, r28
    3cba:	ef 5b       	subi	r30, 0xBF	; 191
    3cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbe:	80 81       	ld	r24, Z
    3cc0:	91 81       	ldd	r25, Z+1	; 0x01
    3cc2:	88 30       	cpi	r24, 0x08	; 8
    3cc4:	91 05       	cpc	r25, r1
    3cc6:	0c f4       	brge	.+2      	; 0x3cca <HLCD_voidLCDSendCommand+0x142>
    3cc8:	86 cf       	rjmp	.-244    	; 0x3bd6 <HLCD_voidLCDSendCommand+0x4e>

		/*after each case we use set pin value function to set the pin with its port and pin and the bit of the command*/
		DIO_enuSetPinValue(LOC_enucurrentPort, LOC_enucurrentPin, LOC_u8bitValue);
	}
	/*Set the Enabel pin High */
	DIO_enuSetPinValue(LCD_Config.ENABLE.PortNum,LCD_Config.ENABLE.PinNum,MPORT_enuHIGH);
    3cca:	80 91 2d 02 	lds	r24, 0x022D
    3cce:	90 91 2e 02 	lds	r25, 0x022E
    3cd2:	69 2f       	mov	r22, r25
    3cd4:	41 e0       	ldi	r20, 0x01	; 1
    3cd6:	0e 94 a2 1a 	call	0x3544	; 0x3544 <DIO_enuSetPinValue>
    3cda:	80 e0       	ldi	r24, 0x00	; 0
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	a0 e0       	ldi	r26, 0x00	; 0
    3ce0:	b0 e4       	ldi	r27, 0x40	; 64
    3ce2:	8d ab       	std	Y+53, r24	; 0x35
    3ce4:	9e ab       	std	Y+54, r25	; 0x36
    3ce6:	af ab       	std	Y+55, r26	; 0x37
    3ce8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cea:	6d a9       	ldd	r22, Y+53	; 0x35
    3cec:	7e a9       	ldd	r23, Y+54	; 0x36
    3cee:	8f a9       	ldd	r24, Y+55	; 0x37
    3cf0:	98 ad       	ldd	r25, Y+56	; 0x38
    3cf2:	20 e0       	ldi	r18, 0x00	; 0
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	4a ef       	ldi	r20, 0xFA	; 250
    3cf8:	54 e4       	ldi	r21, 0x44	; 68
    3cfa:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	89 ab       	std	Y+49, r24	; 0x31
    3d04:	9a ab       	std	Y+50, r25	; 0x32
    3d06:	ab ab       	std	Y+51, r26	; 0x33
    3d08:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3d0a:	69 a9       	ldd	r22, Y+49	; 0x31
    3d0c:	7a a9       	ldd	r23, Y+50	; 0x32
    3d0e:	8b a9       	ldd	r24, Y+51	; 0x33
    3d10:	9c a9       	ldd	r25, Y+52	; 0x34
    3d12:	20 e0       	ldi	r18, 0x00	; 0
    3d14:	30 e0       	ldi	r19, 0x00	; 0
    3d16:	40 e8       	ldi	r20, 0x80	; 128
    3d18:	5f e3       	ldi	r21, 0x3F	; 63
    3d1a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    3d1e:	88 23       	and	r24, r24
    3d20:	2c f4       	brge	.+10     	; 0x3d2c <HLCD_voidLCDSendCommand+0x1a4>
		__ticks = 1;
    3d22:	81 e0       	ldi	r24, 0x01	; 1
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	98 ab       	std	Y+48, r25	; 0x30
    3d28:	8f a7       	std	Y+47, r24	; 0x2f
    3d2a:	3f c0       	rjmp	.+126    	; 0x3daa <HLCD_voidLCDSendCommand+0x222>
	else if (__tmp > 65535)
    3d2c:	69 a9       	ldd	r22, Y+49	; 0x31
    3d2e:	7a a9       	ldd	r23, Y+50	; 0x32
    3d30:	8b a9       	ldd	r24, Y+51	; 0x33
    3d32:	9c a9       	ldd	r25, Y+52	; 0x34
    3d34:	20 e0       	ldi	r18, 0x00	; 0
    3d36:	3f ef       	ldi	r19, 0xFF	; 255
    3d38:	4f e7       	ldi	r20, 0x7F	; 127
    3d3a:	57 e4       	ldi	r21, 0x47	; 71
    3d3c:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    3d40:	18 16       	cp	r1, r24
    3d42:	4c f5       	brge	.+82     	; 0x3d96 <HLCD_voidLCDSendCommand+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d44:	6d a9       	ldd	r22, Y+53	; 0x35
    3d46:	7e a9       	ldd	r23, Y+54	; 0x36
    3d48:	8f a9       	ldd	r24, Y+55	; 0x37
    3d4a:	98 ad       	ldd	r25, Y+56	; 0x38
    3d4c:	20 e0       	ldi	r18, 0x00	; 0
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	40 e2       	ldi	r20, 0x20	; 32
    3d52:	51 e4       	ldi	r21, 0x41	; 65
    3d54:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3d58:	dc 01       	movw	r26, r24
    3d5a:	cb 01       	movw	r24, r22
    3d5c:	bc 01       	movw	r22, r24
    3d5e:	cd 01       	movw	r24, r26
    3d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d64:	dc 01       	movw	r26, r24
    3d66:	cb 01       	movw	r24, r22
    3d68:	98 ab       	std	Y+48, r25	; 0x30
    3d6a:	8f a7       	std	Y+47, r24	; 0x2f
    3d6c:	0f c0       	rjmp	.+30     	; 0x3d8c <HLCD_voidLCDSendCommand+0x204>
    3d6e:	88 ec       	ldi	r24, 0xC8	; 200
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	9e a7       	std	Y+46, r25	; 0x2e
    3d74:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d76:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d78:	9e a5       	ldd	r25, Y+46	; 0x2e
    3d7a:	01 97       	sbiw	r24, 0x01	; 1
    3d7c:	f1 f7       	brne	.-4      	; 0x3d7a <HLCD_voidLCDSendCommand+0x1f2>
    3d7e:	9e a7       	std	Y+46, r25	; 0x2e
    3d80:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d82:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d84:	98 a9       	ldd	r25, Y+48	; 0x30
    3d86:	01 97       	sbiw	r24, 0x01	; 1
    3d88:	98 ab       	std	Y+48, r25	; 0x30
    3d8a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d8e:	98 a9       	ldd	r25, Y+48	; 0x30
    3d90:	00 97       	sbiw	r24, 0x00	; 0
    3d92:	69 f7       	brne	.-38     	; 0x3d6e <HLCD_voidLCDSendCommand+0x1e6>
    3d94:	14 c0       	rjmp	.+40     	; 0x3dbe <HLCD_voidLCDSendCommand+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d96:	69 a9       	ldd	r22, Y+49	; 0x31
    3d98:	7a a9       	ldd	r23, Y+50	; 0x32
    3d9a:	8b a9       	ldd	r24, Y+51	; 0x33
    3d9c:	9c a9       	ldd	r25, Y+52	; 0x34
    3d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da2:	dc 01       	movw	r26, r24
    3da4:	cb 01       	movw	r24, r22
    3da6:	98 ab       	std	Y+48, r25	; 0x30
    3da8:	8f a7       	std	Y+47, r24	; 0x2f
    3daa:	8f a5       	ldd	r24, Y+47	; 0x2f
    3dac:	98 a9       	ldd	r25, Y+48	; 0x30
    3dae:	9c a7       	std	Y+44, r25	; 0x2c
    3db0:	8b a7       	std	Y+43, r24	; 0x2b
    3db2:	8b a5       	ldd	r24, Y+43	; 0x2b
    3db4:	9c a5       	ldd	r25, Y+44	; 0x2c
    3db6:	01 97       	sbiw	r24, 0x01	; 1
    3db8:	f1 f7       	brne	.-4      	; 0x3db6 <HLCD_voidLCDSendCommand+0x22e>
    3dba:	9c a7       	std	Y+44, r25	; 0x2c
    3dbc:	8b a7       	std	Y+43, r24	; 0x2b
	/*delay 2ms*/
	_delay_ms(2);
	/*Set the Enabel pin Low */
	DIO_enuSetPinValue(LCD_Config.ENABLE.PortNum,LCD_Config.ENABLE.PinNum,MPORT_enuLOW);
    3dbe:	80 91 2d 02 	lds	r24, 0x022D
    3dc2:	90 91 2e 02 	lds	r25, 0x022E
    3dc6:	69 2f       	mov	r22, r25
    3dc8:	40 e0       	ldi	r20, 0x00	; 0
    3dca:	0e 94 a2 1a 	call	0x3544	; 0x3544 <DIO_enuSetPinValue>
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	a0 e0       	ldi	r26, 0x00	; 0
    3dd4:	b0 e4       	ldi	r27, 0x40	; 64
    3dd6:	8f a3       	std	Y+39, r24	; 0x27
    3dd8:	98 a7       	std	Y+40, r25	; 0x28
    3dda:	a9 a7       	std	Y+41, r26	; 0x29
    3ddc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dde:	6f a1       	ldd	r22, Y+39	; 0x27
    3de0:	78 a5       	ldd	r23, Y+40	; 0x28
    3de2:	89 a5       	ldd	r24, Y+41	; 0x29
    3de4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3de6:	20 e0       	ldi	r18, 0x00	; 0
    3de8:	30 e0       	ldi	r19, 0x00	; 0
    3dea:	4a ef       	ldi	r20, 0xFA	; 250
    3dec:	54 e4       	ldi	r21, 0x44	; 68
    3dee:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3df2:	dc 01       	movw	r26, r24
    3df4:	cb 01       	movw	r24, r22
    3df6:	8b a3       	std	Y+35, r24	; 0x23
    3df8:	9c a3       	std	Y+36, r25	; 0x24
    3dfa:	ad a3       	std	Y+37, r26	; 0x25
    3dfc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3dfe:	6b a1       	ldd	r22, Y+35	; 0x23
    3e00:	7c a1       	ldd	r23, Y+36	; 0x24
    3e02:	8d a1       	ldd	r24, Y+37	; 0x25
    3e04:	9e a1       	ldd	r25, Y+38	; 0x26
    3e06:	20 e0       	ldi	r18, 0x00	; 0
    3e08:	30 e0       	ldi	r19, 0x00	; 0
    3e0a:	40 e8       	ldi	r20, 0x80	; 128
    3e0c:	5f e3       	ldi	r21, 0x3F	; 63
    3e0e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    3e12:	88 23       	and	r24, r24
    3e14:	2c f4       	brge	.+10     	; 0x3e20 <HLCD_voidLCDSendCommand+0x298>
		__ticks = 1;
    3e16:	81 e0       	ldi	r24, 0x01	; 1
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	9a a3       	std	Y+34, r25	; 0x22
    3e1c:	89 a3       	std	Y+33, r24	; 0x21
    3e1e:	3f c0       	rjmp	.+126    	; 0x3e9e <HLCD_voidLCDSendCommand+0x316>
	else if (__tmp > 65535)
    3e20:	6b a1       	ldd	r22, Y+35	; 0x23
    3e22:	7c a1       	ldd	r23, Y+36	; 0x24
    3e24:	8d a1       	ldd	r24, Y+37	; 0x25
    3e26:	9e a1       	ldd	r25, Y+38	; 0x26
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	3f ef       	ldi	r19, 0xFF	; 255
    3e2c:	4f e7       	ldi	r20, 0x7F	; 127
    3e2e:	57 e4       	ldi	r21, 0x47	; 71
    3e30:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    3e34:	18 16       	cp	r1, r24
    3e36:	4c f5       	brge	.+82     	; 0x3e8a <HLCD_voidLCDSendCommand+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e38:	6f a1       	ldd	r22, Y+39	; 0x27
    3e3a:	78 a5       	ldd	r23, Y+40	; 0x28
    3e3c:	89 a5       	ldd	r24, Y+41	; 0x29
    3e3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e40:	20 e0       	ldi	r18, 0x00	; 0
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	40 e2       	ldi	r20, 0x20	; 32
    3e46:	51 e4       	ldi	r21, 0x41	; 65
    3e48:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3e4c:	dc 01       	movw	r26, r24
    3e4e:	cb 01       	movw	r24, r22
    3e50:	bc 01       	movw	r22, r24
    3e52:	cd 01       	movw	r24, r26
    3e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e58:	dc 01       	movw	r26, r24
    3e5a:	cb 01       	movw	r24, r22
    3e5c:	9a a3       	std	Y+34, r25	; 0x22
    3e5e:	89 a3       	std	Y+33, r24	; 0x21
    3e60:	0f c0       	rjmp	.+30     	; 0x3e80 <HLCD_voidLCDSendCommand+0x2f8>
    3e62:	88 ec       	ldi	r24, 0xC8	; 200
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	98 a3       	std	Y+32, r25	; 0x20
    3e68:	8f 8f       	std	Y+31, r24	; 0x1f
    3e6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e6c:	98 a1       	ldd	r25, Y+32	; 0x20
    3e6e:	01 97       	sbiw	r24, 0x01	; 1
    3e70:	f1 f7       	brne	.-4      	; 0x3e6e <HLCD_voidLCDSendCommand+0x2e6>
    3e72:	98 a3       	std	Y+32, r25	; 0x20
    3e74:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e76:	89 a1       	ldd	r24, Y+33	; 0x21
    3e78:	9a a1       	ldd	r25, Y+34	; 0x22
    3e7a:	01 97       	sbiw	r24, 0x01	; 1
    3e7c:	9a a3       	std	Y+34, r25	; 0x22
    3e7e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e80:	89 a1       	ldd	r24, Y+33	; 0x21
    3e82:	9a a1       	ldd	r25, Y+34	; 0x22
    3e84:	00 97       	sbiw	r24, 0x00	; 0
    3e86:	69 f7       	brne	.-38     	; 0x3e62 <HLCD_voidLCDSendCommand+0x2da>
    3e88:	14 c0       	rjmp	.+40     	; 0x3eb2 <HLCD_voidLCDSendCommand+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e8a:	6b a1       	ldd	r22, Y+35	; 0x23
    3e8c:	7c a1       	ldd	r23, Y+36	; 0x24
    3e8e:	8d a1       	ldd	r24, Y+37	; 0x25
    3e90:	9e a1       	ldd	r25, Y+38	; 0x26
    3e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e96:	dc 01       	movw	r26, r24
    3e98:	cb 01       	movw	r24, r22
    3e9a:	9a a3       	std	Y+34, r25	; 0x22
    3e9c:	89 a3       	std	Y+33, r24	; 0x21
    3e9e:	89 a1       	ldd	r24, Y+33	; 0x21
    3ea0:	9a a1       	ldd	r25, Y+34	; 0x22
    3ea2:	9e 8f       	std	Y+30, r25	; 0x1e
    3ea4:	8d 8f       	std	Y+29, r24	; 0x1d
    3ea6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ea8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3eaa:	01 97       	sbiw	r24, 0x01	; 1
    3eac:	f1 f7       	brne	.-4      	; 0x3eaa <HLCD_voidLCDSendCommand+0x322>
    3eae:	9e 8f       	std	Y+30, r25	; 0x1e
    3eb0:	8d 8f       	std	Y+29, r24	; 0x1d
	/*delay 2ms*/
	_delay_ms(2);
	/************************************************for low nibble****************************************/
	/*for loop to send command on the pins which intlized in the config file */
	for (int LOC_u8Counter = 0; LOC_u8Counter  < NUMBER_OF_LCD_PINS_4BIT; LOC_u8Counter ++) {
    3eb2:	1d ae       	std	Y+61, r1	; 0x3d
    3eb4:	1c ae       	std	Y+60, r1	; 0x3c
    3eb6:	5d c0       	rjmp	.+186    	; 0x3f72 <HLCD_voidLCDSendCommand+0x3ea>
		// Extract each bit of the data
		u8 LOC_u8bitValue = (Copy_u8Command >> (LOC_u8Counter )) & 0x01;
    3eb8:	fe 01       	movw	r30, r28
    3eba:	ed 5b       	subi	r30, 0xBD	; 189
    3ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebe:	80 81       	ld	r24, Z
    3ec0:	88 2f       	mov	r24, r24
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	0c ac       	ldd	r0, Y+60	; 0x3c
    3ec6:	02 c0       	rjmp	.+4      	; 0x3ecc <HLCD_voidLCDSendCommand+0x344>
    3ec8:	95 95       	asr	r25
    3eca:	87 95       	ror	r24
    3ecc:	0a 94       	dec	r0
    3ece:	e2 f7       	brpl	.-8      	; 0x3ec8 <HLCD_voidLCDSendCommand+0x340>
    3ed0:	81 70       	andi	r24, 0x01	; 1
    3ed2:	8b af       	std	Y+59, r24	; 0x3b

		MPORT_enuPORT_OPTS_t    LOC_enucurrentPort;
		MPORT_enuPIN_OPTS_t     LOC_enucurrentPin;

		/*switch on the counter number to Write on each data bit from 0 to 4 to set Low nibble */
		switch (LOC_u8Counter ) {
    3ed4:	8c ad       	ldd	r24, Y+60	; 0x3c
    3ed6:	9d ad       	ldd	r25, Y+61	; 0x3d
    3ed8:	28 96       	adiw	r28, 0x08	; 8
    3eda:	9f af       	std	Y+63, r25	; 0x3f
    3edc:	8e af       	std	Y+62, r24	; 0x3e
    3ede:	28 97       	sbiw	r28, 0x08	; 8
    3ee0:	28 96       	adiw	r28, 0x08	; 8
    3ee2:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ee4:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ee6:	28 97       	sbiw	r28, 0x08	; 8
    3ee8:	81 30       	cpi	r24, 0x01	; 1
    3eea:	91 05       	cpc	r25, r1
    3eec:	21 f1       	breq	.+72     	; 0x3f36 <HLCD_voidLCDSendCommand+0x3ae>
    3eee:	28 96       	adiw	r28, 0x08	; 8
    3ef0:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ef2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ef4:	28 97       	sbiw	r28, 0x08	; 8
    3ef6:	82 30       	cpi	r24, 0x02	; 2
    3ef8:	91 05       	cpc	r25, r1
    3efa:	3c f4       	brge	.+14     	; 0x3f0a <HLCD_voidLCDSendCommand+0x382>
    3efc:	28 96       	adiw	r28, 0x08	; 8
    3efe:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f00:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f02:	28 97       	sbiw	r28, 0x08	; 8
    3f04:	00 97       	sbiw	r24, 0x00	; 0
    3f06:	81 f0       	breq	.+32     	; 0x3f28 <HLCD_voidLCDSendCommand+0x3a0>
    3f08:	2a c0       	rjmp	.+84     	; 0x3f5e <HLCD_voidLCDSendCommand+0x3d6>
    3f0a:	28 96       	adiw	r28, 0x08	; 8
    3f0c:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f0e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f10:	28 97       	sbiw	r28, 0x08	; 8
    3f12:	82 30       	cpi	r24, 0x02	; 2
    3f14:	91 05       	cpc	r25, r1
    3f16:	b1 f0       	breq	.+44     	; 0x3f44 <HLCD_voidLCDSendCommand+0x3bc>
    3f18:	28 96       	adiw	r28, 0x08	; 8
    3f1a:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f1c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f1e:	28 97       	sbiw	r28, 0x08	; 8
    3f20:	83 30       	cpi	r24, 0x03	; 3
    3f22:	91 05       	cpc	r25, r1
    3f24:	b1 f0       	breq	.+44     	; 0x3f52 <HLCD_voidLCDSendCommand+0x3ca>
    3f26:	1b c0       	rjmp	.+54     	; 0x3f5e <HLCD_voidLCDSendCommand+0x3d6>
		case 0: LOC_enucurrentPort = LCD_Config.DATABIT4.PortNum; LOC_enucurrentPin = LCD_Config.DATABIT4.PinNum; break;
    3f28:	80 91 21 02 	lds	r24, 0x0221
    3f2c:	8a af       	std	Y+58, r24	; 0x3a
    3f2e:	80 91 22 02 	lds	r24, 0x0222
    3f32:	89 af       	std	Y+57, r24	; 0x39
    3f34:	14 c0       	rjmp	.+40     	; 0x3f5e <HLCD_voidLCDSendCommand+0x3d6>
		case 1: LOC_enucurrentPort = LCD_Config.DATABIT5.PortNum; LOC_enucurrentPin = LCD_Config.DATABIT5.PinNum; break;
    3f36:	80 91 23 02 	lds	r24, 0x0223
    3f3a:	8a af       	std	Y+58, r24	; 0x3a
    3f3c:	80 91 24 02 	lds	r24, 0x0224
    3f40:	89 af       	std	Y+57, r24	; 0x39
    3f42:	0d c0       	rjmp	.+26     	; 0x3f5e <HLCD_voidLCDSendCommand+0x3d6>
		case 2: LOC_enucurrentPort = LCD_Config.DATABIT6.PortNum; LOC_enucurrentPin = LCD_Config.DATABIT6.PinNum; break;
    3f44:	80 91 25 02 	lds	r24, 0x0225
    3f48:	8a af       	std	Y+58, r24	; 0x3a
    3f4a:	80 91 26 02 	lds	r24, 0x0226
    3f4e:	89 af       	std	Y+57, r24	; 0x39
    3f50:	06 c0       	rjmp	.+12     	; 0x3f5e <HLCD_voidLCDSendCommand+0x3d6>
		case 3: LOC_enucurrentPort = LCD_Config.DATABIT7.PortNum; LOC_enucurrentPin = LCD_Config.DATABIT7.PinNum; break;
    3f52:	80 91 27 02 	lds	r24, 0x0227
    3f56:	8a af       	std	Y+58, r24	; 0x3a
    3f58:	80 91 28 02 	lds	r24, 0x0228
    3f5c:	89 af       	std	Y+57, r24	; 0x39
		default:                                                                                                  break;
		}
		/*after each case we use set pin value function to set the pin with its port and pin and the bit of the command*/

		DIO_enuSetPinValue(LOC_enucurrentPort, LOC_enucurrentPin, LOC_u8bitValue);
    3f5e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3f60:	69 ad       	ldd	r22, Y+57	; 0x39
    3f62:	4b ad       	ldd	r20, Y+59	; 0x3b
    3f64:	0e 94 a2 1a 	call	0x3544	; 0x3544 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_Config.ENABLE.PortNum,LCD_Config.ENABLE.PinNum,MPORT_enuLOW);
	/*delay 2ms*/
	_delay_ms(2);
	/************************************************for low nibble****************************************/
	/*for loop to send command on the pins which intlized in the config file */
	for (int LOC_u8Counter = 0; LOC_u8Counter  < NUMBER_OF_LCD_PINS_4BIT; LOC_u8Counter ++) {
    3f68:	8c ad       	ldd	r24, Y+60	; 0x3c
    3f6a:	9d ad       	ldd	r25, Y+61	; 0x3d
    3f6c:	01 96       	adiw	r24, 0x01	; 1
    3f6e:	9d af       	std	Y+61, r25	; 0x3d
    3f70:	8c af       	std	Y+60, r24	; 0x3c
    3f72:	8c ad       	ldd	r24, Y+60	; 0x3c
    3f74:	9d ad       	ldd	r25, Y+61	; 0x3d
    3f76:	84 30       	cpi	r24, 0x04	; 4
    3f78:	91 05       	cpc	r25, r1
    3f7a:	0c f4       	brge	.+2      	; 0x3f7e <HLCD_voidLCDSendCommand+0x3f6>
    3f7c:	9d cf       	rjmp	.-198    	; 0x3eb8 <HLCD_voidLCDSendCommand+0x330>
		/*after each case we use set pin value function to set the pin with its port and pin and the bit of the command*/

		DIO_enuSetPinValue(LOC_enucurrentPort, LOC_enucurrentPin, LOC_u8bitValue);
	}
	/*Set the Enabel pin High */
	DIO_enuSetPinValue(LCD_Config.ENABLE.PortNum,LCD_Config.ENABLE.PinNum,MPORT_enuHIGH);
    3f7e:	80 91 2d 02 	lds	r24, 0x022D
    3f82:	90 91 2e 02 	lds	r25, 0x022E
    3f86:	69 2f       	mov	r22, r25
    3f88:	41 e0       	ldi	r20, 0x01	; 1
    3f8a:	0e 94 a2 1a 	call	0x3544	; 0x3544 <DIO_enuSetPinValue>
    3f8e:	80 e0       	ldi	r24, 0x00	; 0
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	a0 e0       	ldi	r26, 0x00	; 0
    3f94:	b0 e4       	ldi	r27, 0x40	; 64
    3f96:	89 8f       	std	Y+25, r24	; 0x19
    3f98:	9a 8f       	std	Y+26, r25	; 0x1a
    3f9a:	ab 8f       	std	Y+27, r26	; 0x1b
    3f9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f9e:	69 8d       	ldd	r22, Y+25	; 0x19
    3fa0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fa2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fa4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fa6:	20 e0       	ldi	r18, 0x00	; 0
    3fa8:	30 e0       	ldi	r19, 0x00	; 0
    3faa:	4a ef       	ldi	r20, 0xFA	; 250
    3fac:	54 e4       	ldi	r21, 0x44	; 68
    3fae:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    3fb2:	dc 01       	movw	r26, r24
    3fb4:	cb 01       	movw	r24, r22
    3fb6:	8d 8b       	std	Y+21, r24	; 0x15
    3fb8:	9e 8b       	std	Y+22, r25	; 0x16
    3fba:	af 8b       	std	Y+23, r26	; 0x17
    3fbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3fbe:	6d 89       	ldd	r22, Y+21	; 0x15
    3fc0:	7e 89       	ldd	r23, Y+22	; 0x16
    3fc2:	8f 89       	ldd	r24, Y+23	; 0x17
    3fc4:	98 8d       	ldd	r25, Y+24	; 0x18
    3fc6:	20 e0       	ldi	r18, 0x00	; 0
    3fc8:	30 e0       	ldi	r19, 0x00	; 0
    3fca:	40 e8       	ldi	r20, 0x80	; 128
    3fcc:	5f e3       	ldi	r21, 0x3F	; 63
    3fce:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    3fd2:	88 23       	and	r24, r24
    3fd4:	2c f4       	brge	.+10     	; 0x3fe0 <HLCD_voidLCDSendCommand+0x458>
		__ticks = 1;
    3fd6:	81 e0       	ldi	r24, 0x01	; 1
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	9c 8b       	std	Y+20, r25	; 0x14
    3fdc:	8b 8b       	std	Y+19, r24	; 0x13
    3fde:	3f c0       	rjmp	.+126    	; 0x405e <HLCD_voidLCDSendCommand+0x4d6>
	else if (__tmp > 65535)
    3fe0:	6d 89       	ldd	r22, Y+21	; 0x15
    3fe2:	7e 89       	ldd	r23, Y+22	; 0x16
    3fe4:	8f 89       	ldd	r24, Y+23	; 0x17
    3fe6:	98 8d       	ldd	r25, Y+24	; 0x18
    3fe8:	20 e0       	ldi	r18, 0x00	; 0
    3fea:	3f ef       	ldi	r19, 0xFF	; 255
    3fec:	4f e7       	ldi	r20, 0x7F	; 127
    3fee:	57 e4       	ldi	r21, 0x47	; 71
    3ff0:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    3ff4:	18 16       	cp	r1, r24
    3ff6:	4c f5       	brge	.+82     	; 0x404a <HLCD_voidLCDSendCommand+0x4c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ff8:	69 8d       	ldd	r22, Y+25	; 0x19
    3ffa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ffc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ffe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4000:	20 e0       	ldi	r18, 0x00	; 0
    4002:	30 e0       	ldi	r19, 0x00	; 0
    4004:	40 e2       	ldi	r20, 0x20	; 32
    4006:	51 e4       	ldi	r21, 0x41	; 65
    4008:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    400c:	dc 01       	movw	r26, r24
    400e:	cb 01       	movw	r24, r22
    4010:	bc 01       	movw	r22, r24
    4012:	cd 01       	movw	r24, r26
    4014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4018:	dc 01       	movw	r26, r24
    401a:	cb 01       	movw	r24, r22
    401c:	9c 8b       	std	Y+20, r25	; 0x14
    401e:	8b 8b       	std	Y+19, r24	; 0x13
    4020:	0f c0       	rjmp	.+30     	; 0x4040 <HLCD_voidLCDSendCommand+0x4b8>
    4022:	88 ec       	ldi	r24, 0xC8	; 200
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	9a 8b       	std	Y+18, r25	; 0x12
    4028:	89 8b       	std	Y+17, r24	; 0x11
    402a:	89 89       	ldd	r24, Y+17	; 0x11
    402c:	9a 89       	ldd	r25, Y+18	; 0x12
    402e:	01 97       	sbiw	r24, 0x01	; 1
    4030:	f1 f7       	brne	.-4      	; 0x402e <HLCD_voidLCDSendCommand+0x4a6>
    4032:	9a 8b       	std	Y+18, r25	; 0x12
    4034:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4036:	8b 89       	ldd	r24, Y+19	; 0x13
    4038:	9c 89       	ldd	r25, Y+20	; 0x14
    403a:	01 97       	sbiw	r24, 0x01	; 1
    403c:	9c 8b       	std	Y+20, r25	; 0x14
    403e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4040:	8b 89       	ldd	r24, Y+19	; 0x13
    4042:	9c 89       	ldd	r25, Y+20	; 0x14
    4044:	00 97       	sbiw	r24, 0x00	; 0
    4046:	69 f7       	brne	.-38     	; 0x4022 <HLCD_voidLCDSendCommand+0x49a>
    4048:	14 c0       	rjmp	.+40     	; 0x4072 <HLCD_voidLCDSendCommand+0x4ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    404a:	6d 89       	ldd	r22, Y+21	; 0x15
    404c:	7e 89       	ldd	r23, Y+22	; 0x16
    404e:	8f 89       	ldd	r24, Y+23	; 0x17
    4050:	98 8d       	ldd	r25, Y+24	; 0x18
    4052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4056:	dc 01       	movw	r26, r24
    4058:	cb 01       	movw	r24, r22
    405a:	9c 8b       	std	Y+20, r25	; 0x14
    405c:	8b 8b       	std	Y+19, r24	; 0x13
    405e:	8b 89       	ldd	r24, Y+19	; 0x13
    4060:	9c 89       	ldd	r25, Y+20	; 0x14
    4062:	98 8b       	std	Y+16, r25	; 0x10
    4064:	8f 87       	std	Y+15, r24	; 0x0f
    4066:	8f 85       	ldd	r24, Y+15	; 0x0f
    4068:	98 89       	ldd	r25, Y+16	; 0x10
    406a:	01 97       	sbiw	r24, 0x01	; 1
    406c:	f1 f7       	brne	.-4      	; 0x406a <HLCD_voidLCDSendCommand+0x4e2>
    406e:	98 8b       	std	Y+16, r25	; 0x10
    4070:	8f 87       	std	Y+15, r24	; 0x0f
	/*delay 2ms*/
	_delay_ms(2);
	/*Set the Enabel pin Low */
	DIO_enuSetPinValue(LCD_Config.ENABLE.PortNum,LCD_Config.ENABLE.PinNum,MPORT_enuLOW);
    4072:	80 91 2d 02 	lds	r24, 0x022D
    4076:	90 91 2e 02 	lds	r25, 0x022E
    407a:	69 2f       	mov	r22, r25
    407c:	40 e0       	ldi	r20, 0x00	; 0
    407e:	0e 94 a2 1a 	call	0x3544	; 0x3544 <DIO_enuSetPinValue>
    4082:	80 e0       	ldi	r24, 0x00	; 0
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	a0 e0       	ldi	r26, 0x00	; 0
    4088:	b0 e4       	ldi	r27, 0x40	; 64
    408a:	8b 87       	std	Y+11, r24	; 0x0b
    408c:	9c 87       	std	Y+12, r25	; 0x0c
    408e:	ad 87       	std	Y+13, r26	; 0x0d
    4090:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4092:	6b 85       	ldd	r22, Y+11	; 0x0b
    4094:	7c 85       	ldd	r23, Y+12	; 0x0c
    4096:	8d 85       	ldd	r24, Y+13	; 0x0d
    4098:	9e 85       	ldd	r25, Y+14	; 0x0e
    409a:	20 e0       	ldi	r18, 0x00	; 0
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	4a ef       	ldi	r20, 0xFA	; 250
    40a0:	54 e4       	ldi	r21, 0x44	; 68
    40a2:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    40a6:	dc 01       	movw	r26, r24
    40a8:	cb 01       	movw	r24, r22
    40aa:	8f 83       	std	Y+7, r24	; 0x07
    40ac:	98 87       	std	Y+8, r25	; 0x08
    40ae:	a9 87       	std	Y+9, r26	; 0x09
    40b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40b2:	6f 81       	ldd	r22, Y+7	; 0x07
    40b4:	78 85       	ldd	r23, Y+8	; 0x08
    40b6:	89 85       	ldd	r24, Y+9	; 0x09
    40b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ba:	20 e0       	ldi	r18, 0x00	; 0
    40bc:	30 e0       	ldi	r19, 0x00	; 0
    40be:	40 e8       	ldi	r20, 0x80	; 128
    40c0:	5f e3       	ldi	r21, 0x3F	; 63
    40c2:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    40c6:	88 23       	and	r24, r24
    40c8:	2c f4       	brge	.+10     	; 0x40d4 <HLCD_voidLCDSendCommand+0x54c>
		__ticks = 1;
    40ca:	81 e0       	ldi	r24, 0x01	; 1
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	9e 83       	std	Y+6, r25	; 0x06
    40d0:	8d 83       	std	Y+5, r24	; 0x05
    40d2:	3f c0       	rjmp	.+126    	; 0x4152 <HLCD_voidLCDSendCommand+0x5ca>
	else if (__tmp > 65535)
    40d4:	6f 81       	ldd	r22, Y+7	; 0x07
    40d6:	78 85       	ldd	r23, Y+8	; 0x08
    40d8:	89 85       	ldd	r24, Y+9	; 0x09
    40da:	9a 85       	ldd	r25, Y+10	; 0x0a
    40dc:	20 e0       	ldi	r18, 0x00	; 0
    40de:	3f ef       	ldi	r19, 0xFF	; 255
    40e0:	4f e7       	ldi	r20, 0x7F	; 127
    40e2:	57 e4       	ldi	r21, 0x47	; 71
    40e4:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    40e8:	18 16       	cp	r1, r24
    40ea:	4c f5       	brge	.+82     	; 0x413e <HLCD_voidLCDSendCommand+0x5b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    40ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    40f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    40f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    40f4:	20 e0       	ldi	r18, 0x00	; 0
    40f6:	30 e0       	ldi	r19, 0x00	; 0
    40f8:	40 e2       	ldi	r20, 0x20	; 32
    40fa:	51 e4       	ldi	r21, 0x41	; 65
    40fc:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4100:	dc 01       	movw	r26, r24
    4102:	cb 01       	movw	r24, r22
    4104:	bc 01       	movw	r22, r24
    4106:	cd 01       	movw	r24, r26
    4108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    410c:	dc 01       	movw	r26, r24
    410e:	cb 01       	movw	r24, r22
    4110:	9e 83       	std	Y+6, r25	; 0x06
    4112:	8d 83       	std	Y+5, r24	; 0x05
    4114:	0f c0       	rjmp	.+30     	; 0x4134 <HLCD_voidLCDSendCommand+0x5ac>
    4116:	88 ec       	ldi	r24, 0xC8	; 200
    4118:	90 e0       	ldi	r25, 0x00	; 0
    411a:	9c 83       	std	Y+4, r25	; 0x04
    411c:	8b 83       	std	Y+3, r24	; 0x03
    411e:	8b 81       	ldd	r24, Y+3	; 0x03
    4120:	9c 81       	ldd	r25, Y+4	; 0x04
    4122:	01 97       	sbiw	r24, 0x01	; 1
    4124:	f1 f7       	brne	.-4      	; 0x4122 <HLCD_voidLCDSendCommand+0x59a>
    4126:	9c 83       	std	Y+4, r25	; 0x04
    4128:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    412a:	8d 81       	ldd	r24, Y+5	; 0x05
    412c:	9e 81       	ldd	r25, Y+6	; 0x06
    412e:	01 97       	sbiw	r24, 0x01	; 1
    4130:	9e 83       	std	Y+6, r25	; 0x06
    4132:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4134:	8d 81       	ldd	r24, Y+5	; 0x05
    4136:	9e 81       	ldd	r25, Y+6	; 0x06
    4138:	00 97       	sbiw	r24, 0x00	; 0
    413a:	69 f7       	brne	.-38     	; 0x4116 <HLCD_voidLCDSendCommand+0x58e>
    413c:	14 c0       	rjmp	.+40     	; 0x4166 <HLCD_voidLCDSendCommand+0x5de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    413e:	6f 81       	ldd	r22, Y+7	; 0x07
    4140:	78 85       	ldd	r23, Y+8	; 0x08
    4142:	89 85       	ldd	r24, Y+9	; 0x09
    4144:	9a 85       	ldd	r25, Y+10	; 0x0a
    4146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    414a:	dc 01       	movw	r26, r24
    414c:	cb 01       	movw	r24, r22
    414e:	9e 83       	std	Y+6, r25	; 0x06
    4150:	8d 83       	std	Y+5, r24	; 0x05
    4152:	8d 81       	ldd	r24, Y+5	; 0x05
    4154:	9e 81       	ldd	r25, Y+6	; 0x06
    4156:	9a 83       	std	Y+2, r25	; 0x02
    4158:	89 83       	std	Y+1, r24	; 0x01
    415a:	89 81       	ldd	r24, Y+1	; 0x01
    415c:	9a 81       	ldd	r25, Y+2	; 0x02
    415e:	01 97       	sbiw	r24, 0x01	; 1
    4160:	f1 f7       	brne	.-4      	; 0x415e <HLCD_voidLCDSendCommand+0x5d6>
    4162:	9a 83       	std	Y+2, r25	; 0x02
    4164:	89 83       	std	Y+1, r24	; 0x01
	/*delay 2ms*/
	_delay_ms(2);

#endif

}
    4166:	c9 5b       	subi	r28, 0xB9	; 185
    4168:	df 4f       	sbci	r29, 0xFF	; 255
    416a:	0f b6       	in	r0, 0x3f	; 63
    416c:	f8 94       	cli
    416e:	de bf       	out	0x3e, r29	; 62
    4170:	0f be       	out	0x3f, r0	; 63
    4172:	cd bf       	out	0x3d, r28	; 61
    4174:	cf 91       	pop	r28
    4176:	df 91       	pop	r29
    4178:	08 95       	ret

0000417a <HLCD_voidLCDSendData>:

void HLCD_voidLCDSendData(u8 Copy_u8Data)
{
    417a:	df 93       	push	r29
    417c:	cf 93       	push	r28
    417e:	cd b7       	in	r28, 0x3d	; 61
    4180:	de b7       	in	r29, 0x3e	; 62
    4182:	c7 54       	subi	r28, 0x47	; 71
    4184:	d0 40       	sbci	r29, 0x00	; 0
    4186:	0f b6       	in	r0, 0x3f	; 63
    4188:	f8 94       	cli
    418a:	de bf       	out	0x3e, r29	; 62
    418c:	0f be       	out	0x3f, r0	; 63
    418e:	cd bf       	out	0x3d, r28	; 61
    4190:	fe 01       	movw	r30, r28
    4192:	ed 5b       	subi	r30, 0xBD	; 189
    4194:	ff 4f       	sbci	r31, 0xFF	; 255
    4196:	80 83       	st	Z, r24
	_delay_ms(2);

#elif HLCD_BIT_MODE  ==  HLCD_enu4BIT_MODE

	/*let the RS pin HIGH to send DATA*/
	DIO_enuSetPinValue(LCD_Config.RS.PortNum,LCD_Config.RS.PinNum,MPORT_enuHIGH);
    4198:	80 91 29 02 	lds	r24, 0x0229
    419c:	90 91 2a 02 	lds	r25, 0x022A
    41a0:	69 2f       	mov	r22, r25
    41a2:	41 e0       	ldi	r20, 0x01	; 1
    41a4:	0e 94 a2 1a 	call	0x3544	; 0x3544 <DIO_enuSetPinValue>
	/*let the RW pin LOW to Write DATA*/
	DIO_enuSetPinValue(LCD_Config.RW.PortNum,LCD_Config.RW.PinNum,MPORT_enuLOW);
    41a8:	80 91 2b 02 	lds	r24, 0x022B
    41ac:	90 91 2c 02 	lds	r25, 0x022C
    41b0:	69 2f       	mov	r22, r25
    41b2:	40 e0       	ldi	r20, 0x00	; 0
    41b4:	0e 94 a2 1a 	call	0x3544	; 0x3544 <DIO_enuSetPinValue>

	/*for loop to send command on the pins which intalized in the config file */
	for (int LOC_u8Counter = 4; LOC_u8Counter  < NUMBER_OF_LCD_PINS_8BIT; LOC_u8Counter ++) {
    41b8:	fe 01       	movw	r30, r28
    41ba:	ef 5b       	subi	r30, 0xBF	; 191
    41bc:	ff 4f       	sbci	r31, 0xFF	; 255
    41be:	84 e0       	ldi	r24, 0x04	; 4
    41c0:	90 e0       	ldi	r25, 0x00	; 0
    41c2:	91 83       	std	Z+1, r25	; 0x01
    41c4:	80 83       	st	Z, r24
    41c6:	71 c0       	rjmp	.+226    	; 0x42aa <HLCD_voidLCDSendData+0x130>
		// Extract each bit of the data
		u8 LOC_u8bitValue = (Copy_u8Data >> (LOC_u8Counter )) & 0x01;
    41c8:	fe 01       	movw	r30, r28
    41ca:	ed 5b       	subi	r30, 0xBD	; 189
    41cc:	ff 4f       	sbci	r31, 0xFF	; 255
    41ce:	80 81       	ld	r24, Z
    41d0:	88 2f       	mov	r24, r24
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	fe 01       	movw	r30, r28
    41d6:	ef 5b       	subi	r30, 0xBF	; 191
    41d8:	ff 4f       	sbci	r31, 0xFF	; 255
    41da:	00 80       	ld	r0, Z
    41dc:	02 c0       	rjmp	.+4      	; 0x41e2 <HLCD_voidLCDSendData+0x68>
    41de:	95 95       	asr	r25
    41e0:	87 95       	ror	r24
    41e2:	0a 94       	dec	r0
    41e4:	e2 f7       	brpl	.-8      	; 0x41de <HLCD_voidLCDSendData+0x64>
    41e6:	81 70       	andi	r24, 0x01	; 1
    41e8:	fe 01       	movw	r30, r28
    41ea:	e0 5c       	subi	r30, 0xC0	; 192
    41ec:	ff 4f       	sbci	r31, 0xFF	; 255
    41ee:	80 83       	st	Z, r24

		MPORT_enuPORT_OPTS_t    LOC_enucurrentPort;
		MPORT_enuPIN_OPTS_t     LOC_enucurrentPin;
		/*switch on the counter number to Write on each data bit from 4 to 8 to set high nibble first */

		switch (LOC_u8Counter ) {
    41f0:	fe 01       	movw	r30, r28
    41f2:	ef 5b       	subi	r30, 0xBF	; 191
    41f4:	ff 4f       	sbci	r31, 0xFF	; 255
    41f6:	80 81       	ld	r24, Z
    41f8:	91 81       	ldd	r25, Z+1	; 0x01
    41fa:	26 96       	adiw	r28, 0x06	; 6
    41fc:	9f af       	std	Y+63, r25	; 0x3f
    41fe:	8e af       	std	Y+62, r24	; 0x3e
    4200:	26 97       	sbiw	r28, 0x06	; 6
    4202:	26 96       	adiw	r28, 0x06	; 6
    4204:	8e ad       	ldd	r24, Y+62	; 0x3e
    4206:	9f ad       	ldd	r25, Y+63	; 0x3f
    4208:	26 97       	sbiw	r28, 0x06	; 6
    420a:	85 30       	cpi	r24, 0x05	; 5
    420c:	91 05       	cpc	r25, r1
    420e:	29 f1       	breq	.+74     	; 0x425a <HLCD_voidLCDSendData+0xe0>
    4210:	26 96       	adiw	r28, 0x06	; 6
    4212:	8e ad       	ldd	r24, Y+62	; 0x3e
    4214:	9f ad       	ldd	r25, Y+63	; 0x3f
    4216:	26 97       	sbiw	r28, 0x06	; 6
    4218:	86 30       	cpi	r24, 0x06	; 6
    421a:	91 05       	cpc	r25, r1
    421c:	44 f4       	brge	.+16     	; 0x422e <HLCD_voidLCDSendData+0xb4>
    421e:	26 96       	adiw	r28, 0x06	; 6
    4220:	8e ad       	ldd	r24, Y+62	; 0x3e
    4222:	9f ad       	ldd	r25, Y+63	; 0x3f
    4224:	26 97       	sbiw	r28, 0x06	; 6
    4226:	84 30       	cpi	r24, 0x04	; 4
    4228:	91 05       	cpc	r25, r1
    422a:	81 f0       	breq	.+32     	; 0x424c <HLCD_voidLCDSendData+0xd2>
    422c:	2a c0       	rjmp	.+84     	; 0x4282 <HLCD_voidLCDSendData+0x108>
    422e:	26 96       	adiw	r28, 0x06	; 6
    4230:	8e ad       	ldd	r24, Y+62	; 0x3e
    4232:	9f ad       	ldd	r25, Y+63	; 0x3f
    4234:	26 97       	sbiw	r28, 0x06	; 6
    4236:	86 30       	cpi	r24, 0x06	; 6
    4238:	91 05       	cpc	r25, r1
    423a:	b1 f0       	breq	.+44     	; 0x4268 <HLCD_voidLCDSendData+0xee>
    423c:	26 96       	adiw	r28, 0x06	; 6
    423e:	8e ad       	ldd	r24, Y+62	; 0x3e
    4240:	9f ad       	ldd	r25, Y+63	; 0x3f
    4242:	26 97       	sbiw	r28, 0x06	; 6
    4244:	87 30       	cpi	r24, 0x07	; 7
    4246:	91 05       	cpc	r25, r1
    4248:	b1 f0       	breq	.+44     	; 0x4276 <HLCD_voidLCDSendData+0xfc>
    424a:	1b c0       	rjmp	.+54     	; 0x4282 <HLCD_voidLCDSendData+0x108>
		case 4: LOC_enucurrentPort = LCD_Config.DATABIT4.PortNum; LOC_enucurrentPin = LCD_Config.DATABIT4.PinNum; break;
    424c:	80 91 21 02 	lds	r24, 0x0221
    4250:	8f af       	std	Y+63, r24	; 0x3f
    4252:	80 91 22 02 	lds	r24, 0x0222
    4256:	8e af       	std	Y+62, r24	; 0x3e
    4258:	14 c0       	rjmp	.+40     	; 0x4282 <HLCD_voidLCDSendData+0x108>
		case 5: LOC_enucurrentPort = LCD_Config.DATABIT5.PortNum; LOC_enucurrentPin = LCD_Config.DATABIT5.PinNum; break;
    425a:	80 91 23 02 	lds	r24, 0x0223
    425e:	8f af       	std	Y+63, r24	; 0x3f
    4260:	80 91 24 02 	lds	r24, 0x0224
    4264:	8e af       	std	Y+62, r24	; 0x3e
    4266:	0d c0       	rjmp	.+26     	; 0x4282 <HLCD_voidLCDSendData+0x108>
		case 6: LOC_enucurrentPort = LCD_Config.DATABIT6.PortNum; LOC_enucurrentPin = LCD_Config.DATABIT6.PinNum; break;
    4268:	80 91 25 02 	lds	r24, 0x0225
    426c:	8f af       	std	Y+63, r24	; 0x3f
    426e:	80 91 26 02 	lds	r24, 0x0226
    4272:	8e af       	std	Y+62, r24	; 0x3e
    4274:	06 c0       	rjmp	.+12     	; 0x4282 <HLCD_voidLCDSendData+0x108>
		case 7: LOC_enucurrentPort = LCD_Config.DATABIT7.PortNum; LOC_enucurrentPin = LCD_Config.DATABIT7.PinNum; break;
    4276:	80 91 27 02 	lds	r24, 0x0227
    427a:	8f af       	std	Y+63, r24	; 0x3f
    427c:	80 91 28 02 	lds	r24, 0x0228
    4280:	8e af       	std	Y+62, r24	; 0x3e
		default:                                                                                                  break;
		}
		/*after each case we use set pin value function to set the pin with its port and pin and the bit of the command*/

		DIO_enuSetPinValue(LOC_enucurrentPort, LOC_enucurrentPin, LOC_u8bitValue);
    4282:	8f ad       	ldd	r24, Y+63	; 0x3f
    4284:	6e ad       	ldd	r22, Y+62	; 0x3e
    4286:	fe 01       	movw	r30, r28
    4288:	e0 5c       	subi	r30, 0xC0	; 192
    428a:	ff 4f       	sbci	r31, 0xFF	; 255
    428c:	40 81       	ld	r20, Z
    428e:	0e 94 a2 1a 	call	0x3544	; 0x3544 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_Config.RS.PortNum,LCD_Config.RS.PinNum,MPORT_enuHIGH);
	/*let the RW pin LOW to Write DATA*/
	DIO_enuSetPinValue(LCD_Config.RW.PortNum,LCD_Config.RW.PinNum,MPORT_enuLOW);

	/*for loop to send command on the pins which intalized in the config file */
	for (int LOC_u8Counter = 4; LOC_u8Counter  < NUMBER_OF_LCD_PINS_8BIT; LOC_u8Counter ++) {
    4292:	de 01       	movw	r26, r28
    4294:	af 5b       	subi	r26, 0xBF	; 191
    4296:	bf 4f       	sbci	r27, 0xFF	; 255
    4298:	fe 01       	movw	r30, r28
    429a:	ef 5b       	subi	r30, 0xBF	; 191
    429c:	ff 4f       	sbci	r31, 0xFF	; 255
    429e:	80 81       	ld	r24, Z
    42a0:	91 81       	ldd	r25, Z+1	; 0x01
    42a2:	01 96       	adiw	r24, 0x01	; 1
    42a4:	11 96       	adiw	r26, 0x01	; 1
    42a6:	9c 93       	st	X, r25
    42a8:	8e 93       	st	-X, r24
    42aa:	fe 01       	movw	r30, r28
    42ac:	ef 5b       	subi	r30, 0xBF	; 191
    42ae:	ff 4f       	sbci	r31, 0xFF	; 255
    42b0:	80 81       	ld	r24, Z
    42b2:	91 81       	ldd	r25, Z+1	; 0x01
    42b4:	88 30       	cpi	r24, 0x08	; 8
    42b6:	91 05       	cpc	r25, r1
    42b8:	0c f4       	brge	.+2      	; 0x42bc <HLCD_voidLCDSendData+0x142>
    42ba:	86 cf       	rjmp	.-244    	; 0x41c8 <HLCD_voidLCDSendData+0x4e>
		/*after each case we use set pin value function to set the pin with its port and pin and the bit of the command*/

		DIO_enuSetPinValue(LOC_enucurrentPort, LOC_enucurrentPin, LOC_u8bitValue);
	}
	/*let the Enabel pin High */
	DIO_enuSetPinValue(LCD_Config.ENABLE.PortNum,LCD_Config.ENABLE.PinNum,MPORT_enuHIGH);
    42bc:	80 91 2d 02 	lds	r24, 0x022D
    42c0:	90 91 2e 02 	lds	r25, 0x022E
    42c4:	69 2f       	mov	r22, r25
    42c6:	41 e0       	ldi	r20, 0x01	; 1
    42c8:	0e 94 a2 1a 	call	0x3544	; 0x3544 <DIO_enuSetPinValue>
    42cc:	80 e0       	ldi	r24, 0x00	; 0
    42ce:	90 e0       	ldi	r25, 0x00	; 0
    42d0:	a0 e0       	ldi	r26, 0x00	; 0
    42d2:	b0 e4       	ldi	r27, 0x40	; 64
    42d4:	8d ab       	std	Y+53, r24	; 0x35
    42d6:	9e ab       	std	Y+54, r25	; 0x36
    42d8:	af ab       	std	Y+55, r26	; 0x37
    42da:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42dc:	6d a9       	ldd	r22, Y+53	; 0x35
    42de:	7e a9       	ldd	r23, Y+54	; 0x36
    42e0:	8f a9       	ldd	r24, Y+55	; 0x37
    42e2:	98 ad       	ldd	r25, Y+56	; 0x38
    42e4:	20 e0       	ldi	r18, 0x00	; 0
    42e6:	30 e0       	ldi	r19, 0x00	; 0
    42e8:	4a ef       	ldi	r20, 0xFA	; 250
    42ea:	54 e4       	ldi	r21, 0x44	; 68
    42ec:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    42f0:	dc 01       	movw	r26, r24
    42f2:	cb 01       	movw	r24, r22
    42f4:	89 ab       	std	Y+49, r24	; 0x31
    42f6:	9a ab       	std	Y+50, r25	; 0x32
    42f8:	ab ab       	std	Y+51, r26	; 0x33
    42fa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    42fc:	69 a9       	ldd	r22, Y+49	; 0x31
    42fe:	7a a9       	ldd	r23, Y+50	; 0x32
    4300:	8b a9       	ldd	r24, Y+51	; 0x33
    4302:	9c a9       	ldd	r25, Y+52	; 0x34
    4304:	20 e0       	ldi	r18, 0x00	; 0
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	40 e8       	ldi	r20, 0x80	; 128
    430a:	5f e3       	ldi	r21, 0x3F	; 63
    430c:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    4310:	88 23       	and	r24, r24
    4312:	2c f4       	brge	.+10     	; 0x431e <HLCD_voidLCDSendData+0x1a4>
		__ticks = 1;
    4314:	81 e0       	ldi	r24, 0x01	; 1
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	98 ab       	std	Y+48, r25	; 0x30
    431a:	8f a7       	std	Y+47, r24	; 0x2f
    431c:	3f c0       	rjmp	.+126    	; 0x439c <HLCD_voidLCDSendData+0x222>
	else if (__tmp > 65535)
    431e:	69 a9       	ldd	r22, Y+49	; 0x31
    4320:	7a a9       	ldd	r23, Y+50	; 0x32
    4322:	8b a9       	ldd	r24, Y+51	; 0x33
    4324:	9c a9       	ldd	r25, Y+52	; 0x34
    4326:	20 e0       	ldi	r18, 0x00	; 0
    4328:	3f ef       	ldi	r19, 0xFF	; 255
    432a:	4f e7       	ldi	r20, 0x7F	; 127
    432c:	57 e4       	ldi	r21, 0x47	; 71
    432e:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    4332:	18 16       	cp	r1, r24
    4334:	4c f5       	brge	.+82     	; 0x4388 <HLCD_voidLCDSendData+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4336:	6d a9       	ldd	r22, Y+53	; 0x35
    4338:	7e a9       	ldd	r23, Y+54	; 0x36
    433a:	8f a9       	ldd	r24, Y+55	; 0x37
    433c:	98 ad       	ldd	r25, Y+56	; 0x38
    433e:	20 e0       	ldi	r18, 0x00	; 0
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	40 e2       	ldi	r20, 0x20	; 32
    4344:	51 e4       	ldi	r21, 0x41	; 65
    4346:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    434a:	dc 01       	movw	r26, r24
    434c:	cb 01       	movw	r24, r22
    434e:	bc 01       	movw	r22, r24
    4350:	cd 01       	movw	r24, r26
    4352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4356:	dc 01       	movw	r26, r24
    4358:	cb 01       	movw	r24, r22
    435a:	98 ab       	std	Y+48, r25	; 0x30
    435c:	8f a7       	std	Y+47, r24	; 0x2f
    435e:	0f c0       	rjmp	.+30     	; 0x437e <HLCD_voidLCDSendData+0x204>
    4360:	88 ec       	ldi	r24, 0xC8	; 200
    4362:	90 e0       	ldi	r25, 0x00	; 0
    4364:	9e a7       	std	Y+46, r25	; 0x2e
    4366:	8d a7       	std	Y+45, r24	; 0x2d
    4368:	8d a5       	ldd	r24, Y+45	; 0x2d
    436a:	9e a5       	ldd	r25, Y+46	; 0x2e
    436c:	01 97       	sbiw	r24, 0x01	; 1
    436e:	f1 f7       	brne	.-4      	; 0x436c <HLCD_voidLCDSendData+0x1f2>
    4370:	9e a7       	std	Y+46, r25	; 0x2e
    4372:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4374:	8f a5       	ldd	r24, Y+47	; 0x2f
    4376:	98 a9       	ldd	r25, Y+48	; 0x30
    4378:	01 97       	sbiw	r24, 0x01	; 1
    437a:	98 ab       	std	Y+48, r25	; 0x30
    437c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    437e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4380:	98 a9       	ldd	r25, Y+48	; 0x30
    4382:	00 97       	sbiw	r24, 0x00	; 0
    4384:	69 f7       	brne	.-38     	; 0x4360 <HLCD_voidLCDSendData+0x1e6>
    4386:	14 c0       	rjmp	.+40     	; 0x43b0 <HLCD_voidLCDSendData+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4388:	69 a9       	ldd	r22, Y+49	; 0x31
    438a:	7a a9       	ldd	r23, Y+50	; 0x32
    438c:	8b a9       	ldd	r24, Y+51	; 0x33
    438e:	9c a9       	ldd	r25, Y+52	; 0x34
    4390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4394:	dc 01       	movw	r26, r24
    4396:	cb 01       	movw	r24, r22
    4398:	98 ab       	std	Y+48, r25	; 0x30
    439a:	8f a7       	std	Y+47, r24	; 0x2f
    439c:	8f a5       	ldd	r24, Y+47	; 0x2f
    439e:	98 a9       	ldd	r25, Y+48	; 0x30
    43a0:	9c a7       	std	Y+44, r25	; 0x2c
    43a2:	8b a7       	std	Y+43, r24	; 0x2b
    43a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    43a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    43a8:	01 97       	sbiw	r24, 0x01	; 1
    43aa:	f1 f7       	brne	.-4      	; 0x43a8 <HLCD_voidLCDSendData+0x22e>
    43ac:	9c a7       	std	Y+44, r25	; 0x2c
    43ae:	8b a7       	std	Y+43, r24	; 0x2b
	/*delay 2ms*/
	_delay_ms(2);
	/*let the Enabel pin Low */
	DIO_enuSetPinValue(LCD_Config.ENABLE.PortNum,LCD_Config.ENABLE.PinNum,MPORT_enuLOW);
    43b0:	80 91 2d 02 	lds	r24, 0x022D
    43b4:	90 91 2e 02 	lds	r25, 0x022E
    43b8:	69 2f       	mov	r22, r25
    43ba:	40 e0       	ldi	r20, 0x00	; 0
    43bc:	0e 94 a2 1a 	call	0x3544	; 0x3544 <DIO_enuSetPinValue>
    43c0:	80 e0       	ldi	r24, 0x00	; 0
    43c2:	90 e0       	ldi	r25, 0x00	; 0
    43c4:	a0 e0       	ldi	r26, 0x00	; 0
    43c6:	b0 e4       	ldi	r27, 0x40	; 64
    43c8:	8f a3       	std	Y+39, r24	; 0x27
    43ca:	98 a7       	std	Y+40, r25	; 0x28
    43cc:	a9 a7       	std	Y+41, r26	; 0x29
    43ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43d0:	6f a1       	ldd	r22, Y+39	; 0x27
    43d2:	78 a5       	ldd	r23, Y+40	; 0x28
    43d4:	89 a5       	ldd	r24, Y+41	; 0x29
    43d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    43d8:	20 e0       	ldi	r18, 0x00	; 0
    43da:	30 e0       	ldi	r19, 0x00	; 0
    43dc:	4a ef       	ldi	r20, 0xFA	; 250
    43de:	54 e4       	ldi	r21, 0x44	; 68
    43e0:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    43e4:	dc 01       	movw	r26, r24
    43e6:	cb 01       	movw	r24, r22
    43e8:	8b a3       	std	Y+35, r24	; 0x23
    43ea:	9c a3       	std	Y+36, r25	; 0x24
    43ec:	ad a3       	std	Y+37, r26	; 0x25
    43ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    43f0:	6b a1       	ldd	r22, Y+35	; 0x23
    43f2:	7c a1       	ldd	r23, Y+36	; 0x24
    43f4:	8d a1       	ldd	r24, Y+37	; 0x25
    43f6:	9e a1       	ldd	r25, Y+38	; 0x26
    43f8:	20 e0       	ldi	r18, 0x00	; 0
    43fa:	30 e0       	ldi	r19, 0x00	; 0
    43fc:	40 e8       	ldi	r20, 0x80	; 128
    43fe:	5f e3       	ldi	r21, 0x3F	; 63
    4400:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    4404:	88 23       	and	r24, r24
    4406:	2c f4       	brge	.+10     	; 0x4412 <HLCD_voidLCDSendData+0x298>
		__ticks = 1;
    4408:	81 e0       	ldi	r24, 0x01	; 1
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	9a a3       	std	Y+34, r25	; 0x22
    440e:	89 a3       	std	Y+33, r24	; 0x21
    4410:	3f c0       	rjmp	.+126    	; 0x4490 <HLCD_voidLCDSendData+0x316>
	else if (__tmp > 65535)
    4412:	6b a1       	ldd	r22, Y+35	; 0x23
    4414:	7c a1       	ldd	r23, Y+36	; 0x24
    4416:	8d a1       	ldd	r24, Y+37	; 0x25
    4418:	9e a1       	ldd	r25, Y+38	; 0x26
    441a:	20 e0       	ldi	r18, 0x00	; 0
    441c:	3f ef       	ldi	r19, 0xFF	; 255
    441e:	4f e7       	ldi	r20, 0x7F	; 127
    4420:	57 e4       	ldi	r21, 0x47	; 71
    4422:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    4426:	18 16       	cp	r1, r24
    4428:	4c f5       	brge	.+82     	; 0x447c <HLCD_voidLCDSendData+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    442a:	6f a1       	ldd	r22, Y+39	; 0x27
    442c:	78 a5       	ldd	r23, Y+40	; 0x28
    442e:	89 a5       	ldd	r24, Y+41	; 0x29
    4430:	9a a5       	ldd	r25, Y+42	; 0x2a
    4432:	20 e0       	ldi	r18, 0x00	; 0
    4434:	30 e0       	ldi	r19, 0x00	; 0
    4436:	40 e2       	ldi	r20, 0x20	; 32
    4438:	51 e4       	ldi	r21, 0x41	; 65
    443a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    443e:	dc 01       	movw	r26, r24
    4440:	cb 01       	movw	r24, r22
    4442:	bc 01       	movw	r22, r24
    4444:	cd 01       	movw	r24, r26
    4446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    444a:	dc 01       	movw	r26, r24
    444c:	cb 01       	movw	r24, r22
    444e:	9a a3       	std	Y+34, r25	; 0x22
    4450:	89 a3       	std	Y+33, r24	; 0x21
    4452:	0f c0       	rjmp	.+30     	; 0x4472 <HLCD_voidLCDSendData+0x2f8>
    4454:	88 ec       	ldi	r24, 0xC8	; 200
    4456:	90 e0       	ldi	r25, 0x00	; 0
    4458:	98 a3       	std	Y+32, r25	; 0x20
    445a:	8f 8f       	std	Y+31, r24	; 0x1f
    445c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    445e:	98 a1       	ldd	r25, Y+32	; 0x20
    4460:	01 97       	sbiw	r24, 0x01	; 1
    4462:	f1 f7       	brne	.-4      	; 0x4460 <HLCD_voidLCDSendData+0x2e6>
    4464:	98 a3       	std	Y+32, r25	; 0x20
    4466:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4468:	89 a1       	ldd	r24, Y+33	; 0x21
    446a:	9a a1       	ldd	r25, Y+34	; 0x22
    446c:	01 97       	sbiw	r24, 0x01	; 1
    446e:	9a a3       	std	Y+34, r25	; 0x22
    4470:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4472:	89 a1       	ldd	r24, Y+33	; 0x21
    4474:	9a a1       	ldd	r25, Y+34	; 0x22
    4476:	00 97       	sbiw	r24, 0x00	; 0
    4478:	69 f7       	brne	.-38     	; 0x4454 <HLCD_voidLCDSendData+0x2da>
    447a:	14 c0       	rjmp	.+40     	; 0x44a4 <HLCD_voidLCDSendData+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    447c:	6b a1       	ldd	r22, Y+35	; 0x23
    447e:	7c a1       	ldd	r23, Y+36	; 0x24
    4480:	8d a1       	ldd	r24, Y+37	; 0x25
    4482:	9e a1       	ldd	r25, Y+38	; 0x26
    4484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4488:	dc 01       	movw	r26, r24
    448a:	cb 01       	movw	r24, r22
    448c:	9a a3       	std	Y+34, r25	; 0x22
    448e:	89 a3       	std	Y+33, r24	; 0x21
    4490:	89 a1       	ldd	r24, Y+33	; 0x21
    4492:	9a a1       	ldd	r25, Y+34	; 0x22
    4494:	9e 8f       	std	Y+30, r25	; 0x1e
    4496:	8d 8f       	std	Y+29, r24	; 0x1d
    4498:	8d 8d       	ldd	r24, Y+29	; 0x1d
    449a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    449c:	01 97       	sbiw	r24, 0x01	; 1
    449e:	f1 f7       	brne	.-4      	; 0x449c <HLCD_voidLCDSendData+0x322>
    44a0:	9e 8f       	std	Y+30, r25	; 0x1e
    44a2:	8d 8f       	std	Y+29, r24	; 0x1d
	/*delay 2ms*/
	_delay_ms(2);
	/************************************************for low nibble *****************************************/
	/*for loop to send command on the pins which intlized in the config file */
	for (int LOC_u8Counter = 0; LOC_u8Counter  < NUMBER_OF_LCD_PINS_4BIT; LOC_u8Counter ++) {
    44a4:	1d ae       	std	Y+61, r1	; 0x3d
    44a6:	1c ae       	std	Y+60, r1	; 0x3c
    44a8:	5d c0       	rjmp	.+186    	; 0x4564 <HLCD_voidLCDSendData+0x3ea>
		// Extract each bit of the data
		u8 LOC_u8bitValue = (Copy_u8Data >> (LOC_u8Counter )) & 0x01;
    44aa:	fe 01       	movw	r30, r28
    44ac:	ed 5b       	subi	r30, 0xBD	; 189
    44ae:	ff 4f       	sbci	r31, 0xFF	; 255
    44b0:	80 81       	ld	r24, Z
    44b2:	88 2f       	mov	r24, r24
    44b4:	90 e0       	ldi	r25, 0x00	; 0
    44b6:	0c ac       	ldd	r0, Y+60	; 0x3c
    44b8:	02 c0       	rjmp	.+4      	; 0x44be <HLCD_voidLCDSendData+0x344>
    44ba:	95 95       	asr	r25
    44bc:	87 95       	ror	r24
    44be:	0a 94       	dec	r0
    44c0:	e2 f7       	brpl	.-8      	; 0x44ba <HLCD_voidLCDSendData+0x340>
    44c2:	81 70       	andi	r24, 0x01	; 1
    44c4:	8b af       	std	Y+59, r24	; 0x3b

		MPORT_enuPORT_OPTS_t    LOC_enucurrentPort;
		MPORT_enuPIN_OPTS_t     LOC_enucurrentPin;
		/*switch on the counter number to Write on each data bit from 0 to 4 to set Low nibble */

		switch (LOC_u8Counter ) {
    44c6:	8c ad       	ldd	r24, Y+60	; 0x3c
    44c8:	9d ad       	ldd	r25, Y+61	; 0x3d
    44ca:	28 96       	adiw	r28, 0x08	; 8
    44cc:	9f af       	std	Y+63, r25	; 0x3f
    44ce:	8e af       	std	Y+62, r24	; 0x3e
    44d0:	28 97       	sbiw	r28, 0x08	; 8
    44d2:	28 96       	adiw	r28, 0x08	; 8
    44d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    44d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    44d8:	28 97       	sbiw	r28, 0x08	; 8
    44da:	81 30       	cpi	r24, 0x01	; 1
    44dc:	91 05       	cpc	r25, r1
    44de:	21 f1       	breq	.+72     	; 0x4528 <HLCD_voidLCDSendData+0x3ae>
    44e0:	28 96       	adiw	r28, 0x08	; 8
    44e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    44e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    44e6:	28 97       	sbiw	r28, 0x08	; 8
    44e8:	82 30       	cpi	r24, 0x02	; 2
    44ea:	91 05       	cpc	r25, r1
    44ec:	3c f4       	brge	.+14     	; 0x44fc <HLCD_voidLCDSendData+0x382>
    44ee:	28 96       	adiw	r28, 0x08	; 8
    44f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    44f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    44f4:	28 97       	sbiw	r28, 0x08	; 8
    44f6:	00 97       	sbiw	r24, 0x00	; 0
    44f8:	81 f0       	breq	.+32     	; 0x451a <HLCD_voidLCDSendData+0x3a0>
    44fa:	2a c0       	rjmp	.+84     	; 0x4550 <HLCD_voidLCDSendData+0x3d6>
    44fc:	28 96       	adiw	r28, 0x08	; 8
    44fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    4500:	9f ad       	ldd	r25, Y+63	; 0x3f
    4502:	28 97       	sbiw	r28, 0x08	; 8
    4504:	82 30       	cpi	r24, 0x02	; 2
    4506:	91 05       	cpc	r25, r1
    4508:	b1 f0       	breq	.+44     	; 0x4536 <HLCD_voidLCDSendData+0x3bc>
    450a:	28 96       	adiw	r28, 0x08	; 8
    450c:	8e ad       	ldd	r24, Y+62	; 0x3e
    450e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4510:	28 97       	sbiw	r28, 0x08	; 8
    4512:	83 30       	cpi	r24, 0x03	; 3
    4514:	91 05       	cpc	r25, r1
    4516:	b1 f0       	breq	.+44     	; 0x4544 <HLCD_voidLCDSendData+0x3ca>
    4518:	1b c0       	rjmp	.+54     	; 0x4550 <HLCD_voidLCDSendData+0x3d6>
		case 0: LOC_enucurrentPort = LCD_Config.DATABIT4.PortNum; LOC_enucurrentPin = LCD_Config.DATABIT4.PinNum; break;
    451a:	80 91 21 02 	lds	r24, 0x0221
    451e:	8a af       	std	Y+58, r24	; 0x3a
    4520:	80 91 22 02 	lds	r24, 0x0222
    4524:	89 af       	std	Y+57, r24	; 0x39
    4526:	14 c0       	rjmp	.+40     	; 0x4550 <HLCD_voidLCDSendData+0x3d6>
		case 1: LOC_enucurrentPort = LCD_Config.DATABIT5.PortNum; LOC_enucurrentPin = LCD_Config.DATABIT5.PinNum; break;
    4528:	80 91 23 02 	lds	r24, 0x0223
    452c:	8a af       	std	Y+58, r24	; 0x3a
    452e:	80 91 24 02 	lds	r24, 0x0224
    4532:	89 af       	std	Y+57, r24	; 0x39
    4534:	0d c0       	rjmp	.+26     	; 0x4550 <HLCD_voidLCDSendData+0x3d6>
		case 2: LOC_enucurrentPort = LCD_Config.DATABIT6.PortNum; LOC_enucurrentPin = LCD_Config.DATABIT6.PinNum; break;
    4536:	80 91 25 02 	lds	r24, 0x0225
    453a:	8a af       	std	Y+58, r24	; 0x3a
    453c:	80 91 26 02 	lds	r24, 0x0226
    4540:	89 af       	std	Y+57, r24	; 0x39
    4542:	06 c0       	rjmp	.+12     	; 0x4550 <HLCD_voidLCDSendData+0x3d6>
		case 3: LOC_enucurrentPort = LCD_Config.DATABIT7.PortNum; LOC_enucurrentPin = LCD_Config.DATABIT7.PinNum; break;
    4544:	80 91 27 02 	lds	r24, 0x0227
    4548:	8a af       	std	Y+58, r24	; 0x3a
    454a:	80 91 28 02 	lds	r24, 0x0228
    454e:	89 af       	std	Y+57, r24	; 0x39
		default:                                                                                                  break;
		}
		/*after each case we use set pin value function to set the pin with its port and pin and the bit of the command*/

		DIO_enuSetPinValue(LOC_enucurrentPort, LOC_enucurrentPin, LOC_u8bitValue);
    4550:	8a ad       	ldd	r24, Y+58	; 0x3a
    4552:	69 ad       	ldd	r22, Y+57	; 0x39
    4554:	4b ad       	ldd	r20, Y+59	; 0x3b
    4556:	0e 94 a2 1a 	call	0x3544	; 0x3544 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_Config.ENABLE.PortNum,LCD_Config.ENABLE.PinNum,MPORT_enuLOW);
	/*delay 2ms*/
	_delay_ms(2);
	/************************************************for low nibble *****************************************/
	/*for loop to send command on the pins which intlized in the config file */
	for (int LOC_u8Counter = 0; LOC_u8Counter  < NUMBER_OF_LCD_PINS_4BIT; LOC_u8Counter ++) {
    455a:	8c ad       	ldd	r24, Y+60	; 0x3c
    455c:	9d ad       	ldd	r25, Y+61	; 0x3d
    455e:	01 96       	adiw	r24, 0x01	; 1
    4560:	9d af       	std	Y+61, r25	; 0x3d
    4562:	8c af       	std	Y+60, r24	; 0x3c
    4564:	8c ad       	ldd	r24, Y+60	; 0x3c
    4566:	9d ad       	ldd	r25, Y+61	; 0x3d
    4568:	84 30       	cpi	r24, 0x04	; 4
    456a:	91 05       	cpc	r25, r1
    456c:	0c f4       	brge	.+2      	; 0x4570 <HLCD_voidLCDSendData+0x3f6>
    456e:	9d cf       	rjmp	.-198    	; 0x44aa <HLCD_voidLCDSendData+0x330>
		/*after each case we use set pin value function to set the pin with its port and pin and the bit of the command*/

		DIO_enuSetPinValue(LOC_enucurrentPort, LOC_enucurrentPin, LOC_u8bitValue);
	}
	/*Set the Enabel pin High */
	DIO_enuSetPinValue(LCD_Config.ENABLE.PortNum,LCD_Config.ENABLE.PinNum,MPORT_enuHIGH);
    4570:	80 91 2d 02 	lds	r24, 0x022D
    4574:	90 91 2e 02 	lds	r25, 0x022E
    4578:	69 2f       	mov	r22, r25
    457a:	41 e0       	ldi	r20, 0x01	; 1
    457c:	0e 94 a2 1a 	call	0x3544	; 0x3544 <DIO_enuSetPinValue>
    4580:	80 e0       	ldi	r24, 0x00	; 0
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	a0 e0       	ldi	r26, 0x00	; 0
    4586:	b0 e4       	ldi	r27, 0x40	; 64
    4588:	89 8f       	std	Y+25, r24	; 0x19
    458a:	9a 8f       	std	Y+26, r25	; 0x1a
    458c:	ab 8f       	std	Y+27, r26	; 0x1b
    458e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4590:	69 8d       	ldd	r22, Y+25	; 0x19
    4592:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4594:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4596:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4598:	20 e0       	ldi	r18, 0x00	; 0
    459a:	30 e0       	ldi	r19, 0x00	; 0
    459c:	4a ef       	ldi	r20, 0xFA	; 250
    459e:	54 e4       	ldi	r21, 0x44	; 68
    45a0:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    45a4:	dc 01       	movw	r26, r24
    45a6:	cb 01       	movw	r24, r22
    45a8:	8d 8b       	std	Y+21, r24	; 0x15
    45aa:	9e 8b       	std	Y+22, r25	; 0x16
    45ac:	af 8b       	std	Y+23, r26	; 0x17
    45ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    45b0:	6d 89       	ldd	r22, Y+21	; 0x15
    45b2:	7e 89       	ldd	r23, Y+22	; 0x16
    45b4:	8f 89       	ldd	r24, Y+23	; 0x17
    45b6:	98 8d       	ldd	r25, Y+24	; 0x18
    45b8:	20 e0       	ldi	r18, 0x00	; 0
    45ba:	30 e0       	ldi	r19, 0x00	; 0
    45bc:	40 e8       	ldi	r20, 0x80	; 128
    45be:	5f e3       	ldi	r21, 0x3F	; 63
    45c0:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    45c4:	88 23       	and	r24, r24
    45c6:	2c f4       	brge	.+10     	; 0x45d2 <HLCD_voidLCDSendData+0x458>
		__ticks = 1;
    45c8:	81 e0       	ldi	r24, 0x01	; 1
    45ca:	90 e0       	ldi	r25, 0x00	; 0
    45cc:	9c 8b       	std	Y+20, r25	; 0x14
    45ce:	8b 8b       	std	Y+19, r24	; 0x13
    45d0:	3f c0       	rjmp	.+126    	; 0x4650 <HLCD_voidLCDSendData+0x4d6>
	else if (__tmp > 65535)
    45d2:	6d 89       	ldd	r22, Y+21	; 0x15
    45d4:	7e 89       	ldd	r23, Y+22	; 0x16
    45d6:	8f 89       	ldd	r24, Y+23	; 0x17
    45d8:	98 8d       	ldd	r25, Y+24	; 0x18
    45da:	20 e0       	ldi	r18, 0x00	; 0
    45dc:	3f ef       	ldi	r19, 0xFF	; 255
    45de:	4f e7       	ldi	r20, 0x7F	; 127
    45e0:	57 e4       	ldi	r21, 0x47	; 71
    45e2:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    45e6:	18 16       	cp	r1, r24
    45e8:	4c f5       	brge	.+82     	; 0x463c <HLCD_voidLCDSendData+0x4c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45ea:	69 8d       	ldd	r22, Y+25	; 0x19
    45ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45f2:	20 e0       	ldi	r18, 0x00	; 0
    45f4:	30 e0       	ldi	r19, 0x00	; 0
    45f6:	40 e2       	ldi	r20, 0x20	; 32
    45f8:	51 e4       	ldi	r21, 0x41	; 65
    45fa:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    45fe:	dc 01       	movw	r26, r24
    4600:	cb 01       	movw	r24, r22
    4602:	bc 01       	movw	r22, r24
    4604:	cd 01       	movw	r24, r26
    4606:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    460a:	dc 01       	movw	r26, r24
    460c:	cb 01       	movw	r24, r22
    460e:	9c 8b       	std	Y+20, r25	; 0x14
    4610:	8b 8b       	std	Y+19, r24	; 0x13
    4612:	0f c0       	rjmp	.+30     	; 0x4632 <HLCD_voidLCDSendData+0x4b8>
    4614:	88 ec       	ldi	r24, 0xC8	; 200
    4616:	90 e0       	ldi	r25, 0x00	; 0
    4618:	9a 8b       	std	Y+18, r25	; 0x12
    461a:	89 8b       	std	Y+17, r24	; 0x11
    461c:	89 89       	ldd	r24, Y+17	; 0x11
    461e:	9a 89       	ldd	r25, Y+18	; 0x12
    4620:	01 97       	sbiw	r24, 0x01	; 1
    4622:	f1 f7       	brne	.-4      	; 0x4620 <HLCD_voidLCDSendData+0x4a6>
    4624:	9a 8b       	std	Y+18, r25	; 0x12
    4626:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4628:	8b 89       	ldd	r24, Y+19	; 0x13
    462a:	9c 89       	ldd	r25, Y+20	; 0x14
    462c:	01 97       	sbiw	r24, 0x01	; 1
    462e:	9c 8b       	std	Y+20, r25	; 0x14
    4630:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4632:	8b 89       	ldd	r24, Y+19	; 0x13
    4634:	9c 89       	ldd	r25, Y+20	; 0x14
    4636:	00 97       	sbiw	r24, 0x00	; 0
    4638:	69 f7       	brne	.-38     	; 0x4614 <HLCD_voidLCDSendData+0x49a>
    463a:	14 c0       	rjmp	.+40     	; 0x4664 <HLCD_voidLCDSendData+0x4ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    463c:	6d 89       	ldd	r22, Y+21	; 0x15
    463e:	7e 89       	ldd	r23, Y+22	; 0x16
    4640:	8f 89       	ldd	r24, Y+23	; 0x17
    4642:	98 8d       	ldd	r25, Y+24	; 0x18
    4644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4648:	dc 01       	movw	r26, r24
    464a:	cb 01       	movw	r24, r22
    464c:	9c 8b       	std	Y+20, r25	; 0x14
    464e:	8b 8b       	std	Y+19, r24	; 0x13
    4650:	8b 89       	ldd	r24, Y+19	; 0x13
    4652:	9c 89       	ldd	r25, Y+20	; 0x14
    4654:	98 8b       	std	Y+16, r25	; 0x10
    4656:	8f 87       	std	Y+15, r24	; 0x0f
    4658:	8f 85       	ldd	r24, Y+15	; 0x0f
    465a:	98 89       	ldd	r25, Y+16	; 0x10
    465c:	01 97       	sbiw	r24, 0x01	; 1
    465e:	f1 f7       	brne	.-4      	; 0x465c <HLCD_voidLCDSendData+0x4e2>
    4660:	98 8b       	std	Y+16, r25	; 0x10
    4662:	8f 87       	std	Y+15, r24	; 0x0f
	/*delay 2ms*/
	_delay_ms(2);
	/*Set the Enabel pin Low */
	DIO_enuSetPinValue(LCD_Config.ENABLE.PortNum,LCD_Config.ENABLE.PinNum,MPORT_enuLOW);
    4664:	80 91 2d 02 	lds	r24, 0x022D
    4668:	90 91 2e 02 	lds	r25, 0x022E
    466c:	69 2f       	mov	r22, r25
    466e:	40 e0       	ldi	r20, 0x00	; 0
    4670:	0e 94 a2 1a 	call	0x3544	; 0x3544 <DIO_enuSetPinValue>
    4674:	80 e0       	ldi	r24, 0x00	; 0
    4676:	90 e0       	ldi	r25, 0x00	; 0
    4678:	a0 e0       	ldi	r26, 0x00	; 0
    467a:	b0 e4       	ldi	r27, 0x40	; 64
    467c:	8b 87       	std	Y+11, r24	; 0x0b
    467e:	9c 87       	std	Y+12, r25	; 0x0c
    4680:	ad 87       	std	Y+13, r26	; 0x0d
    4682:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4684:	6b 85       	ldd	r22, Y+11	; 0x0b
    4686:	7c 85       	ldd	r23, Y+12	; 0x0c
    4688:	8d 85       	ldd	r24, Y+13	; 0x0d
    468a:	9e 85       	ldd	r25, Y+14	; 0x0e
    468c:	20 e0       	ldi	r18, 0x00	; 0
    468e:	30 e0       	ldi	r19, 0x00	; 0
    4690:	4a ef       	ldi	r20, 0xFA	; 250
    4692:	54 e4       	ldi	r21, 0x44	; 68
    4694:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4698:	dc 01       	movw	r26, r24
    469a:	cb 01       	movw	r24, r22
    469c:	8f 83       	std	Y+7, r24	; 0x07
    469e:	98 87       	std	Y+8, r25	; 0x08
    46a0:	a9 87       	std	Y+9, r26	; 0x09
    46a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46a4:	6f 81       	ldd	r22, Y+7	; 0x07
    46a6:	78 85       	ldd	r23, Y+8	; 0x08
    46a8:	89 85       	ldd	r24, Y+9	; 0x09
    46aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    46ac:	20 e0       	ldi	r18, 0x00	; 0
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	40 e8       	ldi	r20, 0x80	; 128
    46b2:	5f e3       	ldi	r21, 0x3F	; 63
    46b4:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    46b8:	88 23       	and	r24, r24
    46ba:	2c f4       	brge	.+10     	; 0x46c6 <HLCD_voidLCDSendData+0x54c>
		__ticks = 1;
    46bc:	81 e0       	ldi	r24, 0x01	; 1
    46be:	90 e0       	ldi	r25, 0x00	; 0
    46c0:	9e 83       	std	Y+6, r25	; 0x06
    46c2:	8d 83       	std	Y+5, r24	; 0x05
    46c4:	3f c0       	rjmp	.+126    	; 0x4744 <HLCD_voidLCDSendData+0x5ca>
	else if (__tmp > 65535)
    46c6:	6f 81       	ldd	r22, Y+7	; 0x07
    46c8:	78 85       	ldd	r23, Y+8	; 0x08
    46ca:	89 85       	ldd	r24, Y+9	; 0x09
    46cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    46ce:	20 e0       	ldi	r18, 0x00	; 0
    46d0:	3f ef       	ldi	r19, 0xFF	; 255
    46d2:	4f e7       	ldi	r20, 0x7F	; 127
    46d4:	57 e4       	ldi	r21, 0x47	; 71
    46d6:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    46da:	18 16       	cp	r1, r24
    46dc:	4c f5       	brge	.+82     	; 0x4730 <HLCD_voidLCDSendData+0x5b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46de:	6b 85       	ldd	r22, Y+11	; 0x0b
    46e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    46e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    46e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    46e6:	20 e0       	ldi	r18, 0x00	; 0
    46e8:	30 e0       	ldi	r19, 0x00	; 0
    46ea:	40 e2       	ldi	r20, 0x20	; 32
    46ec:	51 e4       	ldi	r21, 0x41	; 65
    46ee:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    46f2:	dc 01       	movw	r26, r24
    46f4:	cb 01       	movw	r24, r22
    46f6:	bc 01       	movw	r22, r24
    46f8:	cd 01       	movw	r24, r26
    46fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46fe:	dc 01       	movw	r26, r24
    4700:	cb 01       	movw	r24, r22
    4702:	9e 83       	std	Y+6, r25	; 0x06
    4704:	8d 83       	std	Y+5, r24	; 0x05
    4706:	0f c0       	rjmp	.+30     	; 0x4726 <HLCD_voidLCDSendData+0x5ac>
    4708:	88 ec       	ldi	r24, 0xC8	; 200
    470a:	90 e0       	ldi	r25, 0x00	; 0
    470c:	9c 83       	std	Y+4, r25	; 0x04
    470e:	8b 83       	std	Y+3, r24	; 0x03
    4710:	8b 81       	ldd	r24, Y+3	; 0x03
    4712:	9c 81       	ldd	r25, Y+4	; 0x04
    4714:	01 97       	sbiw	r24, 0x01	; 1
    4716:	f1 f7       	brne	.-4      	; 0x4714 <HLCD_voidLCDSendData+0x59a>
    4718:	9c 83       	std	Y+4, r25	; 0x04
    471a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    471c:	8d 81       	ldd	r24, Y+5	; 0x05
    471e:	9e 81       	ldd	r25, Y+6	; 0x06
    4720:	01 97       	sbiw	r24, 0x01	; 1
    4722:	9e 83       	std	Y+6, r25	; 0x06
    4724:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4726:	8d 81       	ldd	r24, Y+5	; 0x05
    4728:	9e 81       	ldd	r25, Y+6	; 0x06
    472a:	00 97       	sbiw	r24, 0x00	; 0
    472c:	69 f7       	brne	.-38     	; 0x4708 <HLCD_voidLCDSendData+0x58e>
    472e:	14 c0       	rjmp	.+40     	; 0x4758 <HLCD_voidLCDSendData+0x5de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4730:	6f 81       	ldd	r22, Y+7	; 0x07
    4732:	78 85       	ldd	r23, Y+8	; 0x08
    4734:	89 85       	ldd	r24, Y+9	; 0x09
    4736:	9a 85       	ldd	r25, Y+10	; 0x0a
    4738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    473c:	dc 01       	movw	r26, r24
    473e:	cb 01       	movw	r24, r22
    4740:	9e 83       	std	Y+6, r25	; 0x06
    4742:	8d 83       	std	Y+5, r24	; 0x05
    4744:	8d 81       	ldd	r24, Y+5	; 0x05
    4746:	9e 81       	ldd	r25, Y+6	; 0x06
    4748:	9a 83       	std	Y+2, r25	; 0x02
    474a:	89 83       	std	Y+1, r24	; 0x01
    474c:	89 81       	ldd	r24, Y+1	; 0x01
    474e:	9a 81       	ldd	r25, Y+2	; 0x02
    4750:	01 97       	sbiw	r24, 0x01	; 1
    4752:	f1 f7       	brne	.-4      	; 0x4750 <HLCD_voidLCDSendData+0x5d6>
    4754:	9a 83       	std	Y+2, r25	; 0x02
    4756:	89 83       	std	Y+1, r24	; 0x01
	/*delay 2ms*/
	_delay_ms(2);

#endif

}
    4758:	c9 5b       	subi	r28, 0xB9	; 185
    475a:	df 4f       	sbci	r29, 0xFF	; 255
    475c:	0f b6       	in	r0, 0x3f	; 63
    475e:	f8 94       	cli
    4760:	de bf       	out	0x3e, r29	; 62
    4762:	0f be       	out	0x3f, r0	; 63
    4764:	cd bf       	out	0x3d, r28	; 61
    4766:	cf 91       	pop	r28
    4768:	df 91       	pop	r29
    476a:	08 95       	ret

0000476c <HLCD_voidLCDInit>:

void HLCD_voidLCDInit(void)
{
    476c:	0f 93       	push	r16
    476e:	1f 93       	push	r17
    4770:	df 93       	push	r29
    4772:	cf 93       	push	r28
    4774:	cd b7       	in	r28, 0x3d	; 61
    4776:	de b7       	in	r29, 0x3e	; 62
    4778:	c6 54       	subi	r28, 0x46	; 70
    477a:	d0 40       	sbci	r29, 0x00	; 0
    477c:	0f b6       	in	r0, 0x3f	; 63
    477e:	f8 94       	cli
    4780:	de bf       	out	0x3e, r29	; 62
    4782:	0f be       	out	0x3f, r0	; 63
    4784:	cd bf       	out	0x3d, r28	; 61
	_delay_ms(2);

#elif HLCD_BIT_MODE  ==  HLCD_enu4BIT_MODE

	/*Sending Fixed FunctionSet Command for 8 Bit Mode*/
	HLCD_voidLCDSendCommand( HLCD_Fixed1_FunctionSet_4BIT_CMD );
    4786:	82 e0       	ldi	r24, 0x02	; 2
    4788:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <HLCD_voidLCDSendCommand>
    478c:	fe 01       	movw	r30, r28
    478e:	ed 5b       	subi	r30, 0xBD	; 189
    4790:	ff 4f       	sbci	r31, 0xFF	; 255
    4792:	80 e0       	ldi	r24, 0x00	; 0
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	a0 e0       	ldi	r26, 0x00	; 0
    4798:	b0 e4       	ldi	r27, 0x40	; 64
    479a:	80 83       	st	Z, r24
    479c:	91 83       	std	Z+1, r25	; 0x01
    479e:	a2 83       	std	Z+2, r26	; 0x02
    47a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47a2:	8e 01       	movw	r16, r28
    47a4:	01 5c       	subi	r16, 0xC1	; 193
    47a6:	1f 4f       	sbci	r17, 0xFF	; 255
    47a8:	fe 01       	movw	r30, r28
    47aa:	ed 5b       	subi	r30, 0xBD	; 189
    47ac:	ff 4f       	sbci	r31, 0xFF	; 255
    47ae:	60 81       	ld	r22, Z
    47b0:	71 81       	ldd	r23, Z+1	; 0x01
    47b2:	82 81       	ldd	r24, Z+2	; 0x02
    47b4:	93 81       	ldd	r25, Z+3	; 0x03
    47b6:	20 e0       	ldi	r18, 0x00	; 0
    47b8:	30 e0       	ldi	r19, 0x00	; 0
    47ba:	4a ef       	ldi	r20, 0xFA	; 250
    47bc:	54 e4       	ldi	r21, 0x44	; 68
    47be:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    47c2:	dc 01       	movw	r26, r24
    47c4:	cb 01       	movw	r24, r22
    47c6:	f8 01       	movw	r30, r16
    47c8:	80 83       	st	Z, r24
    47ca:	91 83       	std	Z+1, r25	; 0x01
    47cc:	a2 83       	std	Z+2, r26	; 0x02
    47ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    47d0:	fe 01       	movw	r30, r28
    47d2:	ff 96       	adiw	r30, 0x3f	; 63
    47d4:	60 81       	ld	r22, Z
    47d6:	71 81       	ldd	r23, Z+1	; 0x01
    47d8:	82 81       	ldd	r24, Z+2	; 0x02
    47da:	93 81       	ldd	r25, Z+3	; 0x03
    47dc:	20 e0       	ldi	r18, 0x00	; 0
    47de:	30 e0       	ldi	r19, 0x00	; 0
    47e0:	40 e8       	ldi	r20, 0x80	; 128
    47e2:	5f e3       	ldi	r21, 0x3F	; 63
    47e4:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    47e8:	88 23       	and	r24, r24
    47ea:	2c f4       	brge	.+10     	; 0x47f6 <HLCD_voidLCDInit+0x8a>
		__ticks = 1;
    47ec:	81 e0       	ldi	r24, 0x01	; 1
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	9e af       	std	Y+62, r25	; 0x3e
    47f2:	8d af       	std	Y+61, r24	; 0x3d
    47f4:	46 c0       	rjmp	.+140    	; 0x4882 <HLCD_voidLCDInit+0x116>
	else if (__tmp > 65535)
    47f6:	fe 01       	movw	r30, r28
    47f8:	ff 96       	adiw	r30, 0x3f	; 63
    47fa:	60 81       	ld	r22, Z
    47fc:	71 81       	ldd	r23, Z+1	; 0x01
    47fe:	82 81       	ldd	r24, Z+2	; 0x02
    4800:	93 81       	ldd	r25, Z+3	; 0x03
    4802:	20 e0       	ldi	r18, 0x00	; 0
    4804:	3f ef       	ldi	r19, 0xFF	; 255
    4806:	4f e7       	ldi	r20, 0x7F	; 127
    4808:	57 e4       	ldi	r21, 0x47	; 71
    480a:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    480e:	18 16       	cp	r1, r24
    4810:	64 f5       	brge	.+88     	; 0x486a <HLCD_voidLCDInit+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4812:	fe 01       	movw	r30, r28
    4814:	ed 5b       	subi	r30, 0xBD	; 189
    4816:	ff 4f       	sbci	r31, 0xFF	; 255
    4818:	60 81       	ld	r22, Z
    481a:	71 81       	ldd	r23, Z+1	; 0x01
    481c:	82 81       	ldd	r24, Z+2	; 0x02
    481e:	93 81       	ldd	r25, Z+3	; 0x03
    4820:	20 e0       	ldi	r18, 0x00	; 0
    4822:	30 e0       	ldi	r19, 0x00	; 0
    4824:	40 e2       	ldi	r20, 0x20	; 32
    4826:	51 e4       	ldi	r21, 0x41	; 65
    4828:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    482c:	dc 01       	movw	r26, r24
    482e:	cb 01       	movw	r24, r22
    4830:	bc 01       	movw	r22, r24
    4832:	cd 01       	movw	r24, r26
    4834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4838:	dc 01       	movw	r26, r24
    483a:	cb 01       	movw	r24, r22
    483c:	9e af       	std	Y+62, r25	; 0x3e
    483e:	8d af       	std	Y+61, r24	; 0x3d
    4840:	0f c0       	rjmp	.+30     	; 0x4860 <HLCD_voidLCDInit+0xf4>
    4842:	88 ec       	ldi	r24, 0xC8	; 200
    4844:	90 e0       	ldi	r25, 0x00	; 0
    4846:	9c af       	std	Y+60, r25	; 0x3c
    4848:	8b af       	std	Y+59, r24	; 0x3b
    484a:	8b ad       	ldd	r24, Y+59	; 0x3b
    484c:	9c ad       	ldd	r25, Y+60	; 0x3c
    484e:	01 97       	sbiw	r24, 0x01	; 1
    4850:	f1 f7       	brne	.-4      	; 0x484e <HLCD_voidLCDInit+0xe2>
    4852:	9c af       	std	Y+60, r25	; 0x3c
    4854:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4856:	8d ad       	ldd	r24, Y+61	; 0x3d
    4858:	9e ad       	ldd	r25, Y+62	; 0x3e
    485a:	01 97       	sbiw	r24, 0x01	; 1
    485c:	9e af       	std	Y+62, r25	; 0x3e
    485e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4860:	8d ad       	ldd	r24, Y+61	; 0x3d
    4862:	9e ad       	ldd	r25, Y+62	; 0x3e
    4864:	00 97       	sbiw	r24, 0x00	; 0
    4866:	69 f7       	brne	.-38     	; 0x4842 <HLCD_voidLCDInit+0xd6>
    4868:	16 c0       	rjmp	.+44     	; 0x4896 <HLCD_voidLCDInit+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    486a:	fe 01       	movw	r30, r28
    486c:	ff 96       	adiw	r30, 0x3f	; 63
    486e:	60 81       	ld	r22, Z
    4870:	71 81       	ldd	r23, Z+1	; 0x01
    4872:	82 81       	ldd	r24, Z+2	; 0x02
    4874:	93 81       	ldd	r25, Z+3	; 0x03
    4876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    487a:	dc 01       	movw	r26, r24
    487c:	cb 01       	movw	r24, r22
    487e:	9e af       	std	Y+62, r25	; 0x3e
    4880:	8d af       	std	Y+61, r24	; 0x3d
    4882:	8d ad       	ldd	r24, Y+61	; 0x3d
    4884:	9e ad       	ldd	r25, Y+62	; 0x3e
    4886:	9a af       	std	Y+58, r25	; 0x3a
    4888:	89 af       	std	Y+57, r24	; 0x39
    488a:	89 ad       	ldd	r24, Y+57	; 0x39
    488c:	9a ad       	ldd	r25, Y+58	; 0x3a
    488e:	01 97       	sbiw	r24, 0x01	; 1
    4890:	f1 f7       	brne	.-4      	; 0x488e <HLCD_voidLCDInit+0x122>
    4892:	9a af       	std	Y+58, r25	; 0x3a
    4894:	89 af       	std	Y+57, r24	; 0x39
	/*delay 2ms*/
	_delay_ms(2);

	HLCD_voidLCDSendCommand( HLCD_FUNCTION_SET_4BIT_CMD );
    4896:	88 e0       	ldi	r24, 0x08	; 8
    4898:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <HLCD_voidLCDSendCommand>
    489c:	80 e0       	ldi	r24, 0x00	; 0
    489e:	90 e0       	ldi	r25, 0x00	; 0
    48a0:	a0 e0       	ldi	r26, 0x00	; 0
    48a2:	b0 e4       	ldi	r27, 0x40	; 64
    48a4:	8d ab       	std	Y+53, r24	; 0x35
    48a6:	9e ab       	std	Y+54, r25	; 0x36
    48a8:	af ab       	std	Y+55, r26	; 0x37
    48aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48ac:	6d a9       	ldd	r22, Y+53	; 0x35
    48ae:	7e a9       	ldd	r23, Y+54	; 0x36
    48b0:	8f a9       	ldd	r24, Y+55	; 0x37
    48b2:	98 ad       	ldd	r25, Y+56	; 0x38
    48b4:	20 e0       	ldi	r18, 0x00	; 0
    48b6:	30 e0       	ldi	r19, 0x00	; 0
    48b8:	4a ef       	ldi	r20, 0xFA	; 250
    48ba:	54 e4       	ldi	r21, 0x44	; 68
    48bc:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    48c0:	dc 01       	movw	r26, r24
    48c2:	cb 01       	movw	r24, r22
    48c4:	89 ab       	std	Y+49, r24	; 0x31
    48c6:	9a ab       	std	Y+50, r25	; 0x32
    48c8:	ab ab       	std	Y+51, r26	; 0x33
    48ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    48cc:	69 a9       	ldd	r22, Y+49	; 0x31
    48ce:	7a a9       	ldd	r23, Y+50	; 0x32
    48d0:	8b a9       	ldd	r24, Y+51	; 0x33
    48d2:	9c a9       	ldd	r25, Y+52	; 0x34
    48d4:	20 e0       	ldi	r18, 0x00	; 0
    48d6:	30 e0       	ldi	r19, 0x00	; 0
    48d8:	40 e8       	ldi	r20, 0x80	; 128
    48da:	5f e3       	ldi	r21, 0x3F	; 63
    48dc:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    48e0:	88 23       	and	r24, r24
    48e2:	2c f4       	brge	.+10     	; 0x48ee <HLCD_voidLCDInit+0x182>
		__ticks = 1;
    48e4:	81 e0       	ldi	r24, 0x01	; 1
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	98 ab       	std	Y+48, r25	; 0x30
    48ea:	8f a7       	std	Y+47, r24	; 0x2f
    48ec:	3f c0       	rjmp	.+126    	; 0x496c <HLCD_voidLCDInit+0x200>
	else if (__tmp > 65535)
    48ee:	69 a9       	ldd	r22, Y+49	; 0x31
    48f0:	7a a9       	ldd	r23, Y+50	; 0x32
    48f2:	8b a9       	ldd	r24, Y+51	; 0x33
    48f4:	9c a9       	ldd	r25, Y+52	; 0x34
    48f6:	20 e0       	ldi	r18, 0x00	; 0
    48f8:	3f ef       	ldi	r19, 0xFF	; 255
    48fa:	4f e7       	ldi	r20, 0x7F	; 127
    48fc:	57 e4       	ldi	r21, 0x47	; 71
    48fe:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    4902:	18 16       	cp	r1, r24
    4904:	4c f5       	brge	.+82     	; 0x4958 <HLCD_voidLCDInit+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4906:	6d a9       	ldd	r22, Y+53	; 0x35
    4908:	7e a9       	ldd	r23, Y+54	; 0x36
    490a:	8f a9       	ldd	r24, Y+55	; 0x37
    490c:	98 ad       	ldd	r25, Y+56	; 0x38
    490e:	20 e0       	ldi	r18, 0x00	; 0
    4910:	30 e0       	ldi	r19, 0x00	; 0
    4912:	40 e2       	ldi	r20, 0x20	; 32
    4914:	51 e4       	ldi	r21, 0x41	; 65
    4916:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    491a:	dc 01       	movw	r26, r24
    491c:	cb 01       	movw	r24, r22
    491e:	bc 01       	movw	r22, r24
    4920:	cd 01       	movw	r24, r26
    4922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4926:	dc 01       	movw	r26, r24
    4928:	cb 01       	movw	r24, r22
    492a:	98 ab       	std	Y+48, r25	; 0x30
    492c:	8f a7       	std	Y+47, r24	; 0x2f
    492e:	0f c0       	rjmp	.+30     	; 0x494e <HLCD_voidLCDInit+0x1e2>
    4930:	88 ec       	ldi	r24, 0xC8	; 200
    4932:	90 e0       	ldi	r25, 0x00	; 0
    4934:	9e a7       	std	Y+46, r25	; 0x2e
    4936:	8d a7       	std	Y+45, r24	; 0x2d
    4938:	8d a5       	ldd	r24, Y+45	; 0x2d
    493a:	9e a5       	ldd	r25, Y+46	; 0x2e
    493c:	01 97       	sbiw	r24, 0x01	; 1
    493e:	f1 f7       	brne	.-4      	; 0x493c <HLCD_voidLCDInit+0x1d0>
    4940:	9e a7       	std	Y+46, r25	; 0x2e
    4942:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4944:	8f a5       	ldd	r24, Y+47	; 0x2f
    4946:	98 a9       	ldd	r25, Y+48	; 0x30
    4948:	01 97       	sbiw	r24, 0x01	; 1
    494a:	98 ab       	std	Y+48, r25	; 0x30
    494c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    494e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4950:	98 a9       	ldd	r25, Y+48	; 0x30
    4952:	00 97       	sbiw	r24, 0x00	; 0
    4954:	69 f7       	brne	.-38     	; 0x4930 <HLCD_voidLCDInit+0x1c4>
    4956:	14 c0       	rjmp	.+40     	; 0x4980 <HLCD_voidLCDInit+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4958:	69 a9       	ldd	r22, Y+49	; 0x31
    495a:	7a a9       	ldd	r23, Y+50	; 0x32
    495c:	8b a9       	ldd	r24, Y+51	; 0x33
    495e:	9c a9       	ldd	r25, Y+52	; 0x34
    4960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4964:	dc 01       	movw	r26, r24
    4966:	cb 01       	movw	r24, r22
    4968:	98 ab       	std	Y+48, r25	; 0x30
    496a:	8f a7       	std	Y+47, r24	; 0x2f
    496c:	8f a5       	ldd	r24, Y+47	; 0x2f
    496e:	98 a9       	ldd	r25, Y+48	; 0x30
    4970:	9c a7       	std	Y+44, r25	; 0x2c
    4972:	8b a7       	std	Y+43, r24	; 0x2b
    4974:	8b a5       	ldd	r24, Y+43	; 0x2b
    4976:	9c a5       	ldd	r25, Y+44	; 0x2c
    4978:	01 97       	sbiw	r24, 0x01	; 1
    497a:	f1 f7       	brne	.-4      	; 0x4978 <HLCD_voidLCDInit+0x20c>
    497c:	9c a7       	std	Y+44, r25	; 0x2c
    497e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);

	HLCD_voidLCDSendCommand( HLCD_DISPLAY_ON_OFF_4BIT_CMD );
    4980:	8c e0       	ldi	r24, 0x0C	; 12
    4982:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <HLCD_voidLCDSendCommand>
    4986:	80 e0       	ldi	r24, 0x00	; 0
    4988:	90 e0       	ldi	r25, 0x00	; 0
    498a:	a0 e0       	ldi	r26, 0x00	; 0
    498c:	b0 e4       	ldi	r27, 0x40	; 64
    498e:	8f a3       	std	Y+39, r24	; 0x27
    4990:	98 a7       	std	Y+40, r25	; 0x28
    4992:	a9 a7       	std	Y+41, r26	; 0x29
    4994:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4996:	6f a1       	ldd	r22, Y+39	; 0x27
    4998:	78 a5       	ldd	r23, Y+40	; 0x28
    499a:	89 a5       	ldd	r24, Y+41	; 0x29
    499c:	9a a5       	ldd	r25, Y+42	; 0x2a
    499e:	20 e0       	ldi	r18, 0x00	; 0
    49a0:	30 e0       	ldi	r19, 0x00	; 0
    49a2:	4a ef       	ldi	r20, 0xFA	; 250
    49a4:	54 e4       	ldi	r21, 0x44	; 68
    49a6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    49aa:	dc 01       	movw	r26, r24
    49ac:	cb 01       	movw	r24, r22
    49ae:	8b a3       	std	Y+35, r24	; 0x23
    49b0:	9c a3       	std	Y+36, r25	; 0x24
    49b2:	ad a3       	std	Y+37, r26	; 0x25
    49b4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    49b6:	6b a1       	ldd	r22, Y+35	; 0x23
    49b8:	7c a1       	ldd	r23, Y+36	; 0x24
    49ba:	8d a1       	ldd	r24, Y+37	; 0x25
    49bc:	9e a1       	ldd	r25, Y+38	; 0x26
    49be:	20 e0       	ldi	r18, 0x00	; 0
    49c0:	30 e0       	ldi	r19, 0x00	; 0
    49c2:	40 e8       	ldi	r20, 0x80	; 128
    49c4:	5f e3       	ldi	r21, 0x3F	; 63
    49c6:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    49ca:	88 23       	and	r24, r24
    49cc:	2c f4       	brge	.+10     	; 0x49d8 <HLCD_voidLCDInit+0x26c>
		__ticks = 1;
    49ce:	81 e0       	ldi	r24, 0x01	; 1
    49d0:	90 e0       	ldi	r25, 0x00	; 0
    49d2:	9a a3       	std	Y+34, r25	; 0x22
    49d4:	89 a3       	std	Y+33, r24	; 0x21
    49d6:	3f c0       	rjmp	.+126    	; 0x4a56 <HLCD_voidLCDInit+0x2ea>
	else if (__tmp > 65535)
    49d8:	6b a1       	ldd	r22, Y+35	; 0x23
    49da:	7c a1       	ldd	r23, Y+36	; 0x24
    49dc:	8d a1       	ldd	r24, Y+37	; 0x25
    49de:	9e a1       	ldd	r25, Y+38	; 0x26
    49e0:	20 e0       	ldi	r18, 0x00	; 0
    49e2:	3f ef       	ldi	r19, 0xFF	; 255
    49e4:	4f e7       	ldi	r20, 0x7F	; 127
    49e6:	57 e4       	ldi	r21, 0x47	; 71
    49e8:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    49ec:	18 16       	cp	r1, r24
    49ee:	4c f5       	brge	.+82     	; 0x4a42 <HLCD_voidLCDInit+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49f0:	6f a1       	ldd	r22, Y+39	; 0x27
    49f2:	78 a5       	ldd	r23, Y+40	; 0x28
    49f4:	89 a5       	ldd	r24, Y+41	; 0x29
    49f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    49f8:	20 e0       	ldi	r18, 0x00	; 0
    49fa:	30 e0       	ldi	r19, 0x00	; 0
    49fc:	40 e2       	ldi	r20, 0x20	; 32
    49fe:	51 e4       	ldi	r21, 0x41	; 65
    4a00:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4a04:	dc 01       	movw	r26, r24
    4a06:	cb 01       	movw	r24, r22
    4a08:	bc 01       	movw	r22, r24
    4a0a:	cd 01       	movw	r24, r26
    4a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a10:	dc 01       	movw	r26, r24
    4a12:	cb 01       	movw	r24, r22
    4a14:	9a a3       	std	Y+34, r25	; 0x22
    4a16:	89 a3       	std	Y+33, r24	; 0x21
    4a18:	0f c0       	rjmp	.+30     	; 0x4a38 <HLCD_voidLCDInit+0x2cc>
    4a1a:	88 ec       	ldi	r24, 0xC8	; 200
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	98 a3       	std	Y+32, r25	; 0x20
    4a20:	8f 8f       	std	Y+31, r24	; 0x1f
    4a22:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4a24:	98 a1       	ldd	r25, Y+32	; 0x20
    4a26:	01 97       	sbiw	r24, 0x01	; 1
    4a28:	f1 f7       	brne	.-4      	; 0x4a26 <HLCD_voidLCDInit+0x2ba>
    4a2a:	98 a3       	std	Y+32, r25	; 0x20
    4a2c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a2e:	89 a1       	ldd	r24, Y+33	; 0x21
    4a30:	9a a1       	ldd	r25, Y+34	; 0x22
    4a32:	01 97       	sbiw	r24, 0x01	; 1
    4a34:	9a a3       	std	Y+34, r25	; 0x22
    4a36:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a38:	89 a1       	ldd	r24, Y+33	; 0x21
    4a3a:	9a a1       	ldd	r25, Y+34	; 0x22
    4a3c:	00 97       	sbiw	r24, 0x00	; 0
    4a3e:	69 f7       	brne	.-38     	; 0x4a1a <HLCD_voidLCDInit+0x2ae>
    4a40:	14 c0       	rjmp	.+40     	; 0x4a6a <HLCD_voidLCDInit+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a42:	6b a1       	ldd	r22, Y+35	; 0x23
    4a44:	7c a1       	ldd	r23, Y+36	; 0x24
    4a46:	8d a1       	ldd	r24, Y+37	; 0x25
    4a48:	9e a1       	ldd	r25, Y+38	; 0x26
    4a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a4e:	dc 01       	movw	r26, r24
    4a50:	cb 01       	movw	r24, r22
    4a52:	9a a3       	std	Y+34, r25	; 0x22
    4a54:	89 a3       	std	Y+33, r24	; 0x21
    4a56:	89 a1       	ldd	r24, Y+33	; 0x21
    4a58:	9a a1       	ldd	r25, Y+34	; 0x22
    4a5a:	9e 8f       	std	Y+30, r25	; 0x1e
    4a5c:	8d 8f       	std	Y+29, r24	; 0x1d
    4a5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a60:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4a62:	01 97       	sbiw	r24, 0x01	; 1
    4a64:	f1 f7       	brne	.-4      	; 0x4a62 <HLCD_voidLCDInit+0x2f6>
    4a66:	9e 8f       	std	Y+30, r25	; 0x1e
    4a68:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);

	HLCD_voidLCDSendCommand( HLCD_CLEAR_DISPLAY_4BIT_CMD);
    4a6a:	81 e0       	ldi	r24, 0x01	; 1
    4a6c:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <HLCD_voidLCDSendCommand>
    4a70:	80 e0       	ldi	r24, 0x00	; 0
    4a72:	90 e0       	ldi	r25, 0x00	; 0
    4a74:	a0 e0       	ldi	r26, 0x00	; 0
    4a76:	b0 e4       	ldi	r27, 0x40	; 64
    4a78:	89 8f       	std	Y+25, r24	; 0x19
    4a7a:	9a 8f       	std	Y+26, r25	; 0x1a
    4a7c:	ab 8f       	std	Y+27, r26	; 0x1b
    4a7e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a80:	69 8d       	ldd	r22, Y+25	; 0x19
    4a82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a88:	20 e0       	ldi	r18, 0x00	; 0
    4a8a:	30 e0       	ldi	r19, 0x00	; 0
    4a8c:	4a ef       	ldi	r20, 0xFA	; 250
    4a8e:	54 e4       	ldi	r21, 0x44	; 68
    4a90:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4a94:	dc 01       	movw	r26, r24
    4a96:	cb 01       	movw	r24, r22
    4a98:	8d 8b       	std	Y+21, r24	; 0x15
    4a9a:	9e 8b       	std	Y+22, r25	; 0x16
    4a9c:	af 8b       	std	Y+23, r26	; 0x17
    4a9e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4aa0:	6d 89       	ldd	r22, Y+21	; 0x15
    4aa2:	7e 89       	ldd	r23, Y+22	; 0x16
    4aa4:	8f 89       	ldd	r24, Y+23	; 0x17
    4aa6:	98 8d       	ldd	r25, Y+24	; 0x18
    4aa8:	20 e0       	ldi	r18, 0x00	; 0
    4aaa:	30 e0       	ldi	r19, 0x00	; 0
    4aac:	40 e8       	ldi	r20, 0x80	; 128
    4aae:	5f e3       	ldi	r21, 0x3F	; 63
    4ab0:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    4ab4:	88 23       	and	r24, r24
    4ab6:	2c f4       	brge	.+10     	; 0x4ac2 <HLCD_voidLCDInit+0x356>
		__ticks = 1;
    4ab8:	81 e0       	ldi	r24, 0x01	; 1
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	9c 8b       	std	Y+20, r25	; 0x14
    4abe:	8b 8b       	std	Y+19, r24	; 0x13
    4ac0:	3f c0       	rjmp	.+126    	; 0x4b40 <HLCD_voidLCDInit+0x3d4>
	else if (__tmp > 65535)
    4ac2:	6d 89       	ldd	r22, Y+21	; 0x15
    4ac4:	7e 89       	ldd	r23, Y+22	; 0x16
    4ac6:	8f 89       	ldd	r24, Y+23	; 0x17
    4ac8:	98 8d       	ldd	r25, Y+24	; 0x18
    4aca:	20 e0       	ldi	r18, 0x00	; 0
    4acc:	3f ef       	ldi	r19, 0xFF	; 255
    4ace:	4f e7       	ldi	r20, 0x7F	; 127
    4ad0:	57 e4       	ldi	r21, 0x47	; 71
    4ad2:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    4ad6:	18 16       	cp	r1, r24
    4ad8:	4c f5       	brge	.+82     	; 0x4b2c <HLCD_voidLCDInit+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ada:	69 8d       	ldd	r22, Y+25	; 0x19
    4adc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ade:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ae0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ae2:	20 e0       	ldi	r18, 0x00	; 0
    4ae4:	30 e0       	ldi	r19, 0x00	; 0
    4ae6:	40 e2       	ldi	r20, 0x20	; 32
    4ae8:	51 e4       	ldi	r21, 0x41	; 65
    4aea:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4aee:	dc 01       	movw	r26, r24
    4af0:	cb 01       	movw	r24, r22
    4af2:	bc 01       	movw	r22, r24
    4af4:	cd 01       	movw	r24, r26
    4af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4afa:	dc 01       	movw	r26, r24
    4afc:	cb 01       	movw	r24, r22
    4afe:	9c 8b       	std	Y+20, r25	; 0x14
    4b00:	8b 8b       	std	Y+19, r24	; 0x13
    4b02:	0f c0       	rjmp	.+30     	; 0x4b22 <HLCD_voidLCDInit+0x3b6>
    4b04:	88 ec       	ldi	r24, 0xC8	; 200
    4b06:	90 e0       	ldi	r25, 0x00	; 0
    4b08:	9a 8b       	std	Y+18, r25	; 0x12
    4b0a:	89 8b       	std	Y+17, r24	; 0x11
    4b0c:	89 89       	ldd	r24, Y+17	; 0x11
    4b0e:	9a 89       	ldd	r25, Y+18	; 0x12
    4b10:	01 97       	sbiw	r24, 0x01	; 1
    4b12:	f1 f7       	brne	.-4      	; 0x4b10 <HLCD_voidLCDInit+0x3a4>
    4b14:	9a 8b       	std	Y+18, r25	; 0x12
    4b16:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b18:	8b 89       	ldd	r24, Y+19	; 0x13
    4b1a:	9c 89       	ldd	r25, Y+20	; 0x14
    4b1c:	01 97       	sbiw	r24, 0x01	; 1
    4b1e:	9c 8b       	std	Y+20, r25	; 0x14
    4b20:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b22:	8b 89       	ldd	r24, Y+19	; 0x13
    4b24:	9c 89       	ldd	r25, Y+20	; 0x14
    4b26:	00 97       	sbiw	r24, 0x00	; 0
    4b28:	69 f7       	brne	.-38     	; 0x4b04 <HLCD_voidLCDInit+0x398>
    4b2a:	14 c0       	rjmp	.+40     	; 0x4b54 <HLCD_voidLCDInit+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b2c:	6d 89       	ldd	r22, Y+21	; 0x15
    4b2e:	7e 89       	ldd	r23, Y+22	; 0x16
    4b30:	8f 89       	ldd	r24, Y+23	; 0x17
    4b32:	98 8d       	ldd	r25, Y+24	; 0x18
    4b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b38:	dc 01       	movw	r26, r24
    4b3a:	cb 01       	movw	r24, r22
    4b3c:	9c 8b       	std	Y+20, r25	; 0x14
    4b3e:	8b 8b       	std	Y+19, r24	; 0x13
    4b40:	8b 89       	ldd	r24, Y+19	; 0x13
    4b42:	9c 89       	ldd	r25, Y+20	; 0x14
    4b44:	98 8b       	std	Y+16, r25	; 0x10
    4b46:	8f 87       	std	Y+15, r24	; 0x0f
    4b48:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b4a:	98 89       	ldd	r25, Y+16	; 0x10
    4b4c:	01 97       	sbiw	r24, 0x01	; 1
    4b4e:	f1 f7       	brne	.-4      	; 0x4b4c <HLCD_voidLCDInit+0x3e0>
    4b50:	98 8b       	std	Y+16, r25	; 0x10
    4b52:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	HLCD_voidLCDSendCommand(HLCD_ENTRY_MODE_4BIT_CMD );
    4b54:	82 e0       	ldi	r24, 0x02	; 2
    4b56:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <HLCD_voidLCDSendCommand>
    4b5a:	80 e0       	ldi	r24, 0x00	; 0
    4b5c:	90 e0       	ldi	r25, 0x00	; 0
    4b5e:	a0 e0       	ldi	r26, 0x00	; 0
    4b60:	b0 e4       	ldi	r27, 0x40	; 64
    4b62:	8b 87       	std	Y+11, r24	; 0x0b
    4b64:	9c 87       	std	Y+12, r25	; 0x0c
    4b66:	ad 87       	std	Y+13, r26	; 0x0d
    4b68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b70:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b72:	20 e0       	ldi	r18, 0x00	; 0
    4b74:	30 e0       	ldi	r19, 0x00	; 0
    4b76:	4a ef       	ldi	r20, 0xFA	; 250
    4b78:	54 e4       	ldi	r21, 0x44	; 68
    4b7a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4b7e:	dc 01       	movw	r26, r24
    4b80:	cb 01       	movw	r24, r22
    4b82:	8f 83       	std	Y+7, r24	; 0x07
    4b84:	98 87       	std	Y+8, r25	; 0x08
    4b86:	a9 87       	std	Y+9, r26	; 0x09
    4b88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b8a:	6f 81       	ldd	r22, Y+7	; 0x07
    4b8c:	78 85       	ldd	r23, Y+8	; 0x08
    4b8e:	89 85       	ldd	r24, Y+9	; 0x09
    4b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b92:	20 e0       	ldi	r18, 0x00	; 0
    4b94:	30 e0       	ldi	r19, 0x00	; 0
    4b96:	40 e8       	ldi	r20, 0x80	; 128
    4b98:	5f e3       	ldi	r21, 0x3F	; 63
    4b9a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    4b9e:	88 23       	and	r24, r24
    4ba0:	2c f4       	brge	.+10     	; 0x4bac <HLCD_voidLCDInit+0x440>
		__ticks = 1;
    4ba2:	81 e0       	ldi	r24, 0x01	; 1
    4ba4:	90 e0       	ldi	r25, 0x00	; 0
    4ba6:	9e 83       	std	Y+6, r25	; 0x06
    4ba8:	8d 83       	std	Y+5, r24	; 0x05
    4baa:	3f c0       	rjmp	.+126    	; 0x4c2a <HLCD_voidLCDInit+0x4be>
	else if (__tmp > 65535)
    4bac:	6f 81       	ldd	r22, Y+7	; 0x07
    4bae:	78 85       	ldd	r23, Y+8	; 0x08
    4bb0:	89 85       	ldd	r24, Y+9	; 0x09
    4bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bb4:	20 e0       	ldi	r18, 0x00	; 0
    4bb6:	3f ef       	ldi	r19, 0xFF	; 255
    4bb8:	4f e7       	ldi	r20, 0x7F	; 127
    4bba:	57 e4       	ldi	r21, 0x47	; 71
    4bbc:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    4bc0:	18 16       	cp	r1, r24
    4bc2:	4c f5       	brge	.+82     	; 0x4c16 <HLCD_voidLCDInit+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bca:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bcc:	20 e0       	ldi	r18, 0x00	; 0
    4bce:	30 e0       	ldi	r19, 0x00	; 0
    4bd0:	40 e2       	ldi	r20, 0x20	; 32
    4bd2:	51 e4       	ldi	r21, 0x41	; 65
    4bd4:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4bd8:	dc 01       	movw	r26, r24
    4bda:	cb 01       	movw	r24, r22
    4bdc:	bc 01       	movw	r22, r24
    4bde:	cd 01       	movw	r24, r26
    4be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4be4:	dc 01       	movw	r26, r24
    4be6:	cb 01       	movw	r24, r22
    4be8:	9e 83       	std	Y+6, r25	; 0x06
    4bea:	8d 83       	std	Y+5, r24	; 0x05
    4bec:	0f c0       	rjmp	.+30     	; 0x4c0c <HLCD_voidLCDInit+0x4a0>
    4bee:	88 ec       	ldi	r24, 0xC8	; 200
    4bf0:	90 e0       	ldi	r25, 0x00	; 0
    4bf2:	9c 83       	std	Y+4, r25	; 0x04
    4bf4:	8b 83       	std	Y+3, r24	; 0x03
    4bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    4bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    4bfa:	01 97       	sbiw	r24, 0x01	; 1
    4bfc:	f1 f7       	brne	.-4      	; 0x4bfa <HLCD_voidLCDInit+0x48e>
    4bfe:	9c 83       	std	Y+4, r25	; 0x04
    4c00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c02:	8d 81       	ldd	r24, Y+5	; 0x05
    4c04:	9e 81       	ldd	r25, Y+6	; 0x06
    4c06:	01 97       	sbiw	r24, 0x01	; 1
    4c08:	9e 83       	std	Y+6, r25	; 0x06
    4c0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    4c0e:	9e 81       	ldd	r25, Y+6	; 0x06
    4c10:	00 97       	sbiw	r24, 0x00	; 0
    4c12:	69 f7       	brne	.-38     	; 0x4bee <HLCD_voidLCDInit+0x482>
    4c14:	14 c0       	rjmp	.+40     	; 0x4c3e <HLCD_voidLCDInit+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c16:	6f 81       	ldd	r22, Y+7	; 0x07
    4c18:	78 85       	ldd	r23, Y+8	; 0x08
    4c1a:	89 85       	ldd	r24, Y+9	; 0x09
    4c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c22:	dc 01       	movw	r26, r24
    4c24:	cb 01       	movw	r24, r22
    4c26:	9e 83       	std	Y+6, r25	; 0x06
    4c28:	8d 83       	std	Y+5, r24	; 0x05
    4c2a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c2c:	9e 81       	ldd	r25, Y+6	; 0x06
    4c2e:	9a 83       	std	Y+2, r25	; 0x02
    4c30:	89 83       	std	Y+1, r24	; 0x01
    4c32:	89 81       	ldd	r24, Y+1	; 0x01
    4c34:	9a 81       	ldd	r25, Y+2	; 0x02
    4c36:	01 97       	sbiw	r24, 0x01	; 1
    4c38:	f1 f7       	brne	.-4      	; 0x4c36 <HLCD_voidLCDInit+0x4ca>
    4c3a:	9a 83       	std	Y+2, r25	; 0x02
    4c3c:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidLCDSendCommand( 0x80 );
	_delay_ms(1);*/


#endif
}
    4c3e:	ca 5b       	subi	r28, 0xBA	; 186
    4c40:	df 4f       	sbci	r29, 0xFF	; 255
    4c42:	0f b6       	in	r0, 0x3f	; 63
    4c44:	f8 94       	cli
    4c46:	de bf       	out	0x3e, r29	; 62
    4c48:	0f be       	out	0x3f, r0	; 63
    4c4a:	cd bf       	out	0x3d, r28	; 61
    4c4c:	cf 91       	pop	r28
    4c4e:	df 91       	pop	r29
    4c50:	1f 91       	pop	r17
    4c52:	0f 91       	pop	r16
    4c54:	08 95       	ret

00004c56 <HLCD_voidLCDGoToDDRAMLoc>:

HLCD_enuErrorStatus_t HLCD_voidLCDGoToDDRAMLoc(HLCD_enuDDRAM_XPosition Copy_u8XPosition,HLCD_enuDDRAM_YPosition Copy_u8YPosition)
{ 
    4c56:	df 93       	push	r29
    4c58:	cf 93       	push	r28
    4c5a:	00 d0       	rcall	.+0      	; 0x4c5c <HLCD_voidLCDGoToDDRAMLoc+0x6>
    4c5c:	00 d0       	rcall	.+0      	; 0x4c5e <HLCD_voidLCDGoToDDRAMLoc+0x8>
    4c5e:	cd b7       	in	r28, 0x3d	; 61
    4c60:	de b7       	in	r29, 0x3e	; 62
    4c62:	8b 83       	std	Y+3, r24	; 0x03
    4c64:	6c 83       	std	Y+4, r22	; 0x04
	HLCD_enuErrorStatus_t Ret_enuLCDErrorStatus = HLCD_enuOK;
    4c66:	1a 82       	std	Y+2, r1	; 0x02
	u8 Copy_u8Location = 0;
    4c68:	19 82       	std	Y+1, r1	; 0x01
	/*Check if X Position is valid */
	if(Copy_u8XPosition > HLCD_enuSecondLine)
    4c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c6c:	82 30       	cpi	r24, 0x02	; 2
    4c6e:	18 f0       	brcs	.+6      	; 0x4c76 <HLCD_voidLCDGoToDDRAMLoc+0x20>
	{
		Ret_enuLCDErrorStatus = HLCD_enuDDRAM_XPositionError ;
    4c70:	82 e0       	ldi	r24, 0x02	; 2
    4c72:	8a 83       	std	Y+2, r24	; 0x02
    4c74:	13 c0       	rjmp	.+38     	; 0x4c9c <HLCD_voidLCDGoToDDRAMLoc+0x46>
	}
	/*Check if Y Position is valid */
	else if(Copy_u8YPosition >  HLCD_enuPosition15 )
    4c76:	8c 81       	ldd	r24, Y+4	; 0x04
    4c78:	80 31       	cpi	r24, 0x10	; 16
    4c7a:	18 f0       	brcs	.+6      	; 0x4c82 <HLCD_voidLCDGoToDDRAMLoc+0x2c>
	{
		Ret_enuLCDErrorStatus = HLCD_enuDDRAM_YPositionError ;
    4c7c:	83 e0       	ldi	r24, 0x03	; 3
    4c7e:	8a 83       	std	Y+2, r24	; 0x02
    4c80:	0d c0       	rjmp	.+26     	; 0x4c9c <HLCD_voidLCDGoToDDRAMLoc+0x46>
	}

	else
	{
		/*if x Position is first line*/
		if (Copy_u8XPosition == HLCD_enuFirstLine)
    4c82:	8b 81       	ldd	r24, Y+3	; 0x03
    4c84:	88 23       	and	r24, r24
    4c86:	19 f4       	brne	.+6      	; 0x4c8e <HLCD_voidLCDGoToDDRAMLoc+0x38>
		{
			Copy_u8Location = Copy_u8YPosition;
    4c88:	8c 81       	ldd	r24, Y+4	; 0x04
    4c8a:	89 83       	std	Y+1, r24	; 0x01
    4c8c:	03 c0       	rjmp	.+6      	; 0x4c94 <HLCD_voidLCDGoToDDRAMLoc+0x3e>
		}
		/*if Y Position is Second line*/
		else
		{
			/*increment 0x40 to the address to goto the first postion of the second line*/
			Copy_u8Location = Copy_u8YPosition+0x40;
    4c8e:	8c 81       	ldd	r24, Y+4	; 0x04
    4c90:	80 5c       	subi	r24, 0xC0	; 192
    4c92:	89 83       	std	Y+1, r24	; 0x01
		}
		/*send command to goto postion in DDRAM */
		HLCD_voidLCDSendCommand(Copy_u8Location+128);
    4c94:	89 81       	ldd	r24, Y+1	; 0x01
    4c96:	80 58       	subi	r24, 0x80	; 128
    4c98:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <HLCD_voidLCDSendCommand>
	}
	/*Retern Error*/
	return Ret_enuLCDErrorStatus;
    4c9c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4c9e:	0f 90       	pop	r0
    4ca0:	0f 90       	pop	r0
    4ca2:	0f 90       	pop	r0
    4ca4:	0f 90       	pop	r0
    4ca6:	cf 91       	pop	r28
    4ca8:	df 91       	pop	r29
    4caa:	08 95       	ret

00004cac <HLCD_voidSendString>:

void HLCD_voidSendString(char *copy_cstring ,HLCD_enuDDRAM_XPosition Copy_enuXPosition,HLCD_enuDDRAM_YPosition Copy_enuYPosition)
{
    4cac:	df 93       	push	r29
    4cae:	cf 93       	push	r28
    4cb0:	00 d0       	rcall	.+0      	; 0x4cb2 <HLCD_voidSendString+0x6>
    4cb2:	00 d0       	rcall	.+0      	; 0x4cb4 <HLCD_voidSendString+0x8>
    4cb4:	0f 92       	push	r0
    4cb6:	cd b7       	in	r28, 0x3d	; 61
    4cb8:	de b7       	in	r29, 0x3e	; 62
    4cba:	9b 83       	std	Y+3, r25	; 0x03
    4cbc:	8a 83       	std	Y+2, r24	; 0x02
    4cbe:	6c 83       	std	Y+4, r22	; 0x04
    4cc0:	4d 83       	std	Y+5, r20	; 0x05
	u8 copy_u8Iterator =0;
    4cc2:	19 82       	std	Y+1, r1	; 0x01
	/*goto the givern postion in LCD*/
	HLCD_voidLCDGoToDDRAMLoc(Copy_enuXPosition,Copy_enuYPosition);
    4cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    4cc6:	6d 81       	ldd	r22, Y+5	; 0x05
    4cc8:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <HLCD_voidLCDGoToDDRAMLoc>
    4ccc:	0e c0       	rjmp	.+28     	; 0x4cea <HLCD_voidSendString+0x3e>
	/*check if the charcter is \0 or not*/
	while (copy_cstring[copy_u8Iterator]!= '\0')
	{
		/*Send data of the character*/
		HLCD_voidLCDSendData(copy_cstring[copy_u8Iterator]);
    4cce:	89 81       	ldd	r24, Y+1	; 0x01
    4cd0:	28 2f       	mov	r18, r24
    4cd2:	30 e0       	ldi	r19, 0x00	; 0
    4cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    4cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    4cd8:	fc 01       	movw	r30, r24
    4cda:	e2 0f       	add	r30, r18
    4cdc:	f3 1f       	adc	r31, r19
    4cde:	80 81       	ld	r24, Z
    4ce0:	0e 94 bd 20 	call	0x417a	; 0x417a <HLCD_voidLCDSendData>
		/*increment iterator to goto next character*/
		copy_u8Iterator++;
    4ce4:	89 81       	ldd	r24, Y+1	; 0x01
    4ce6:	8f 5f       	subi	r24, 0xFF	; 255
    4ce8:	89 83       	std	Y+1, r24	; 0x01
{
	u8 copy_u8Iterator =0;
	/*goto the givern postion in LCD*/
	HLCD_voidLCDGoToDDRAMLoc(Copy_enuXPosition,Copy_enuYPosition);
	/*check if the charcter is \0 or not*/
	while (copy_cstring[copy_u8Iterator]!= '\0')
    4cea:	89 81       	ldd	r24, Y+1	; 0x01
    4cec:	28 2f       	mov	r18, r24
    4cee:	30 e0       	ldi	r19, 0x00	; 0
    4cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    4cf2:	9b 81       	ldd	r25, Y+3	; 0x03
    4cf4:	fc 01       	movw	r30, r24
    4cf6:	e2 0f       	add	r30, r18
    4cf8:	f3 1f       	adc	r31, r19
    4cfa:	80 81       	ld	r24, Z
    4cfc:	88 23       	and	r24, r24
    4cfe:	39 f7       	brne	.-50     	; 0x4cce <HLCD_voidSendString+0x22>
		/*Send data of the character*/
		HLCD_voidLCDSendData(copy_cstring[copy_u8Iterator]);
		/*increment iterator to goto next character*/
		copy_u8Iterator++;
	}
}
    4d00:	0f 90       	pop	r0
    4d02:	0f 90       	pop	r0
    4d04:	0f 90       	pop	r0
    4d06:	0f 90       	pop	r0
    4d08:	0f 90       	pop	r0
    4d0a:	cf 91       	pop	r28
    4d0c:	df 91       	pop	r29
    4d0e:	08 95       	ret

00004d10 <HLCD_enuWriteNumber>:

HLCD_enuErrorStatus_t HLCD_enuWriteNumber(u64 Copy_u32Number)
{
    4d10:	af 92       	push	r10
    4d12:	bf 92       	push	r11
    4d14:	cf 92       	push	r12
    4d16:	df 92       	push	r13
    4d18:	ef 92       	push	r14
    4d1a:	ff 92       	push	r15
    4d1c:	0f 93       	push	r16
    4d1e:	1f 93       	push	r17
    4d20:	df 93       	push	r29
    4d22:	cf 93       	push	r28
    4d24:	cd b7       	in	r28, 0x3d	; 61
    4d26:	de b7       	in	r29, 0x3e	; 62
    4d28:	a0 97       	sbiw	r28, 0x20	; 32
    4d2a:	0f b6       	in	r0, 0x3f	; 63
    4d2c:	f8 94       	cli
    4d2e:	de bf       	out	0x3e, r29	; 62
    4d30:	0f be       	out	0x3f, r0	; 63
    4d32:	cd bf       	out	0x3d, r28	; 61
    4d34:	29 8f       	std	Y+25, r18	; 0x19
    4d36:	3a 8f       	std	Y+26, r19	; 0x1a
    4d38:	4b 8f       	std	Y+27, r20	; 0x1b
    4d3a:	5c 8f       	std	Y+28, r21	; 0x1c
    4d3c:	6d 8f       	std	Y+29, r22	; 0x1d
    4d3e:	7e 8f       	std	Y+30, r23	; 0x1e
    4d40:	8f 8f       	std	Y+31, r24	; 0x1f
    4d42:	98 a3       	std	Y+32, r25	; 0x20
	u8 LOC_Digit = 0;
    4d44:	1c 82       	std	Y+4, r1	; 0x04
	u8 LOC_Index = 0;
    4d46:	1b 82       	std	Y+3, r1	; 0x03
	u8 LOC_Iterator = 0;
    4d48:	1a 82       	std	Y+2, r1	; 0x02
	u8 LOC_ReverseDigits[20] = {0}; /* Max Number Of Digits in U64 number is 20 Digit */
    4d4a:	84 e1       	ldi	r24, 0x14	; 20
    4d4c:	fe 01       	movw	r30, r28
    4d4e:	35 96       	adiw	r30, 0x05	; 5
    4d50:	df 01       	movw	r26, r30
    4d52:	98 2f       	mov	r25, r24
    4d54:	1d 92       	st	X+, r1
    4d56:	9a 95       	dec	r25
    4d58:	e9 f7       	brne	.-6      	; 0x4d54 <HLCD_enuWriteNumber+0x44>
	HLCD_enuErrorStatus_t Ret_enuLCDErrorStatus = HLCD_enuOK;
    4d5a:	19 82       	std	Y+1, r1	; 0x01
    4d5c:	6a c0       	rjmp	.+212    	; 0x4e32 <HLCD_enuWriteNumber+0x122>

	/* Extract each digit and convert to ASCII */
	while (Copy_u32Number > 0)
	{
		LOC_Digit = Copy_u32Number % 10;
    4d5e:	a9 8c       	ldd	r10, Y+25	; 0x19
    4d60:	ba 8c       	ldd	r11, Y+26	; 0x1a
    4d62:	cb 8c       	ldd	r12, Y+27	; 0x1b
    4d64:	dc 8c       	ldd	r13, Y+28	; 0x1c
    4d66:	ed 8c       	ldd	r14, Y+29	; 0x1d
    4d68:	fe 8c       	ldd	r15, Y+30	; 0x1e
    4d6a:	0f 8d       	ldd	r16, Y+31	; 0x1f
    4d6c:	18 a1       	ldd	r17, Y+32	; 0x20
    4d6e:	2a 2d       	mov	r18, r10
    4d70:	3b 2d       	mov	r19, r11
    4d72:	4c 2d       	mov	r20, r12
    4d74:	5d 2d       	mov	r21, r13
    4d76:	6e 2d       	mov	r22, r14
    4d78:	7f 2d       	mov	r23, r15
    4d7a:	80 2f       	mov	r24, r16
    4d7c:	91 2f       	mov	r25, r17
    4d7e:	0f 2e       	mov	r0, r31
    4d80:	fa e0       	ldi	r31, 0x0A	; 10
    4d82:	af 2e       	mov	r10, r31
    4d84:	f0 2d       	mov	r31, r0
    4d86:	bb 24       	eor	r11, r11
    4d88:	cc 24       	eor	r12, r12
    4d8a:	dd 24       	eor	r13, r13
    4d8c:	ee 24       	eor	r14, r14
    4d8e:	ff 24       	eor	r15, r15
    4d90:	00 e0       	ldi	r16, 0x00	; 0
    4d92:	10 e0       	ldi	r17, 0x00	; 0
    4d94:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__umoddi3>
    4d98:	a2 2e       	mov	r10, r18
    4d9a:	b3 2e       	mov	r11, r19
    4d9c:	c4 2e       	mov	r12, r20
    4d9e:	d5 2e       	mov	r13, r21
    4da0:	e6 2e       	mov	r14, r22
    4da2:	f7 2e       	mov	r15, r23
    4da4:	08 2f       	mov	r16, r24
    4da6:	19 2f       	mov	r17, r25
    4da8:	2a 2d       	mov	r18, r10
    4daa:	3b 2d       	mov	r19, r11
    4dac:	4c 2d       	mov	r20, r12
    4dae:	5d 2d       	mov	r21, r13
    4db0:	6e 2d       	mov	r22, r14
    4db2:	7f 2d       	mov	r23, r15
    4db4:	80 2f       	mov	r24, r16
    4db6:	91 2f       	mov	r25, r17
    4db8:	2c 83       	std	Y+4, r18	; 0x04
		LOC_ReverseDigits[LOC_Index] = LOC_Digit + '0';    /* Convert The Number To ASCII Value */
    4dba:	8b 81       	ldd	r24, Y+3	; 0x03
    4dbc:	28 2f       	mov	r18, r24
    4dbe:	30 e0       	ldi	r19, 0x00	; 0
    4dc0:	8c 81       	ldd	r24, Y+4	; 0x04
    4dc2:	48 2f       	mov	r20, r24
    4dc4:	40 5d       	subi	r20, 0xD0	; 208
    4dc6:	ce 01       	movw	r24, r28
    4dc8:	05 96       	adiw	r24, 0x05	; 5
    4dca:	fc 01       	movw	r30, r24
    4dcc:	e2 0f       	add	r30, r18
    4dce:	f3 1f       	adc	r31, r19
    4dd0:	40 83       	st	Z, r20
		Copy_u32Number /= 10;
    4dd2:	a9 8c       	ldd	r10, Y+25	; 0x19
    4dd4:	ba 8c       	ldd	r11, Y+26	; 0x1a
    4dd6:	cb 8c       	ldd	r12, Y+27	; 0x1b
    4dd8:	dc 8c       	ldd	r13, Y+28	; 0x1c
    4dda:	ed 8c       	ldd	r14, Y+29	; 0x1d
    4ddc:	fe 8c       	ldd	r15, Y+30	; 0x1e
    4dde:	0f 8d       	ldd	r16, Y+31	; 0x1f
    4de0:	18 a1       	ldd	r17, Y+32	; 0x20
    4de2:	2a 2d       	mov	r18, r10
    4de4:	3b 2d       	mov	r19, r11
    4de6:	4c 2d       	mov	r20, r12
    4de8:	5d 2d       	mov	r21, r13
    4dea:	6e 2d       	mov	r22, r14
    4dec:	7f 2d       	mov	r23, r15
    4dee:	80 2f       	mov	r24, r16
    4df0:	91 2f       	mov	r25, r17
    4df2:	0f 2e       	mov	r0, r31
    4df4:	fa e0       	ldi	r31, 0x0A	; 10
    4df6:	af 2e       	mov	r10, r31
    4df8:	f0 2d       	mov	r31, r0
    4dfa:	bb 24       	eor	r11, r11
    4dfc:	cc 24       	eor	r12, r12
    4dfe:	dd 24       	eor	r13, r13
    4e00:	ee 24       	eor	r14, r14
    4e02:	ff 24       	eor	r15, r15
    4e04:	00 e0       	ldi	r16, 0x00	; 0
    4e06:	10 e0       	ldi	r17, 0x00	; 0
    4e08:	0e 94 75 00 	call	0xea	; 0xea <__udivdi3>
    4e0c:	a2 2e       	mov	r10, r18
    4e0e:	b3 2e       	mov	r11, r19
    4e10:	c4 2e       	mov	r12, r20
    4e12:	d5 2e       	mov	r13, r21
    4e14:	e6 2e       	mov	r14, r22
    4e16:	f7 2e       	mov	r15, r23
    4e18:	08 2f       	mov	r16, r24
    4e1a:	19 2f       	mov	r17, r25
    4e1c:	a9 8e       	std	Y+25, r10	; 0x19
    4e1e:	ba 8e       	std	Y+26, r11	; 0x1a
    4e20:	cb 8e       	std	Y+27, r12	; 0x1b
    4e22:	dc 8e       	std	Y+28, r13	; 0x1c
    4e24:	ed 8e       	std	Y+29, r14	; 0x1d
    4e26:	fe 8e       	std	Y+30, r15	; 0x1e
    4e28:	0f 8f       	std	Y+31, r16	; 0x1f
    4e2a:	18 a3       	std	Y+32, r17	; 0x20
		LOC_Index++;
    4e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e2e:	8f 5f       	subi	r24, 0xFF	; 255
    4e30:	8b 83       	std	Y+3, r24	; 0x03
	u8 LOC_Iterator = 0;
	u8 LOC_ReverseDigits[20] = {0}; /* Max Number Of Digits in U64 number is 20 Digit */
	HLCD_enuErrorStatus_t Ret_enuLCDErrorStatus = HLCD_enuOK;

	/* Extract each digit and convert to ASCII */
	while (Copy_u32Number > 0)
    4e32:	89 8d       	ldd	r24, Y+25	; 0x19
    4e34:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4e36:	89 2b       	or	r24, r25
    4e38:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4e3a:	89 2b       	or	r24, r25
    4e3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e3e:	89 2b       	or	r24, r25
    4e40:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4e42:	89 2b       	or	r24, r25
    4e44:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4e46:	89 2b       	or	r24, r25
    4e48:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4e4a:	89 2b       	or	r24, r25
    4e4c:	98 a1       	ldd	r25, Y+32	; 0x20
    4e4e:	89 2b       	or	r24, r25
    4e50:	88 23       	and	r24, r24
    4e52:	09 f0       	breq	.+2      	; 0x4e56 <HLCD_enuWriteNumber+0x146>
    4e54:	84 cf       	rjmp	.-248    	; 0x4d5e <HLCD_enuWriteNumber+0x4e>
		Copy_u32Number =  Copy_u32Number * (-1);
		// Send the negative sign to the LCD
		HLCD_voidLCDSendData('-');
	}

	if (LOC_Index > NUMBER_OF_LCD_COLUMNS)
    4e56:	8b 81       	ldd	r24, Y+3	; 0x03
    4e58:	81 31       	cpi	r24, 0x11	; 17
    4e5a:	e0 f1       	brcs	.+120    	; 0x4ed4 <HLCD_enuWriteNumber+0x1c4>
	{
		/* Display the last digits on the second line */
		HLCD_voidLCDGoToDDRAMLoc(HLCD_enuSecondLine, HLCD_enuPosition0);
    4e5c:	81 e0       	ldi	r24, 0x01	; 1
    4e5e:	60 e0       	ldi	r22, 0x00	; 0
    4e60:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <HLCD_voidLCDGoToDDRAMLoc>
		for (LOC_Iterator = LOC_Index - NUMBER_OF_LCD_COLUMNS; LOC_Iterator > 0; LOC_Iterator --)
    4e64:	8b 81       	ldd	r24, Y+3	; 0x03
    4e66:	80 51       	subi	r24, 0x10	; 16
    4e68:	8a 83       	std	Y+2, r24	; 0x02
    4e6a:	11 c0       	rjmp	.+34     	; 0x4e8e <HLCD_enuWriteNumber+0x17e>
		{
			HLCD_voidLCDSendData(LOC_ReverseDigits[LOC_Iterator - 1]);
    4e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e6e:	88 2f       	mov	r24, r24
    4e70:	90 e0       	ldi	r25, 0x00	; 0
    4e72:	9c 01       	movw	r18, r24
    4e74:	21 50       	subi	r18, 0x01	; 1
    4e76:	30 40       	sbci	r19, 0x00	; 0
    4e78:	ce 01       	movw	r24, r28
    4e7a:	05 96       	adiw	r24, 0x05	; 5
    4e7c:	fc 01       	movw	r30, r24
    4e7e:	e2 0f       	add	r30, r18
    4e80:	f3 1f       	adc	r31, r19
    4e82:	80 81       	ld	r24, Z
    4e84:	0e 94 bd 20 	call	0x417a	; 0x417a <HLCD_voidLCDSendData>

	if (LOC_Index > NUMBER_OF_LCD_COLUMNS)
	{
		/* Display the last digits on the second line */
		HLCD_voidLCDGoToDDRAMLoc(HLCD_enuSecondLine, HLCD_enuPosition0);
		for (LOC_Iterator = LOC_Index - NUMBER_OF_LCD_COLUMNS; LOC_Iterator > 0; LOC_Iterator --)
    4e88:	8a 81       	ldd	r24, Y+2	; 0x02
    4e8a:	81 50       	subi	r24, 0x01	; 1
    4e8c:	8a 83       	std	Y+2, r24	; 0x02
    4e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e90:	88 23       	and	r24, r24
    4e92:	61 f7       	brne	.-40     	; 0x4e6c <HLCD_enuWriteNumber+0x15c>
		{
			HLCD_voidLCDSendData(LOC_ReverseDigits[LOC_Iterator - 1]);
		}
		HLCD_voidLCDGoToDDRAMLoc(HLCD_enuFirstLine, HLCD_enuPosition0);
    4e94:	80 e0       	ldi	r24, 0x00	; 0
    4e96:	60 e0       	ldi	r22, 0x00	; 0
    4e98:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <HLCD_voidLCDGoToDDRAMLoc>
		/* Display the remaining digits on the first line */
		for (LOC_Iterator = LOC_Index; LOC_Iterator > 0; LOC_Iterator--)
    4e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e9e:	8a 83       	std	Y+2, r24	; 0x02
    4ea0:	11 c0       	rjmp	.+34     	; 0x4ec4 <HLCD_enuWriteNumber+0x1b4>
		{
			HLCD_voidLCDSendData(LOC_ReverseDigits[LOC_Iterator - 1]);
    4ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ea4:	88 2f       	mov	r24, r24
    4ea6:	90 e0       	ldi	r25, 0x00	; 0
    4ea8:	9c 01       	movw	r18, r24
    4eaa:	21 50       	subi	r18, 0x01	; 1
    4eac:	30 40       	sbci	r19, 0x00	; 0
    4eae:	ce 01       	movw	r24, r28
    4eb0:	05 96       	adiw	r24, 0x05	; 5
    4eb2:	fc 01       	movw	r30, r24
    4eb4:	e2 0f       	add	r30, r18
    4eb6:	f3 1f       	adc	r31, r19
    4eb8:	80 81       	ld	r24, Z
    4eba:	0e 94 bd 20 	call	0x417a	; 0x417a <HLCD_voidLCDSendData>
		{
			HLCD_voidLCDSendData(LOC_ReverseDigits[LOC_Iterator - 1]);
		}
		HLCD_voidLCDGoToDDRAMLoc(HLCD_enuFirstLine, HLCD_enuPosition0);
		/* Display the remaining digits on the first line */
		for (LOC_Iterator = LOC_Index; LOC_Iterator > 0; LOC_Iterator--)
    4ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    4ec0:	81 50       	subi	r24, 0x01	; 1
    4ec2:	8a 83       	std	Y+2, r24	; 0x02
    4ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ec6:	88 23       	and	r24, r24
    4ec8:	61 f7       	brne	.-40     	; 0x4ea2 <HLCD_enuWriteNumber+0x192>
		{
			HLCD_voidLCDSendData(LOC_ReverseDigits[LOC_Iterator - 1]);
		}
		/* Get the cursor back to the end of the number on the second line */
		HLCD_voidLCDGoToDDRAMLoc(HLCD_enuSecondLine, HLCD_enuPosition0);
    4eca:	81 e0       	ldi	r24, 0x01	; 1
    4ecc:	60 e0       	ldi	r22, 0x00	; 0
    4ece:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <HLCD_voidLCDGoToDDRAMLoc>
    4ed2:	17 c0       	rjmp	.+46     	; 0x4f02 <HLCD_enuWriteNumber+0x1f2>
	}
	else
	{
		/* In Case the Number Fits in a single Line */
		for (LOC_Iterator = LOC_Index; LOC_Iterator > 0; LOC_Iterator--)
    4ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ed6:	8a 83       	std	Y+2, r24	; 0x02
    4ed8:	11 c0       	rjmp	.+34     	; 0x4efc <HLCD_enuWriteNumber+0x1ec>
		{
			HLCD_voidLCDSendData(LOC_ReverseDigits[LOC_Iterator - 1]);
    4eda:	8a 81       	ldd	r24, Y+2	; 0x02
    4edc:	88 2f       	mov	r24, r24
    4ede:	90 e0       	ldi	r25, 0x00	; 0
    4ee0:	9c 01       	movw	r18, r24
    4ee2:	21 50       	subi	r18, 0x01	; 1
    4ee4:	30 40       	sbci	r19, 0x00	; 0
    4ee6:	ce 01       	movw	r24, r28
    4ee8:	05 96       	adiw	r24, 0x05	; 5
    4eea:	fc 01       	movw	r30, r24
    4eec:	e2 0f       	add	r30, r18
    4eee:	f3 1f       	adc	r31, r19
    4ef0:	80 81       	ld	r24, Z
    4ef2:	0e 94 bd 20 	call	0x417a	; 0x417a <HLCD_voidLCDSendData>
		HLCD_voidLCDGoToDDRAMLoc(HLCD_enuSecondLine, HLCD_enuPosition0);
	}
	else
	{
		/* In Case the Number Fits in a single Line */
		for (LOC_Iterator = LOC_Index; LOC_Iterator > 0; LOC_Iterator--)
    4ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ef8:	81 50       	subi	r24, 0x01	; 1
    4efa:	8a 83       	std	Y+2, r24	; 0x02
    4efc:	8a 81       	ldd	r24, Y+2	; 0x02
    4efe:	88 23       	and	r24, r24
    4f00:	61 f7       	brne	.-40     	; 0x4eda <HLCD_enuWriteNumber+0x1ca>
		{
			HLCD_voidLCDSendData(LOC_ReverseDigits[LOC_Iterator - 1]);
		}
	}
	return Ret_enuLCDErrorStatus;
    4f02:	89 81       	ldd	r24, Y+1	; 0x01
}
    4f04:	a0 96       	adiw	r28, 0x20	; 32
    4f06:	0f b6       	in	r0, 0x3f	; 63
    4f08:	f8 94       	cli
    4f0a:	de bf       	out	0x3e, r29	; 62
    4f0c:	0f be       	out	0x3f, r0	; 63
    4f0e:	cd bf       	out	0x3d, r28	; 61
    4f10:	cf 91       	pop	r28
    4f12:	df 91       	pop	r29
    4f14:	1f 91       	pop	r17
    4f16:	0f 91       	pop	r16
    4f18:	ff 90       	pop	r15
    4f1a:	ef 90       	pop	r14
    4f1c:	df 90       	pop	r13
    4f1e:	cf 90       	pop	r12
    4f20:	bf 90       	pop	r11
    4f22:	af 90       	pop	r10
    4f24:	08 95       	ret

00004f26 <HLCD_voidDisplaySpecialCharacter>:

HLCD_enuErrorStatus_t HLCD_voidDisplaySpecialCharacter(u8 *Copy_enuPattern , HLCD_enuCGRAM_BlockNumber Copy_enuBlockNumber,\
		HLCD_enuDDRAM_XPosition Copy_enuXPosition,HLCD_enuDDRAM_YPosition Copy_enuYPosition )

{ 
    4f26:	df 93       	push	r29
    4f28:	cf 93       	push	r28
    4f2a:	cd b7       	in	r28, 0x3d	; 61
    4f2c:	de b7       	in	r29, 0x3e	; 62
    4f2e:	28 97       	sbiw	r28, 0x08	; 8
    4f30:	0f b6       	in	r0, 0x3f	; 63
    4f32:	f8 94       	cli
    4f34:	de bf       	out	0x3e, r29	; 62
    4f36:	0f be       	out	0x3f, r0	; 63
    4f38:	cd bf       	out	0x3d, r28	; 61
    4f3a:	9d 83       	std	Y+5, r25	; 0x05
    4f3c:	8c 83       	std	Y+4, r24	; 0x04
    4f3e:	6e 83       	std	Y+6, r22	; 0x06
    4f40:	4f 83       	std	Y+7, r20	; 0x07
    4f42:	28 87       	std	Y+8, r18	; 0x08
	HLCD_enuErrorStatus_t Ret_enuLCDErrorStatus = HLCD_enuOK;
    4f44:	1b 82       	std	Y+3, r1	; 0x03
	u8 Copy_u8CGRAMLocation = 0;
    4f46:	1a 82       	std	Y+2, r1	; 0x02

	/*Check if Blocknumber Position is valid */
	if(Copy_enuBlockNumber > HLCD_enuBlockNumber7)
    4f48:	8e 81       	ldd	r24, Y+6	; 0x06
    4f4a:	88 30       	cpi	r24, 0x08	; 8
    4f4c:	18 f0       	brcs	.+6      	; 0x4f54 <HLCD_voidDisplaySpecialCharacter+0x2e>
	{
		Ret_enuLCDErrorStatus = HLCD_enuBlockNumberError ;
    4f4e:	81 e0       	ldi	r24, 0x01	; 1
    4f50:	8b 83       	std	Y+3, r24	; 0x03
    4f52:	34 c0       	rjmp	.+104    	; 0x4fbc <HLCD_voidDisplaySpecialCharacter+0x96>
	}
	/*Check if X Position is valid */
	else if(Copy_enuXPosition > HLCD_enuSecondLine)
    4f54:	8f 81       	ldd	r24, Y+7	; 0x07
    4f56:	82 30       	cpi	r24, 0x02	; 2
    4f58:	18 f0       	brcs	.+6      	; 0x4f60 <HLCD_voidDisplaySpecialCharacter+0x3a>
	{
		Ret_enuLCDErrorStatus = HLCD_enuDDRAM_XPositionError ;
    4f5a:	82 e0       	ldi	r24, 0x02	; 2
    4f5c:	8b 83       	std	Y+3, r24	; 0x03
    4f5e:	2e c0       	rjmp	.+92     	; 0x4fbc <HLCD_voidDisplaySpecialCharacter+0x96>
	}
	/*Check if Y Position is valid */
	else if(Copy_enuYPosition >  HLCD_enuPosition15 )
    4f60:	88 85       	ldd	r24, Y+8	; 0x08
    4f62:	80 31       	cpi	r24, 0x10	; 16
    4f64:	18 f0       	brcs	.+6      	; 0x4f6c <HLCD_voidDisplaySpecialCharacter+0x46>
	{
		Ret_enuLCDErrorStatus = HLCD_enuDDRAM_YPositionError ;
    4f66:	83 e0       	ldi	r24, 0x03	; 3
    4f68:	8b 83       	std	Y+3, r24	; 0x03
    4f6a:	28 c0       	rjmp	.+80     	; 0x4fbc <HLCD_voidDisplaySpecialCharacter+0x96>
	}
	else
	{
		/*To acess the Block*/
		Copy_u8CGRAMLocation = Copy_enuBlockNumber  * 8;
    4f6c:	8e 81       	ldd	r24, Y+6	; 0x06
    4f6e:	88 2f       	mov	r24, r24
    4f70:	90 e0       	ldi	r25, 0x00	; 0
    4f72:	88 0f       	add	r24, r24
    4f74:	99 1f       	adc	r25, r25
    4f76:	88 0f       	add	r24, r24
    4f78:	99 1f       	adc	r25, r25
    4f7a:	88 0f       	add	r24, r24
    4f7c:	99 1f       	adc	r25, r25
    4f7e:	8a 83       	std	Y+2, r24	; 0x02
		HLCD_voidLCDSendCommand(Copy_u8CGRAMLocation+64);
    4f80:	8a 81       	ldd	r24, Y+2	; 0x02
    4f82:	80 5c       	subi	r24, 0xC0	; 192
    4f84:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <HLCD_voidLCDSendCommand>
		for (u8 LOC_u8iterator = 0; LOC_u8iterator  < NUMBER_OF_LCD_PINS_8BIT ;LOC_u8iterator ++)
    4f88:	19 82       	std	Y+1, r1	; 0x01
    4f8a:	0e c0       	rjmp	.+28     	; 0x4fa8 <HLCD_voidDisplaySpecialCharacter+0x82>
		{
			/*to save charcter in the Block*/
			HLCD_voidLCDSendData(Copy_enuPattern[LOC_u8iterator]);
    4f8c:	89 81       	ldd	r24, Y+1	; 0x01
    4f8e:	28 2f       	mov	r18, r24
    4f90:	30 e0       	ldi	r19, 0x00	; 0
    4f92:	8c 81       	ldd	r24, Y+4	; 0x04
    4f94:	9d 81       	ldd	r25, Y+5	; 0x05
    4f96:	fc 01       	movw	r30, r24
    4f98:	e2 0f       	add	r30, r18
    4f9a:	f3 1f       	adc	r31, r19
    4f9c:	80 81       	ld	r24, Z
    4f9e:	0e 94 bd 20 	call	0x417a	; 0x417a <HLCD_voidLCDSendData>
	else
	{
		/*To acess the Block*/
		Copy_u8CGRAMLocation = Copy_enuBlockNumber  * 8;
		HLCD_voidLCDSendCommand(Copy_u8CGRAMLocation+64);
		for (u8 LOC_u8iterator = 0; LOC_u8iterator  < NUMBER_OF_LCD_PINS_8BIT ;LOC_u8iterator ++)
    4fa2:	89 81       	ldd	r24, Y+1	; 0x01
    4fa4:	8f 5f       	subi	r24, 0xFF	; 255
    4fa6:	89 83       	std	Y+1, r24	; 0x01
    4fa8:	89 81       	ldd	r24, Y+1	; 0x01
    4faa:	88 30       	cpi	r24, 0x08	; 8
    4fac:	78 f3       	brcs	.-34     	; 0x4f8c <HLCD_voidDisplaySpecialCharacter+0x66>
		{
			/*to save charcter in the Block*/
			HLCD_voidLCDSendData(Copy_enuPattern[LOC_u8iterator]);
		}
		/*goto x , Y Postion*/
		HLCD_voidLCDGoToDDRAMLoc(Copy_enuXPosition,Copy_enuYPosition );
    4fae:	8f 81       	ldd	r24, Y+7	; 0x07
    4fb0:	68 85       	ldd	r22, Y+8	; 0x08
    4fb2:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <HLCD_voidLCDGoToDDRAMLoc>
		/*Display Data which is saved*/
		HLCD_voidLCDSendData(Copy_enuBlockNumber);
    4fb6:	8e 81       	ldd	r24, Y+6	; 0x06
    4fb8:	0e 94 bd 20 	call	0x417a	; 0x417a <HLCD_voidLCDSendData>
	}
	/*Return Error*/
	return Ret_enuLCDErrorStatus;
    4fbc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4fbe:	28 96       	adiw	r28, 0x08	; 8
    4fc0:	0f b6       	in	r0, 0x3f	; 63
    4fc2:	f8 94       	cli
    4fc4:	de bf       	out	0x3e, r29	; 62
    4fc6:	0f be       	out	0x3f, r0	; 63
    4fc8:	cd bf       	out	0x3d, r28	; 61
    4fca:	cf 91       	pop	r28
    4fcc:	df 91       	pop	r29
    4fce:	08 95       	ret

00004fd0 <HLCD_voidLCDCLR>:

void HLCD_voidLCDCLR(void)
{
    4fd0:	df 93       	push	r29
    4fd2:	cf 93       	push	r28
    4fd4:	cd b7       	in	r28, 0x3d	; 61
    4fd6:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidLCDSendCommand(HLCD_CLEAR_DISPLAY);
    4fd8:	81 e0       	ldi	r24, 0x01	; 1
    4fda:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <HLCD_voidLCDSendCommand>
}
    4fde:	cf 91       	pop	r28
    4fe0:	df 91       	pop	r29
    4fe2:	08 95       	ret

00004fe4 <LCD_getanddisplayint>:

void LCD_getanddisplayint(u16 copy_u16number)
{
    4fe4:	df 93       	push	r29
    4fe6:	cf 93       	push	r28
    4fe8:	cd b7       	in	r28, 0x3d	; 61
    4fea:	de b7       	in	r29, 0x3e	; 62
    4fec:	2d 97       	sbiw	r28, 0x0d	; 13
    4fee:	0f b6       	in	r0, 0x3f	; 63
    4ff0:	f8 94       	cli
    4ff2:	de bf       	out	0x3e, r29	; 62
    4ff4:	0f be       	out	0x3f, r0	; 63
    4ff6:	cd bf       	out	0x3d, r28	; 61
    4ff8:	9d 87       	std	Y+13, r25	; 0x0d
    4ffa:	8c 87       	std	Y+12, r24	; 0x0c
	u16 temp = copy_u16number; //
    4ffc:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ffe:	9d 85       	ldd	r25, Y+13	; 0x0d
    5000:	9c 83       	std	Y+4, r25	; 0x04
    5002:	8b 83       	std	Y+3, r24	; 0x03
	u8 digit[7];
	u8 length = 0 ;
    5004:	1a 82       	std	Y+2, r1	; 0x02
    5006:	1d c0       	rjmp	.+58     	; 0x5042 <LCD_getanddisplayint+0x5e>
	s8 i ; // not u8 because if we used u8 we will run in infinity loop
	while(temp != 0)
	{
		digit[length] =temp %10;
    5008:	8a 81       	ldd	r24, Y+2	; 0x02
    500a:	e8 2f       	mov	r30, r24
    500c:	f0 e0       	ldi	r31, 0x00	; 0
    500e:	8b 81       	ldd	r24, Y+3	; 0x03
    5010:	9c 81       	ldd	r25, Y+4	; 0x04
    5012:	2a e0       	ldi	r18, 0x0A	; 10
    5014:	30 e0       	ldi	r19, 0x00	; 0
    5016:	b9 01       	movw	r22, r18
    5018:	0e 94 d9 30 	call	0x61b2	; 0x61b2 <__udivmodhi4>
    501c:	28 2f       	mov	r18, r24
    501e:	ce 01       	movw	r24, r28
    5020:	05 96       	adiw	r24, 0x05	; 5
    5022:	e8 0f       	add	r30, r24
    5024:	f9 1f       	adc	r31, r25
    5026:	20 83       	st	Z, r18
		temp/=10;
    5028:	8b 81       	ldd	r24, Y+3	; 0x03
    502a:	9c 81       	ldd	r25, Y+4	; 0x04
    502c:	2a e0       	ldi	r18, 0x0A	; 10
    502e:	30 e0       	ldi	r19, 0x00	; 0
    5030:	b9 01       	movw	r22, r18
    5032:	0e 94 d9 30 	call	0x61b2	; 0x61b2 <__udivmodhi4>
    5036:	cb 01       	movw	r24, r22
    5038:	9c 83       	std	Y+4, r25	; 0x04
    503a:	8b 83       	std	Y+3, r24	; 0x03
		length++;
    503c:	8a 81       	ldd	r24, Y+2	; 0x02
    503e:	8f 5f       	subi	r24, 0xFF	; 255
    5040:	8a 83       	std	Y+2, r24	; 0x02
{
	u16 temp = copy_u16number; //
	u8 digit[7];
	u8 length = 0 ;
	s8 i ; // not u8 because if we used u8 we will run in infinity loop
	while(temp != 0)
    5042:	8b 81       	ldd	r24, Y+3	; 0x03
    5044:	9c 81       	ldd	r25, Y+4	; 0x04
    5046:	00 97       	sbiw	r24, 0x00	; 0
    5048:	f9 f6       	brne	.-66     	; 0x5008 <LCD_getanddisplayint+0x24>
		digit[length] =temp %10;
		temp/=10;
		length++;

	}
	for(i = length-1;i>=0;i--)
    504a:	8a 81       	ldd	r24, Y+2	; 0x02
    504c:	81 50       	subi	r24, 0x01	; 1
    504e:	89 83       	std	Y+1, r24	; 0x01
    5050:	11 c0       	rjmp	.+34     	; 0x5074 <LCD_getanddisplayint+0x90>
	{
		HLCD_voidLCDSendData(digit[i]+'0');
    5052:	89 81       	ldd	r24, Y+1	; 0x01
    5054:	28 2f       	mov	r18, r24
    5056:	33 27       	eor	r19, r19
    5058:	27 fd       	sbrc	r18, 7
    505a:	30 95       	com	r19
    505c:	ce 01       	movw	r24, r28
    505e:	05 96       	adiw	r24, 0x05	; 5
    5060:	fc 01       	movw	r30, r24
    5062:	e2 0f       	add	r30, r18
    5064:	f3 1f       	adc	r31, r19
    5066:	80 81       	ld	r24, Z
    5068:	80 5d       	subi	r24, 0xD0	; 208
    506a:	0e 94 bd 20 	call	0x417a	; 0x417a <HLCD_voidLCDSendData>
		digit[length] =temp %10;
		temp/=10;
		length++;

	}
	for(i = length-1;i>=0;i--)
    506e:	89 81       	ldd	r24, Y+1	; 0x01
    5070:	81 50       	subi	r24, 0x01	; 1
    5072:	89 83       	std	Y+1, r24	; 0x01
    5074:	89 81       	ldd	r24, Y+1	; 0x01
    5076:	88 23       	and	r24, r24
    5078:	64 f7       	brge	.-40     	; 0x5052 <LCD_getanddisplayint+0x6e>
	{
		HLCD_voidLCDSendData(digit[i]+'0');

	}
}
    507a:	2d 96       	adiw	r28, 0x0d	; 13
    507c:	0f b6       	in	r0, 0x3f	; 63
    507e:	f8 94       	cli
    5080:	de bf       	out	0x3e, r29	; 62
    5082:	0f be       	out	0x3f, r0	; 63
    5084:	cd bf       	out	0x3d, r28	; 61
    5086:	cf 91       	pop	r28
    5088:	df 91       	pop	r29
    508a:	08 95       	ret

0000508c <HKEYPAD_enuInit>:
extern HKEYPAD_enuKeypad_t KEYPAD_PinConfig [(NUMBER_OF_ROWS)*(NUMBER_OF_COLUMNS)];
extern u8 HKEYPAD_u8KEYPADMAP[NUMBER_OF_ROWS][NUMBER_OF_COLUMNS];


HKEYPAD_enuErrorStatus_t HKEYPAD_enuInit(void)
{
    508c:	df 93       	push	r29
    508e:	cf 93       	push	r28
    5090:	00 d0       	rcall	.+0      	; 0x5092 <HKEYPAD_enuInit+0x6>
    5092:	00 d0       	rcall	.+0      	; 0x5094 <HKEYPAD_enuInit+0x8>
    5094:	00 d0       	rcall	.+0      	; 0x5096 <HKEYPAD_enuInit+0xa>
    5096:	cd b7       	in	r28, 0x3d	; 61
    5098:	de b7       	in	r29, 0x3e	; 62
	HKEYPAD_enuErrorStatus_t Ret_enuKEYPADErrorStatus = HKEYPAD_enuOK;
    509a:	1b 82       	std	Y+3, r1	; 0x03

	/*Creating struct of port configration to take Keypad pin cofigration*/
	MPORT_strConfig_t LOC_strCurrentKeypad;

	int LOC_u8Iterator = 0;
    509c:	1a 82       	std	Y+2, r1	; 0x02
    509e:	19 82       	std	Y+1, r1	; 0x01

	for(LOC_u8Iterator = 0 ; LOC_u8Iterator < NUMBER_OF_ROWS_COL ; LOC_u8Iterator++)
    50a0:	1a 82       	std	Y+2, r1	; 0x02
    50a2:	19 82       	std	Y+1, r1	; 0x01
    50a4:	61 c0       	rjmp	.+194    	; 0x5168 <HKEYPAD_enuInit+0xdc>
	{
		/* Check if the connection type is either INPUT_PULLUP or OUTPUT_HIGH */
		if((KEYPAD_PinConfig[LOC_u8Iterator].Connectiontype == HKEYPAD_enuINPUT_PULLUP) || (KEYPAD_PinConfig[LOC_u8Iterator].Connectiontype == HKEYPAD_enuOUTPUT_HIGH))
    50a6:	29 81       	ldd	r18, Y+1	; 0x01
    50a8:	3a 81       	ldd	r19, Y+2	; 0x02
    50aa:	c9 01       	movw	r24, r18
    50ac:	88 0f       	add	r24, r24
    50ae:	99 1f       	adc	r25, r25
    50b0:	82 0f       	add	r24, r18
    50b2:	93 1f       	adc	r25, r19
    50b4:	fc 01       	movw	r30, r24
    50b6:	ef 5c       	subi	r30, 0xCF	; 207
    50b8:	fd 4f       	sbci	r31, 0xFD	; 253
    50ba:	80 81       	ld	r24, Z
    50bc:	88 23       	and	r24, r24
    50be:	71 f0       	breq	.+28     	; 0x50dc <HKEYPAD_enuInit+0x50>
    50c0:	29 81       	ldd	r18, Y+1	; 0x01
    50c2:	3a 81       	ldd	r19, Y+2	; 0x02
    50c4:	c9 01       	movw	r24, r18
    50c6:	88 0f       	add	r24, r24
    50c8:	99 1f       	adc	r25, r25
    50ca:	82 0f       	add	r24, r18
    50cc:	93 1f       	adc	r25, r19
    50ce:	fc 01       	movw	r30, r24
    50d0:	ef 5c       	subi	r30, 0xCF	; 207
    50d2:	fd 4f       	sbci	r31, 0xFD	; 253
    50d4:	80 81       	ld	r24, Z
    50d6:	81 30       	cpi	r24, 0x01	; 1
    50d8:	09 f0       	breq	.+2      	; 0x50dc <HKEYPAD_enuInit+0x50>
    50da:	3f c0       	rjmp	.+126    	; 0x515a <HKEYPAD_enuInit+0xce>
		{
			/* Set port and pin based on the configuration */
			LOC_strCurrentKeypad.Port =  KEYPAD_PinConfig[LOC_u8Iterator].Port;
    50dc:	29 81       	ldd	r18, Y+1	; 0x01
    50de:	3a 81       	ldd	r19, Y+2	; 0x02
    50e0:	c9 01       	movw	r24, r18
    50e2:	88 0f       	add	r24, r24
    50e4:	99 1f       	adc	r25, r25
    50e6:	82 0f       	add	r24, r18
    50e8:	93 1f       	adc	r25, r19
    50ea:	fc 01       	movw	r30, r24
    50ec:	e1 5d       	subi	r30, 0xD1	; 209
    50ee:	fd 4f       	sbci	r31, 0xFD	; 253
    50f0:	80 81       	ld	r24, Z
    50f2:	8c 83       	std	Y+4, r24	; 0x04
			LOC_strCurrentKeypad.Pin  =  KEYPAD_PinConfig[LOC_u8Iterator].Pin ;
    50f4:	29 81       	ldd	r18, Y+1	; 0x01
    50f6:	3a 81       	ldd	r19, Y+2	; 0x02
    50f8:	c9 01       	movw	r24, r18
    50fa:	88 0f       	add	r24, r24
    50fc:	99 1f       	adc	r25, r25
    50fe:	82 0f       	add	r24, r18
    5100:	93 1f       	adc	r25, r19
    5102:	fc 01       	movw	r30, r24
    5104:	e0 5d       	subi	r30, 0xD0	; 208
    5106:	fd 4f       	sbci	r31, 0xFD	; 253
    5108:	80 81       	ld	r24, Z
    510a:	8d 83       	std	Y+5, r24	; 0x05

			 /* Set mode based on the connection type */
			if(KEYPAD_PinConfig[LOC_u8Iterator].Connectiontype == HKEYPAD_enuINPUT_PULLUP)
    510c:	29 81       	ldd	r18, Y+1	; 0x01
    510e:	3a 81       	ldd	r19, Y+2	; 0x02
    5110:	c9 01       	movw	r24, r18
    5112:	88 0f       	add	r24, r24
    5114:	99 1f       	adc	r25, r25
    5116:	82 0f       	add	r24, r18
    5118:	93 1f       	adc	r25, r19
    511a:	fc 01       	movw	r30, r24
    511c:	ef 5c       	subi	r30, 0xCF	; 207
    511e:	fd 4f       	sbci	r31, 0xFD	; 253
    5120:	80 81       	ld	r24, Z
    5122:	88 23       	and	r24, r24
    5124:	11 f4       	brne	.+4      	; 0x512a <HKEYPAD_enuInit+0x9e>
			{
				LOC_strCurrentKeypad.Mode = MPORT_enu_INPUT_PU;
    5126:	1e 82       	std	Y+6, r1	; 0x06
    5128:	0f c0       	rjmp	.+30     	; 0x5148 <HKEYPAD_enuInit+0xbc>
			}
			else if(KEYPAD_PinConfig[LOC_u8Iterator].Connectiontype == HKEYPAD_enuOUTPUT_HIGH)
    512a:	29 81       	ldd	r18, Y+1	; 0x01
    512c:	3a 81       	ldd	r19, Y+2	; 0x02
    512e:	c9 01       	movw	r24, r18
    5130:	88 0f       	add	r24, r24
    5132:	99 1f       	adc	r25, r25
    5134:	82 0f       	add	r24, r18
    5136:	93 1f       	adc	r25, r19
    5138:	fc 01       	movw	r30, r24
    513a:	ef 5c       	subi	r30, 0xCF	; 207
    513c:	fd 4f       	sbci	r31, 0xFD	; 253
    513e:	80 81       	ld	r24, Z
    5140:	81 30       	cpi	r24, 0x01	; 1
    5142:	11 f4       	brne	.+4      	; 0x5148 <HKEYPAD_enuInit+0xbc>
			{
				LOC_strCurrentKeypad.Mode =MPORT_enu_OUTPUT_HIGH;
    5144:	82 e0       	ldi	r24, 0x02	; 2
    5146:	8e 83       	std	Y+6, r24	; 0x06
			}
			/* Configure the port for the keypad */
			if(MPORT_enuSetConfig(&LOC_strCurrentKeypad) )
    5148:	ce 01       	movw	r24, r28
    514a:	04 96       	adiw	r24, 0x04	; 4
    514c:	0e 94 00 14 	call	0x2800	; 0x2800 <MPORT_enuSetConfig>
    5150:	88 23       	and	r24, r24
    5152:	29 f0       	breq	.+10     	; 0x515e <HKEYPAD_enuInit+0xd2>
			{
				Ret_enuKEYPADErrorStatus  = HKEYPAD_enuDIOError;
    5154:	81 e0       	ldi	r24, 0x01	; 1
    5156:	8b 83       	std	Y+3, r24	; 0x03
    5158:	02 c0       	rjmp	.+4      	; 0x515e <HKEYPAD_enuInit+0xd2>
			}

		}
		else
		{
			Ret_enuKEYPADErrorStatus = HKEYPAD_enuInvalidConnection;
    515a:	82 e0       	ldi	r24, 0x02	; 2
    515c:	8b 83       	std	Y+3, r24	; 0x03
	/*Creating struct of port configration to take Keypad pin cofigration*/
	MPORT_strConfig_t LOC_strCurrentKeypad;

	int LOC_u8Iterator = 0;

	for(LOC_u8Iterator = 0 ; LOC_u8Iterator < NUMBER_OF_ROWS_COL ; LOC_u8Iterator++)
    515e:	89 81       	ldd	r24, Y+1	; 0x01
    5160:	9a 81       	ldd	r25, Y+2	; 0x02
    5162:	01 96       	adiw	r24, 0x01	; 1
    5164:	9a 83       	std	Y+2, r25	; 0x02
    5166:	89 83       	std	Y+1, r24	; 0x01
    5168:	89 81       	ldd	r24, Y+1	; 0x01
    516a:	9a 81       	ldd	r25, Y+2	; 0x02
    516c:	88 30       	cpi	r24, 0x08	; 8
    516e:	91 05       	cpc	r25, r1
    5170:	0c f4       	brge	.+2      	; 0x5174 <HKEYPAD_enuInit+0xe8>
    5172:	99 cf       	rjmp	.-206    	; 0x50a6 <HKEYPAD_enuInit+0x1a>
			Ret_enuKEYPADErrorStatus = HKEYPAD_enuInvalidConnection;
		}

	}
	/*return error*/
	return Ret_enuKEYPADErrorStatus;
    5174:	8b 81       	ldd	r24, Y+3	; 0x03
}
    5176:	26 96       	adiw	r28, 0x06	; 6
    5178:	0f b6       	in	r0, 0x3f	; 63
    517a:	f8 94       	cli
    517c:	de bf       	out	0x3e, r29	; 62
    517e:	0f be       	out	0x3f, r0	; 63
    5180:	cd bf       	out	0x3d, r28	; 61
    5182:	cf 91       	pop	r28
    5184:	df 91       	pop	r29
    5186:	08 95       	ret

00005188 <HKEYPAD_enuGetKey>:


void HKEYPAD_enuGetKey(u8 *Add_pKeyStatus)
{
    5188:	df 93       	push	r29
    518a:	cf 93       	push	r28
    518c:	cd b7       	in	r28, 0x3d	; 61
    518e:	de b7       	in	r29, 0x3e	; 62
    5190:	a1 97       	sbiw	r28, 0x21	; 33
    5192:	0f b6       	in	r0, 0x3f	; 63
    5194:	f8 94       	cli
    5196:	de bf       	out	0x3e, r29	; 62
    5198:	0f be       	out	0x3f, r0	; 63
    519a:	cd bf       	out	0x3d, r28	; 61
    519c:	99 a3       	std	Y+33, r25	; 0x21
    519e:	88 a3       	std	Y+32, r24	; 0x20
//while(1){
	//HKEYPAD_enuErrorStatus_t Ret_enuKEYPADErrorStatus = HKEYPAD_enuOK;
	u8 LOC_u8CurrentCol = 0 ;
    51a0:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 LOC_u8CurrentRow = 0 ;
    51a2:	1d 8e       	std	Y+29, r1	; 0x1d
	u8 LOC_u8CurrentRowStatus = 0 ;
    51a4:	1f 8e       	std	Y+31, r1	; 0x1f
	*Add_pKeyStatus=NULL;          // Initialize the key status
    51a6:	e8 a1       	ldd	r30, Y+32	; 0x20
    51a8:	f9 a1       	ldd	r31, Y+33	; 0x21
    51aa:	10 82       	st	Z, r1

		for(LOC_u8CurrentCol = KEYPAD_COL_START  ; LOC_u8CurrentCol< NUMBER_OF_ROWS_COL; LOC_u8CurrentCol++)
    51ac:	84 e0       	ldi	r24, 0x04	; 4
    51ae:	8e 8f       	std	Y+30, r24	; 0x1e
    51b0:	8f c1       	rjmp	.+798    	; 0x54d0 <HKEYPAD_enuGetKey+0x348>
		{
			// Set the current column LOW to scan the rows
			DIO_enuSetPinValue(KEYPAD_PinConfig[ LOC_u8CurrentCol ].Port, KEYPAD_PinConfig[ LOC_u8CurrentCol ].Pin,MPORT_enuLOW );
    51b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    51b4:	28 2f       	mov	r18, r24
    51b6:	30 e0       	ldi	r19, 0x00	; 0
    51b8:	c9 01       	movw	r24, r18
    51ba:	88 0f       	add	r24, r24
    51bc:	99 1f       	adc	r25, r25
    51be:	82 0f       	add	r24, r18
    51c0:	93 1f       	adc	r25, r19
    51c2:	fc 01       	movw	r30, r24
    51c4:	e1 5d       	subi	r30, 0xD1	; 209
    51c6:	fd 4f       	sbci	r31, 0xFD	; 253
    51c8:	40 81       	ld	r20, Z
    51ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    51cc:	28 2f       	mov	r18, r24
    51ce:	30 e0       	ldi	r19, 0x00	; 0
    51d0:	c9 01       	movw	r24, r18
    51d2:	88 0f       	add	r24, r24
    51d4:	99 1f       	adc	r25, r25
    51d6:	82 0f       	add	r24, r18
    51d8:	93 1f       	adc	r25, r19
    51da:	fc 01       	movw	r30, r24
    51dc:	e0 5d       	subi	r30, 0xD0	; 208
    51de:	fd 4f       	sbci	r31, 0xFD	; 253
    51e0:	90 81       	ld	r25, Z
    51e2:	84 2f       	mov	r24, r20
    51e4:	69 2f       	mov	r22, r25
    51e6:	40 e0       	ldi	r20, 0x00	; 0
    51e8:	0e 94 a2 1a 	call	0x3544	; 0x3544 <DIO_enuSetPinValue>

			for(LOC_u8CurrentRow = KEYPAD_ROW_START ; LOC_u8CurrentRow < NUMBER_OF_ROWS ; LOC_u8CurrentRow++)
    51ec:	1d 8e       	std	Y+29, r1	; 0x1d
    51ee:	47 c1       	rjmp	.+654    	; 0x547e <HKEYPAD_enuGetKey+0x2f6>
			{
				 // Read the status of the current row
				DIO_enuGetPinValue(KEYPAD_PinConfig[ LOC_u8CurrentRow ].Port,KEYPAD_PinConfig[ LOC_u8CurrentRow].Pin,&LOC_u8CurrentRowStatus );
    51f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    51f2:	28 2f       	mov	r18, r24
    51f4:	30 e0       	ldi	r19, 0x00	; 0
    51f6:	c9 01       	movw	r24, r18
    51f8:	88 0f       	add	r24, r24
    51fa:	99 1f       	adc	r25, r25
    51fc:	82 0f       	add	r24, r18
    51fe:	93 1f       	adc	r25, r19
    5200:	fc 01       	movw	r30, r24
    5202:	e1 5d       	subi	r30, 0xD1	; 209
    5204:	fd 4f       	sbci	r31, 0xFD	; 253
    5206:	40 81       	ld	r20, Z
    5208:	8d 8d       	ldd	r24, Y+29	; 0x1d
    520a:	28 2f       	mov	r18, r24
    520c:	30 e0       	ldi	r19, 0x00	; 0
    520e:	c9 01       	movw	r24, r18
    5210:	88 0f       	add	r24, r24
    5212:	99 1f       	adc	r25, r25
    5214:	82 0f       	add	r24, r18
    5216:	93 1f       	adc	r25, r19
    5218:	fc 01       	movw	r30, r24
    521a:	e0 5d       	subi	r30, 0xD0	; 208
    521c:	fd 4f       	sbci	r31, 0xFD	; 253
    521e:	90 81       	ld	r25, Z
    5220:	9e 01       	movw	r18, r28
    5222:	21 5e       	subi	r18, 0xE1	; 225
    5224:	3f 4f       	sbci	r19, 0xFF	; 255
    5226:	84 2f       	mov	r24, r20
    5228:	69 2f       	mov	r22, r25
    522a:	a9 01       	movw	r20, r18
    522c:	0e 94 1b 1c 	call	0x3836	; 0x3836 <DIO_enuGetPinValue>
				// Check if a key is pressed
				if(LOC_u8CurrentRowStatus == MPORT_enuLOW )
    5230:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5232:	88 23       	and	r24, r24
    5234:	09 f0       	breq	.+2      	; 0x5238 <HKEYPAD_enuGetKey+0xb0>
    5236:	20 c1       	rjmp	.+576    	; 0x5478 <HKEYPAD_enuGetKey+0x2f0>
				{
					// Update the key status based on the key map
					*Add_pKeyStatus= HKEYPAD_u8KEYPADMAP[ LOC_u8CurrentRow ][LOC_u8CurrentCol - NUMBER_OF_COLUMNS ];
    5238:	8d 8d       	ldd	r24, Y+29	; 0x1d
    523a:	48 2f       	mov	r20, r24
    523c:	50 e0       	ldi	r21, 0x00	; 0
    523e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5240:	88 2f       	mov	r24, r24
    5242:	90 e0       	ldi	r25, 0x00	; 0
    5244:	9c 01       	movw	r18, r24
    5246:	24 50       	subi	r18, 0x04	; 4
    5248:	30 40       	sbci	r19, 0x00	; 0
    524a:	ca 01       	movw	r24, r20
    524c:	88 0f       	add	r24, r24
    524e:	99 1f       	adc	r25, r25
    5250:	88 0f       	add	r24, r24
    5252:	99 1f       	adc	r25, r25
    5254:	82 0f       	add	r24, r18
    5256:	93 1f       	adc	r25, r19
    5258:	fc 01       	movw	r30, r24
    525a:	ec 59       	subi	r30, 0x9C	; 156
    525c:	fd 4f       	sbci	r31, 0xFD	; 253
    525e:	80 81       	ld	r24, Z
    5260:	e8 a1       	ldd	r30, Y+32	; 0x20
    5262:	f9 a1       	ldd	r31, Y+33	; 0x21
    5264:	80 83       	st	Z, r24
    5266:	80 e0       	ldi	r24, 0x00	; 0
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	a0 e2       	ldi	r26, 0x20	; 32
    526c:	b1 e4       	ldi	r27, 0x41	; 65
    526e:	89 8f       	std	Y+25, r24	; 0x19
    5270:	9a 8f       	std	Y+26, r25	; 0x1a
    5272:	ab 8f       	std	Y+27, r26	; 0x1b
    5274:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5276:	69 8d       	ldd	r22, Y+25	; 0x19
    5278:	7a 8d       	ldd	r23, Y+26	; 0x1a
    527a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    527c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    527e:	20 e0       	ldi	r18, 0x00	; 0
    5280:	30 e0       	ldi	r19, 0x00	; 0
    5282:	4a ef       	ldi	r20, 0xFA	; 250
    5284:	54 e4       	ldi	r21, 0x44	; 68
    5286:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    528a:	dc 01       	movw	r26, r24
    528c:	cb 01       	movw	r24, r22
    528e:	8d 8b       	std	Y+21, r24	; 0x15
    5290:	9e 8b       	std	Y+22, r25	; 0x16
    5292:	af 8b       	std	Y+23, r26	; 0x17
    5294:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5296:	6d 89       	ldd	r22, Y+21	; 0x15
    5298:	7e 89       	ldd	r23, Y+22	; 0x16
    529a:	8f 89       	ldd	r24, Y+23	; 0x17
    529c:	98 8d       	ldd	r25, Y+24	; 0x18
    529e:	20 e0       	ldi	r18, 0x00	; 0
    52a0:	30 e0       	ldi	r19, 0x00	; 0
    52a2:	40 e8       	ldi	r20, 0x80	; 128
    52a4:	5f e3       	ldi	r21, 0x3F	; 63
    52a6:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    52aa:	88 23       	and	r24, r24
    52ac:	2c f4       	brge	.+10     	; 0x52b8 <HKEYPAD_enuGetKey+0x130>
		__ticks = 1;
    52ae:	81 e0       	ldi	r24, 0x01	; 1
    52b0:	90 e0       	ldi	r25, 0x00	; 0
    52b2:	9c 8b       	std	Y+20, r25	; 0x14
    52b4:	8b 8b       	std	Y+19, r24	; 0x13
    52b6:	3f c0       	rjmp	.+126    	; 0x5336 <HKEYPAD_enuGetKey+0x1ae>
	else if (__tmp > 65535)
    52b8:	6d 89       	ldd	r22, Y+21	; 0x15
    52ba:	7e 89       	ldd	r23, Y+22	; 0x16
    52bc:	8f 89       	ldd	r24, Y+23	; 0x17
    52be:	98 8d       	ldd	r25, Y+24	; 0x18
    52c0:	20 e0       	ldi	r18, 0x00	; 0
    52c2:	3f ef       	ldi	r19, 0xFF	; 255
    52c4:	4f e7       	ldi	r20, 0x7F	; 127
    52c6:	57 e4       	ldi	r21, 0x47	; 71
    52c8:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    52cc:	18 16       	cp	r1, r24
    52ce:	4c f5       	brge	.+82     	; 0x5322 <HKEYPAD_enuGetKey+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52d0:	69 8d       	ldd	r22, Y+25	; 0x19
    52d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    52d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52d8:	20 e0       	ldi	r18, 0x00	; 0
    52da:	30 e0       	ldi	r19, 0x00	; 0
    52dc:	40 e2       	ldi	r20, 0x20	; 32
    52de:	51 e4       	ldi	r21, 0x41	; 65
    52e0:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    52e4:	dc 01       	movw	r26, r24
    52e6:	cb 01       	movw	r24, r22
    52e8:	bc 01       	movw	r22, r24
    52ea:	cd 01       	movw	r24, r26
    52ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52f0:	dc 01       	movw	r26, r24
    52f2:	cb 01       	movw	r24, r22
    52f4:	9c 8b       	std	Y+20, r25	; 0x14
    52f6:	8b 8b       	std	Y+19, r24	; 0x13
    52f8:	0f c0       	rjmp	.+30     	; 0x5318 <HKEYPAD_enuGetKey+0x190>
    52fa:	88 ec       	ldi	r24, 0xC8	; 200
    52fc:	90 e0       	ldi	r25, 0x00	; 0
    52fe:	9a 8b       	std	Y+18, r25	; 0x12
    5300:	89 8b       	std	Y+17, r24	; 0x11
    5302:	89 89       	ldd	r24, Y+17	; 0x11
    5304:	9a 89       	ldd	r25, Y+18	; 0x12
    5306:	01 97       	sbiw	r24, 0x01	; 1
    5308:	f1 f7       	brne	.-4      	; 0x5306 <HKEYPAD_enuGetKey+0x17e>
    530a:	9a 8b       	std	Y+18, r25	; 0x12
    530c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    530e:	8b 89       	ldd	r24, Y+19	; 0x13
    5310:	9c 89       	ldd	r25, Y+20	; 0x14
    5312:	01 97       	sbiw	r24, 0x01	; 1
    5314:	9c 8b       	std	Y+20, r25	; 0x14
    5316:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5318:	8b 89       	ldd	r24, Y+19	; 0x13
    531a:	9c 89       	ldd	r25, Y+20	; 0x14
    531c:	00 97       	sbiw	r24, 0x00	; 0
    531e:	69 f7       	brne	.-38     	; 0x52fa <HKEYPAD_enuGetKey+0x172>
    5320:	35 c0       	rjmp	.+106    	; 0x538c <HKEYPAD_enuGetKey+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5322:	6d 89       	ldd	r22, Y+21	; 0x15
    5324:	7e 89       	ldd	r23, Y+22	; 0x16
    5326:	8f 89       	ldd	r24, Y+23	; 0x17
    5328:	98 8d       	ldd	r25, Y+24	; 0x18
    532a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    532e:	dc 01       	movw	r26, r24
    5330:	cb 01       	movw	r24, r22
    5332:	9c 8b       	std	Y+20, r25	; 0x14
    5334:	8b 8b       	std	Y+19, r24	; 0x13
    5336:	8b 89       	ldd	r24, Y+19	; 0x13
    5338:	9c 89       	ldd	r25, Y+20	; 0x14
    533a:	98 8b       	std	Y+16, r25	; 0x10
    533c:	8f 87       	std	Y+15, r24	; 0x0f
    533e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5340:	98 89       	ldd	r25, Y+16	; 0x10
    5342:	01 97       	sbiw	r24, 0x01	; 1
    5344:	f1 f7       	brne	.-4      	; 0x5342 <HKEYPAD_enuGetKey+0x1ba>
    5346:	98 8b       	std	Y+16, r25	; 0x10
    5348:	8f 87       	std	Y+15, r24	; 0x0f
    534a:	20 c0       	rjmp	.+64     	; 0x538c <HKEYPAD_enuGetKey+0x204>
					 // Debouncing delays
					_delay_ms(10);

					while(LOC_u8CurrentRowStatus == MPORT_enuLOW)
					{
						DIO_enuGetPinValue(KEYPAD_PinConfig[ LOC_u8CurrentRow].Port,KEYPAD_PinConfig[LOC_u8CurrentRow].Pin,&LOC_u8CurrentRowStatus );
    534c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    534e:	28 2f       	mov	r18, r24
    5350:	30 e0       	ldi	r19, 0x00	; 0
    5352:	c9 01       	movw	r24, r18
    5354:	88 0f       	add	r24, r24
    5356:	99 1f       	adc	r25, r25
    5358:	82 0f       	add	r24, r18
    535a:	93 1f       	adc	r25, r19
    535c:	fc 01       	movw	r30, r24
    535e:	e1 5d       	subi	r30, 0xD1	; 209
    5360:	fd 4f       	sbci	r31, 0xFD	; 253
    5362:	40 81       	ld	r20, Z
    5364:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5366:	28 2f       	mov	r18, r24
    5368:	30 e0       	ldi	r19, 0x00	; 0
    536a:	c9 01       	movw	r24, r18
    536c:	88 0f       	add	r24, r24
    536e:	99 1f       	adc	r25, r25
    5370:	82 0f       	add	r24, r18
    5372:	93 1f       	adc	r25, r19
    5374:	fc 01       	movw	r30, r24
    5376:	e0 5d       	subi	r30, 0xD0	; 208
    5378:	fd 4f       	sbci	r31, 0xFD	; 253
    537a:	90 81       	ld	r25, Z
    537c:	9e 01       	movw	r18, r28
    537e:	21 5e       	subi	r18, 0xE1	; 225
    5380:	3f 4f       	sbci	r19, 0xFF	; 255
    5382:	84 2f       	mov	r24, r20
    5384:	69 2f       	mov	r22, r25
    5386:	a9 01       	movw	r20, r18
    5388:	0e 94 1b 1c 	call	0x3836	; 0x3836 <DIO_enuGetPinValue>
					*Add_pKeyStatus= HKEYPAD_u8KEYPADMAP[ LOC_u8CurrentRow ][LOC_u8CurrentCol - NUMBER_OF_COLUMNS ];

					 // Debouncing delays
					_delay_ms(10);

					while(LOC_u8CurrentRowStatus == MPORT_enuLOW)
    538c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    538e:	88 23       	and	r24, r24
    5390:	e9 f2       	breq	.-70     	; 0x534c <HKEYPAD_enuGetKey+0x1c4>
    5392:	80 e0       	ldi	r24, 0x00	; 0
    5394:	90 e0       	ldi	r25, 0x00	; 0
    5396:	a0 e2       	ldi	r26, 0x20	; 32
    5398:	b1 e4       	ldi	r27, 0x41	; 65
    539a:	8b 87       	std	Y+11, r24	; 0x0b
    539c:	9c 87       	std	Y+12, r25	; 0x0c
    539e:	ad 87       	std	Y+13, r26	; 0x0d
    53a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    53a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    53a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    53a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    53aa:	20 e0       	ldi	r18, 0x00	; 0
    53ac:	30 e0       	ldi	r19, 0x00	; 0
    53ae:	4a ef       	ldi	r20, 0xFA	; 250
    53b0:	54 e4       	ldi	r21, 0x44	; 68
    53b2:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    53b6:	dc 01       	movw	r26, r24
    53b8:	cb 01       	movw	r24, r22
    53ba:	8f 83       	std	Y+7, r24	; 0x07
    53bc:	98 87       	std	Y+8, r25	; 0x08
    53be:	a9 87       	std	Y+9, r26	; 0x09
    53c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    53c2:	6f 81       	ldd	r22, Y+7	; 0x07
    53c4:	78 85       	ldd	r23, Y+8	; 0x08
    53c6:	89 85       	ldd	r24, Y+9	; 0x09
    53c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    53ca:	20 e0       	ldi	r18, 0x00	; 0
    53cc:	30 e0       	ldi	r19, 0x00	; 0
    53ce:	40 e8       	ldi	r20, 0x80	; 128
    53d0:	5f e3       	ldi	r21, 0x3F	; 63
    53d2:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    53d6:	88 23       	and	r24, r24
    53d8:	2c f4       	brge	.+10     	; 0x53e4 <HKEYPAD_enuGetKey+0x25c>
		__ticks = 1;
    53da:	81 e0       	ldi	r24, 0x01	; 1
    53dc:	90 e0       	ldi	r25, 0x00	; 0
    53de:	9e 83       	std	Y+6, r25	; 0x06
    53e0:	8d 83       	std	Y+5, r24	; 0x05
    53e2:	3f c0       	rjmp	.+126    	; 0x5462 <HKEYPAD_enuGetKey+0x2da>
	else if (__tmp > 65535)
    53e4:	6f 81       	ldd	r22, Y+7	; 0x07
    53e6:	78 85       	ldd	r23, Y+8	; 0x08
    53e8:	89 85       	ldd	r24, Y+9	; 0x09
    53ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    53ec:	20 e0       	ldi	r18, 0x00	; 0
    53ee:	3f ef       	ldi	r19, 0xFF	; 255
    53f0:	4f e7       	ldi	r20, 0x7F	; 127
    53f2:	57 e4       	ldi	r21, 0x47	; 71
    53f4:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    53f8:	18 16       	cp	r1, r24
    53fa:	4c f5       	brge	.+82     	; 0x544e <HKEYPAD_enuGetKey+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    53fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    5400:	8d 85       	ldd	r24, Y+13	; 0x0d
    5402:	9e 85       	ldd	r25, Y+14	; 0x0e
    5404:	20 e0       	ldi	r18, 0x00	; 0
    5406:	30 e0       	ldi	r19, 0x00	; 0
    5408:	40 e2       	ldi	r20, 0x20	; 32
    540a:	51 e4       	ldi	r21, 0x41	; 65
    540c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5410:	dc 01       	movw	r26, r24
    5412:	cb 01       	movw	r24, r22
    5414:	bc 01       	movw	r22, r24
    5416:	cd 01       	movw	r24, r26
    5418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    541c:	dc 01       	movw	r26, r24
    541e:	cb 01       	movw	r24, r22
    5420:	9e 83       	std	Y+6, r25	; 0x06
    5422:	8d 83       	std	Y+5, r24	; 0x05
    5424:	0f c0       	rjmp	.+30     	; 0x5444 <HKEYPAD_enuGetKey+0x2bc>
    5426:	88 ec       	ldi	r24, 0xC8	; 200
    5428:	90 e0       	ldi	r25, 0x00	; 0
    542a:	9c 83       	std	Y+4, r25	; 0x04
    542c:	8b 83       	std	Y+3, r24	; 0x03
    542e:	8b 81       	ldd	r24, Y+3	; 0x03
    5430:	9c 81       	ldd	r25, Y+4	; 0x04
    5432:	01 97       	sbiw	r24, 0x01	; 1
    5434:	f1 f7       	brne	.-4      	; 0x5432 <HKEYPAD_enuGetKey+0x2aa>
    5436:	9c 83       	std	Y+4, r25	; 0x04
    5438:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    543a:	8d 81       	ldd	r24, Y+5	; 0x05
    543c:	9e 81       	ldd	r25, Y+6	; 0x06
    543e:	01 97       	sbiw	r24, 0x01	; 1
    5440:	9e 83       	std	Y+6, r25	; 0x06
    5442:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5444:	8d 81       	ldd	r24, Y+5	; 0x05
    5446:	9e 81       	ldd	r25, Y+6	; 0x06
    5448:	00 97       	sbiw	r24, 0x00	; 0
    544a:	69 f7       	brne	.-38     	; 0x5426 <HKEYPAD_enuGetKey+0x29e>
    544c:	1c c0       	rjmp	.+56     	; 0x5486 <HKEYPAD_enuGetKey+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    544e:	6f 81       	ldd	r22, Y+7	; 0x07
    5450:	78 85       	ldd	r23, Y+8	; 0x08
    5452:	89 85       	ldd	r24, Y+9	; 0x09
    5454:	9a 85       	ldd	r25, Y+10	; 0x0a
    5456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    545a:	dc 01       	movw	r26, r24
    545c:	cb 01       	movw	r24, r22
    545e:	9e 83       	std	Y+6, r25	; 0x06
    5460:	8d 83       	std	Y+5, r24	; 0x05
    5462:	8d 81       	ldd	r24, Y+5	; 0x05
    5464:	9e 81       	ldd	r25, Y+6	; 0x06
    5466:	9a 83       	std	Y+2, r25	; 0x02
    5468:	89 83       	std	Y+1, r24	; 0x01
    546a:	89 81       	ldd	r24, Y+1	; 0x01
    546c:	9a 81       	ldd	r25, Y+2	; 0x02
    546e:	01 97       	sbiw	r24, 0x01	; 1
    5470:	f1 f7       	brne	.-4      	; 0x546e <HKEYPAD_enuGetKey+0x2e6>
    5472:	9a 83       	std	Y+2, r25	; 0x02
    5474:	89 83       	std	Y+1, r24	; 0x01
    5476:	07 c0       	rjmp	.+14     	; 0x5486 <HKEYPAD_enuGetKey+0x2fe>
		for(LOC_u8CurrentCol = KEYPAD_COL_START  ; LOC_u8CurrentCol< NUMBER_OF_ROWS_COL; LOC_u8CurrentCol++)
		{
			// Set the current column LOW to scan the rows
			DIO_enuSetPinValue(KEYPAD_PinConfig[ LOC_u8CurrentCol ].Port, KEYPAD_PinConfig[ LOC_u8CurrentCol ].Pin,MPORT_enuLOW );

			for(LOC_u8CurrentRow = KEYPAD_ROW_START ; LOC_u8CurrentRow < NUMBER_OF_ROWS ; LOC_u8CurrentRow++)
    5478:	8d 8d       	ldd	r24, Y+29	; 0x1d
    547a:	8f 5f       	subi	r24, 0xFF	; 255
    547c:	8d 8f       	std	Y+29, r24	; 0x1d
    547e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5480:	84 30       	cpi	r24, 0x04	; 4
    5482:	08 f4       	brcc	.+2      	; 0x5486 <HKEYPAD_enuGetKey+0x2fe>
    5484:	b5 ce       	rjmp	.-662    	; 0x51f0 <HKEYPAD_enuGetKey+0x68>
					break;
				}

			}
			 // Set the current column HIGH after scanning
			DIO_enuSetPinValue(KEYPAD_PinConfig[LOC_u8CurrentCol].Port, KEYPAD_PinConfig[LOC_u8CurrentCol].Pin,MPORT_enuHIGH );
    5486:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5488:	28 2f       	mov	r18, r24
    548a:	30 e0       	ldi	r19, 0x00	; 0
    548c:	c9 01       	movw	r24, r18
    548e:	88 0f       	add	r24, r24
    5490:	99 1f       	adc	r25, r25
    5492:	82 0f       	add	r24, r18
    5494:	93 1f       	adc	r25, r19
    5496:	fc 01       	movw	r30, r24
    5498:	e1 5d       	subi	r30, 0xD1	; 209
    549a:	fd 4f       	sbci	r31, 0xFD	; 253
    549c:	40 81       	ld	r20, Z
    549e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    54a0:	28 2f       	mov	r18, r24
    54a2:	30 e0       	ldi	r19, 0x00	; 0
    54a4:	c9 01       	movw	r24, r18
    54a6:	88 0f       	add	r24, r24
    54a8:	99 1f       	adc	r25, r25
    54aa:	82 0f       	add	r24, r18
    54ac:	93 1f       	adc	r25, r19
    54ae:	fc 01       	movw	r30, r24
    54b0:	e0 5d       	subi	r30, 0xD0	; 208
    54b2:	fd 4f       	sbci	r31, 0xFD	; 253
    54b4:	90 81       	ld	r25, Z
    54b6:	84 2f       	mov	r24, r20
    54b8:	69 2f       	mov	r22, r25
    54ba:	41 e0       	ldi	r20, 0x01	; 1
    54bc:	0e 94 a2 1a 	call	0x3544	; 0x3544 <DIO_enuSetPinValue>
			// Check if a key is detected, and exit the column scanning loop
			if(*Add_pKeyStatus != NULL)
    54c0:	e8 a1       	ldd	r30, Y+32	; 0x20
    54c2:	f9 a1       	ldd	r31, Y+33	; 0x21
    54c4:	80 81       	ld	r24, Z
    54c6:	88 23       	and	r24, r24
    54c8:	39 f4       	brne	.+14     	; 0x54d8 <HKEYPAD_enuGetKey+0x350>
	u8 LOC_u8CurrentCol = 0 ;
	u8 LOC_u8CurrentRow = 0 ;
	u8 LOC_u8CurrentRowStatus = 0 ;
	*Add_pKeyStatus=NULL;          // Initialize the key status

		for(LOC_u8CurrentCol = KEYPAD_COL_START  ; LOC_u8CurrentCol< NUMBER_OF_ROWS_COL; LOC_u8CurrentCol++)
    54ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    54cc:	8f 5f       	subi	r24, 0xFF	; 255
    54ce:	8e 8f       	std	Y+30, r24	; 0x1e
    54d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    54d2:	88 30       	cpi	r24, 0x08	; 8
    54d4:	08 f4       	brcc	.+2      	; 0x54d8 <HKEYPAD_enuGetKey+0x350>
    54d6:	6d ce       	rjmp	.-806    	; 0x51b2 <HKEYPAD_enuGetKey+0x2a>
		}
	else
		{
			//do nothing
		}
	}
    54d8:	a1 96       	adiw	r28, 0x21	; 33
    54da:	0f b6       	in	r0, 0x3f	; 63
    54dc:	f8 94       	cli
    54de:	de bf       	out	0x3e, r29	; 62
    54e0:	0f be       	out	0x3f, r0	; 63
    54e2:	cd bf       	out	0x3d, r28	; 61
    54e4:	cf 91       	pop	r28
    54e6:	df 91       	pop	r29
    54e8:	08 95       	ret

000054ea <HKEYPAD_vCalculator>:

//}

void HKEYPAD_vCalculator(void)
{
    54ea:	af 92       	push	r10
    54ec:	bf 92       	push	r11
    54ee:	cf 92       	push	r12
    54f0:	df 92       	push	r13
    54f2:	ef 92       	push	r14
    54f4:	ff 92       	push	r15
    54f6:	0f 93       	push	r16
    54f8:	1f 93       	push	r17
    54fa:	df 93       	push	r29
    54fc:	cf 93       	push	r28
    54fe:	cd b7       	in	r28, 0x3d	; 61
    5500:	de b7       	in	r29, 0x3e	; 62
    5502:	c1 54       	subi	r28, 0x41	; 65
    5504:	d0 40       	sbci	r29, 0x00	; 0
    5506:	0f b6       	in	r0, 0x3f	; 63
    5508:	f8 94       	cli
    550a:	de bf       	out	0x3e, r29	; 62
    550c:	0f be       	out	0x3f, r0	; 63
    550e:	cd bf       	out	0x3d, r28	; 61

int NUM1 = 0;
    5510:	1c ae       	std	Y+60, r1	; 0x3c
    5512:	1b ae       	std	Y+59, r1	; 0x3b
int NUM2 = 0;
    5514:	1e ae       	std	Y+62, r1	; 0x3e
    5516:	1d ae       	std	Y+61, r1	; 0x3d
int Result = 0;
    5518:	1a ae       	std	Y+58, r1	; 0x3a
    551a:	19 ae       	std	Y+57, r1	; 0x39
char Operator = 0;
    551c:	1f ae       	std	Y+63, r1	; 0x3f

// Display the prompt for the first number
HLCD_voidSendString("First Numb = ", HLCD_enuFirstLine, HLCD_enuPosition0);
    551e:	80 e6       	ldi	r24, 0x60	; 96
    5520:	90 e0       	ldi	r25, 0x00	; 0
    5522:	60 e0       	ldi	r22, 0x00	; 0
    5524:	40 e0       	ldi	r20, 0x00	; 0
    5526:	0e 94 56 26 	call	0x4cac	; 0x4cac <HLCD_voidSendString>
HKEYPAD_enuGetKey(&NUM1);
    552a:	ce 01       	movw	r24, r28
    552c:	cb 96       	adiw	r24, 0x3b	; 59
    552e:	0e 94 c4 28 	call	0x5188	; 0x5188 <HKEYPAD_enuGetKey>
NUM1 = NUM1 - '0';
    5532:	8b ad       	ldd	r24, Y+59	; 0x3b
    5534:	9c ad       	ldd	r25, Y+60	; 0x3c
    5536:	c0 97       	sbiw	r24, 0x30	; 48
    5538:	9c af       	std	Y+60, r25	; 0x3c
    553a:	8b af       	std	Y+59, r24	; 0x3b
HLCD_enuWriteNumber(NUM1);
    553c:	2b ad       	ldd	r18, Y+59	; 0x3b
    553e:	3c ad       	ldd	r19, Y+60	; 0x3c
    5540:	c9 01       	movw	r24, r18
    5542:	99 0f       	add	r25, r25
    5544:	88 0b       	sbc	r24, r24
    5546:	98 2f       	mov	r25, r24
    5548:	59 01       	movw	r10, r18
    554a:	c8 2e       	mov	r12, r24
    554c:	d8 2e       	mov	r13, r24
    554e:	e8 2e       	mov	r14, r24
    5550:	f8 2e       	mov	r15, r24
    5552:	08 2f       	mov	r16, r24
    5554:	18 2f       	mov	r17, r24
    5556:	2a 2d       	mov	r18, r10
    5558:	3b 2d       	mov	r19, r11
    555a:	4c 2d       	mov	r20, r12
    555c:	5d 2d       	mov	r21, r13
    555e:	6e 2d       	mov	r22, r14
    5560:	7f 2d       	mov	r23, r15
    5562:	80 2f       	mov	r24, r16
    5564:	91 2f       	mov	r25, r17
    5566:	0e 94 88 26 	call	0x4d10	; 0x4d10 <HLCD_enuWriteNumber>
    556a:	80 e0       	ldi	r24, 0x00	; 0
    556c:	90 e0       	ldi	r25, 0x00	; 0
    556e:	a6 e1       	ldi	r26, 0x16	; 22
    5570:	b4 e4       	ldi	r27, 0x44	; 68
    5572:	8d ab       	std	Y+53, r24	; 0x35
    5574:	9e ab       	std	Y+54, r25	; 0x36
    5576:	af ab       	std	Y+55, r26	; 0x37
    5578:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    557a:	6d a9       	ldd	r22, Y+53	; 0x35
    557c:	7e a9       	ldd	r23, Y+54	; 0x36
    557e:	8f a9       	ldd	r24, Y+55	; 0x37
    5580:	98 ad       	ldd	r25, Y+56	; 0x38
    5582:	20 e0       	ldi	r18, 0x00	; 0
    5584:	30 e0       	ldi	r19, 0x00	; 0
    5586:	4a ef       	ldi	r20, 0xFA	; 250
    5588:	54 e4       	ldi	r21, 0x44	; 68
    558a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    558e:	dc 01       	movw	r26, r24
    5590:	cb 01       	movw	r24, r22
    5592:	89 ab       	std	Y+49, r24	; 0x31
    5594:	9a ab       	std	Y+50, r25	; 0x32
    5596:	ab ab       	std	Y+51, r26	; 0x33
    5598:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    559a:	69 a9       	ldd	r22, Y+49	; 0x31
    559c:	7a a9       	ldd	r23, Y+50	; 0x32
    559e:	8b a9       	ldd	r24, Y+51	; 0x33
    55a0:	9c a9       	ldd	r25, Y+52	; 0x34
    55a2:	20 e0       	ldi	r18, 0x00	; 0
    55a4:	30 e0       	ldi	r19, 0x00	; 0
    55a6:	40 e8       	ldi	r20, 0x80	; 128
    55a8:	5f e3       	ldi	r21, 0x3F	; 63
    55aa:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    55ae:	88 23       	and	r24, r24
    55b0:	2c f4       	brge	.+10     	; 0x55bc <HKEYPAD_vCalculator+0xd2>
		__ticks = 1;
    55b2:	81 e0       	ldi	r24, 0x01	; 1
    55b4:	90 e0       	ldi	r25, 0x00	; 0
    55b6:	98 ab       	std	Y+48, r25	; 0x30
    55b8:	8f a7       	std	Y+47, r24	; 0x2f
    55ba:	3f c0       	rjmp	.+126    	; 0x563a <HKEYPAD_vCalculator+0x150>
	else if (__tmp > 65535)
    55bc:	69 a9       	ldd	r22, Y+49	; 0x31
    55be:	7a a9       	ldd	r23, Y+50	; 0x32
    55c0:	8b a9       	ldd	r24, Y+51	; 0x33
    55c2:	9c a9       	ldd	r25, Y+52	; 0x34
    55c4:	20 e0       	ldi	r18, 0x00	; 0
    55c6:	3f ef       	ldi	r19, 0xFF	; 255
    55c8:	4f e7       	ldi	r20, 0x7F	; 127
    55ca:	57 e4       	ldi	r21, 0x47	; 71
    55cc:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    55d0:	18 16       	cp	r1, r24
    55d2:	4c f5       	brge	.+82     	; 0x5626 <HKEYPAD_vCalculator+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55d4:	6d a9       	ldd	r22, Y+53	; 0x35
    55d6:	7e a9       	ldd	r23, Y+54	; 0x36
    55d8:	8f a9       	ldd	r24, Y+55	; 0x37
    55da:	98 ad       	ldd	r25, Y+56	; 0x38
    55dc:	20 e0       	ldi	r18, 0x00	; 0
    55de:	30 e0       	ldi	r19, 0x00	; 0
    55e0:	40 e2       	ldi	r20, 0x20	; 32
    55e2:	51 e4       	ldi	r21, 0x41	; 65
    55e4:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    55e8:	dc 01       	movw	r26, r24
    55ea:	cb 01       	movw	r24, r22
    55ec:	bc 01       	movw	r22, r24
    55ee:	cd 01       	movw	r24, r26
    55f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55f4:	dc 01       	movw	r26, r24
    55f6:	cb 01       	movw	r24, r22
    55f8:	98 ab       	std	Y+48, r25	; 0x30
    55fa:	8f a7       	std	Y+47, r24	; 0x2f
    55fc:	0f c0       	rjmp	.+30     	; 0x561c <HKEYPAD_vCalculator+0x132>
    55fe:	88 ec       	ldi	r24, 0xC8	; 200
    5600:	90 e0       	ldi	r25, 0x00	; 0
    5602:	9e a7       	std	Y+46, r25	; 0x2e
    5604:	8d a7       	std	Y+45, r24	; 0x2d
    5606:	8d a5       	ldd	r24, Y+45	; 0x2d
    5608:	9e a5       	ldd	r25, Y+46	; 0x2e
    560a:	01 97       	sbiw	r24, 0x01	; 1
    560c:	f1 f7       	brne	.-4      	; 0x560a <HKEYPAD_vCalculator+0x120>
    560e:	9e a7       	std	Y+46, r25	; 0x2e
    5610:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5612:	8f a5       	ldd	r24, Y+47	; 0x2f
    5614:	98 a9       	ldd	r25, Y+48	; 0x30
    5616:	01 97       	sbiw	r24, 0x01	; 1
    5618:	98 ab       	std	Y+48, r25	; 0x30
    561a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    561c:	8f a5       	ldd	r24, Y+47	; 0x2f
    561e:	98 a9       	ldd	r25, Y+48	; 0x30
    5620:	00 97       	sbiw	r24, 0x00	; 0
    5622:	69 f7       	brne	.-38     	; 0x55fe <HKEYPAD_vCalculator+0x114>
    5624:	14 c0       	rjmp	.+40     	; 0x564e <HKEYPAD_vCalculator+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5626:	69 a9       	ldd	r22, Y+49	; 0x31
    5628:	7a a9       	ldd	r23, Y+50	; 0x32
    562a:	8b a9       	ldd	r24, Y+51	; 0x33
    562c:	9c a9       	ldd	r25, Y+52	; 0x34
    562e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5632:	dc 01       	movw	r26, r24
    5634:	cb 01       	movw	r24, r22
    5636:	98 ab       	std	Y+48, r25	; 0x30
    5638:	8f a7       	std	Y+47, r24	; 0x2f
    563a:	8f a5       	ldd	r24, Y+47	; 0x2f
    563c:	98 a9       	ldd	r25, Y+48	; 0x30
    563e:	9c a7       	std	Y+44, r25	; 0x2c
    5640:	8b a7       	std	Y+43, r24	; 0x2b
    5642:	8b a5       	ldd	r24, Y+43	; 0x2b
    5644:	9c a5       	ldd	r25, Y+44	; 0x2c
    5646:	01 97       	sbiw	r24, 0x01	; 1
    5648:	f1 f7       	brne	.-4      	; 0x5646 <HKEYPAD_vCalculator+0x15c>
    564a:	9c a7       	std	Y+44, r25	; 0x2c
    564c:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(600);
HLCD_voidLCDCLR();
    564e:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <HLCD_voidLCDCLR>

// Display the prompt for the operator
HLCD_voidSendString("Operator = ", HLCD_enuFirstLine, HLCD_enuPosition0);
    5652:	8e e6       	ldi	r24, 0x6E	; 110
    5654:	90 e0       	ldi	r25, 0x00	; 0
    5656:	60 e0       	ldi	r22, 0x00	; 0
    5658:	40 e0       	ldi	r20, 0x00	; 0
    565a:	0e 94 56 26 	call	0x4cac	; 0x4cac <HLCD_voidSendString>
HKEYPAD_enuGetKey(&Operator);
    565e:	ce 01       	movw	r24, r28
    5660:	cf 96       	adiw	r24, 0x3f	; 63
    5662:	0e 94 c4 28 	call	0x5188	; 0x5188 <HKEYPAD_enuGetKey>
HLCD_voidLCDSendData(Operator);  // Display the selected operator
    5666:	8f ad       	ldd	r24, Y+63	; 0x3f
    5668:	0e 94 bd 20 	call	0x417a	; 0x417a <HLCD_voidLCDSendData>
    566c:	80 e0       	ldi	r24, 0x00	; 0
    566e:	90 e0       	ldi	r25, 0x00	; 0
    5670:	a6 e1       	ldi	r26, 0x16	; 22
    5672:	b4 e4       	ldi	r27, 0x44	; 68
    5674:	8f a3       	std	Y+39, r24	; 0x27
    5676:	98 a7       	std	Y+40, r25	; 0x28
    5678:	a9 a7       	std	Y+41, r26	; 0x29
    567a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    567c:	6f a1       	ldd	r22, Y+39	; 0x27
    567e:	78 a5       	ldd	r23, Y+40	; 0x28
    5680:	89 a5       	ldd	r24, Y+41	; 0x29
    5682:	9a a5       	ldd	r25, Y+42	; 0x2a
    5684:	20 e0       	ldi	r18, 0x00	; 0
    5686:	30 e0       	ldi	r19, 0x00	; 0
    5688:	4a ef       	ldi	r20, 0xFA	; 250
    568a:	54 e4       	ldi	r21, 0x44	; 68
    568c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5690:	dc 01       	movw	r26, r24
    5692:	cb 01       	movw	r24, r22
    5694:	8b a3       	std	Y+35, r24	; 0x23
    5696:	9c a3       	std	Y+36, r25	; 0x24
    5698:	ad a3       	std	Y+37, r26	; 0x25
    569a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    569c:	6b a1       	ldd	r22, Y+35	; 0x23
    569e:	7c a1       	ldd	r23, Y+36	; 0x24
    56a0:	8d a1       	ldd	r24, Y+37	; 0x25
    56a2:	9e a1       	ldd	r25, Y+38	; 0x26
    56a4:	20 e0       	ldi	r18, 0x00	; 0
    56a6:	30 e0       	ldi	r19, 0x00	; 0
    56a8:	40 e8       	ldi	r20, 0x80	; 128
    56aa:	5f e3       	ldi	r21, 0x3F	; 63
    56ac:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    56b0:	88 23       	and	r24, r24
    56b2:	2c f4       	brge	.+10     	; 0x56be <HKEYPAD_vCalculator+0x1d4>
		__ticks = 1;
    56b4:	81 e0       	ldi	r24, 0x01	; 1
    56b6:	90 e0       	ldi	r25, 0x00	; 0
    56b8:	9a a3       	std	Y+34, r25	; 0x22
    56ba:	89 a3       	std	Y+33, r24	; 0x21
    56bc:	3f c0       	rjmp	.+126    	; 0x573c <HKEYPAD_vCalculator+0x252>
	else if (__tmp > 65535)
    56be:	6b a1       	ldd	r22, Y+35	; 0x23
    56c0:	7c a1       	ldd	r23, Y+36	; 0x24
    56c2:	8d a1       	ldd	r24, Y+37	; 0x25
    56c4:	9e a1       	ldd	r25, Y+38	; 0x26
    56c6:	20 e0       	ldi	r18, 0x00	; 0
    56c8:	3f ef       	ldi	r19, 0xFF	; 255
    56ca:	4f e7       	ldi	r20, 0x7F	; 127
    56cc:	57 e4       	ldi	r21, 0x47	; 71
    56ce:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    56d2:	18 16       	cp	r1, r24
    56d4:	4c f5       	brge	.+82     	; 0x5728 <HKEYPAD_vCalculator+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56d6:	6f a1       	ldd	r22, Y+39	; 0x27
    56d8:	78 a5       	ldd	r23, Y+40	; 0x28
    56da:	89 a5       	ldd	r24, Y+41	; 0x29
    56dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    56de:	20 e0       	ldi	r18, 0x00	; 0
    56e0:	30 e0       	ldi	r19, 0x00	; 0
    56e2:	40 e2       	ldi	r20, 0x20	; 32
    56e4:	51 e4       	ldi	r21, 0x41	; 65
    56e6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    56ea:	dc 01       	movw	r26, r24
    56ec:	cb 01       	movw	r24, r22
    56ee:	bc 01       	movw	r22, r24
    56f0:	cd 01       	movw	r24, r26
    56f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56f6:	dc 01       	movw	r26, r24
    56f8:	cb 01       	movw	r24, r22
    56fa:	9a a3       	std	Y+34, r25	; 0x22
    56fc:	89 a3       	std	Y+33, r24	; 0x21
    56fe:	0f c0       	rjmp	.+30     	; 0x571e <HKEYPAD_vCalculator+0x234>
    5700:	88 ec       	ldi	r24, 0xC8	; 200
    5702:	90 e0       	ldi	r25, 0x00	; 0
    5704:	98 a3       	std	Y+32, r25	; 0x20
    5706:	8f 8f       	std	Y+31, r24	; 0x1f
    5708:	8f 8d       	ldd	r24, Y+31	; 0x1f
    570a:	98 a1       	ldd	r25, Y+32	; 0x20
    570c:	01 97       	sbiw	r24, 0x01	; 1
    570e:	f1 f7       	brne	.-4      	; 0x570c <HKEYPAD_vCalculator+0x222>
    5710:	98 a3       	std	Y+32, r25	; 0x20
    5712:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5714:	89 a1       	ldd	r24, Y+33	; 0x21
    5716:	9a a1       	ldd	r25, Y+34	; 0x22
    5718:	01 97       	sbiw	r24, 0x01	; 1
    571a:	9a a3       	std	Y+34, r25	; 0x22
    571c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    571e:	89 a1       	ldd	r24, Y+33	; 0x21
    5720:	9a a1       	ldd	r25, Y+34	; 0x22
    5722:	00 97       	sbiw	r24, 0x00	; 0
    5724:	69 f7       	brne	.-38     	; 0x5700 <HKEYPAD_vCalculator+0x216>
    5726:	14 c0       	rjmp	.+40     	; 0x5750 <HKEYPAD_vCalculator+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5728:	6b a1       	ldd	r22, Y+35	; 0x23
    572a:	7c a1       	ldd	r23, Y+36	; 0x24
    572c:	8d a1       	ldd	r24, Y+37	; 0x25
    572e:	9e a1       	ldd	r25, Y+38	; 0x26
    5730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5734:	dc 01       	movw	r26, r24
    5736:	cb 01       	movw	r24, r22
    5738:	9a a3       	std	Y+34, r25	; 0x22
    573a:	89 a3       	std	Y+33, r24	; 0x21
    573c:	89 a1       	ldd	r24, Y+33	; 0x21
    573e:	9a a1       	ldd	r25, Y+34	; 0x22
    5740:	9e 8f       	std	Y+30, r25	; 0x1e
    5742:	8d 8f       	std	Y+29, r24	; 0x1d
    5744:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5746:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5748:	01 97       	sbiw	r24, 0x01	; 1
    574a:	f1 f7       	brne	.-4      	; 0x5748 <HKEYPAD_vCalculator+0x25e>
    574c:	9e 8f       	std	Y+30, r25	; 0x1e
    574e:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(600);
HLCD_voidLCDCLR();
    5750:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <HLCD_voidLCDCLR>

// Display the prompt for the second number
HLCD_voidSendString("Second Numb = ", HLCD_enuFirstLine, HLCD_enuPosition0);
    5754:	8a e7       	ldi	r24, 0x7A	; 122
    5756:	90 e0       	ldi	r25, 0x00	; 0
    5758:	60 e0       	ldi	r22, 0x00	; 0
    575a:	40 e0       	ldi	r20, 0x00	; 0
    575c:	0e 94 56 26 	call	0x4cac	; 0x4cac <HLCD_voidSendString>
HKEYPAD_enuGetKey(&NUM2);
    5760:	ce 01       	movw	r24, r28
    5762:	cd 96       	adiw	r24, 0x3d	; 61
    5764:	0e 94 c4 28 	call	0x5188	; 0x5188 <HKEYPAD_enuGetKey>
NUM2 = NUM2 - '0';
    5768:	8d ad       	ldd	r24, Y+61	; 0x3d
    576a:	9e ad       	ldd	r25, Y+62	; 0x3e
    576c:	c0 97       	sbiw	r24, 0x30	; 48
    576e:	9e af       	std	Y+62, r25	; 0x3e
    5770:	8d af       	std	Y+61, r24	; 0x3d
HLCD_enuWriteNumber(NUM2);
    5772:	2d ad       	ldd	r18, Y+61	; 0x3d
    5774:	3e ad       	ldd	r19, Y+62	; 0x3e
    5776:	c9 01       	movw	r24, r18
    5778:	99 0f       	add	r25, r25
    577a:	88 0b       	sbc	r24, r24
    577c:	98 2f       	mov	r25, r24
    577e:	59 01       	movw	r10, r18
    5780:	c8 2e       	mov	r12, r24
    5782:	d8 2e       	mov	r13, r24
    5784:	e8 2e       	mov	r14, r24
    5786:	f8 2e       	mov	r15, r24
    5788:	08 2f       	mov	r16, r24
    578a:	18 2f       	mov	r17, r24
    578c:	2a 2d       	mov	r18, r10
    578e:	3b 2d       	mov	r19, r11
    5790:	4c 2d       	mov	r20, r12
    5792:	5d 2d       	mov	r21, r13
    5794:	6e 2d       	mov	r22, r14
    5796:	7f 2d       	mov	r23, r15
    5798:	80 2f       	mov	r24, r16
    579a:	91 2f       	mov	r25, r17
    579c:	0e 94 88 26 	call	0x4d10	; 0x4d10 <HLCD_enuWriteNumber>
    57a0:	80 e0       	ldi	r24, 0x00	; 0
    57a2:	90 e0       	ldi	r25, 0x00	; 0
    57a4:	a6 e1       	ldi	r26, 0x16	; 22
    57a6:	b4 e4       	ldi	r27, 0x44	; 68
    57a8:	89 8f       	std	Y+25, r24	; 0x19
    57aa:	9a 8f       	std	Y+26, r25	; 0x1a
    57ac:	ab 8f       	std	Y+27, r26	; 0x1b
    57ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57b0:	69 8d       	ldd	r22, Y+25	; 0x19
    57b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    57b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    57b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    57b8:	20 e0       	ldi	r18, 0x00	; 0
    57ba:	30 e0       	ldi	r19, 0x00	; 0
    57bc:	4a ef       	ldi	r20, 0xFA	; 250
    57be:	54 e4       	ldi	r21, 0x44	; 68
    57c0:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    57c4:	dc 01       	movw	r26, r24
    57c6:	cb 01       	movw	r24, r22
    57c8:	8d 8b       	std	Y+21, r24	; 0x15
    57ca:	9e 8b       	std	Y+22, r25	; 0x16
    57cc:	af 8b       	std	Y+23, r26	; 0x17
    57ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    57d0:	6d 89       	ldd	r22, Y+21	; 0x15
    57d2:	7e 89       	ldd	r23, Y+22	; 0x16
    57d4:	8f 89       	ldd	r24, Y+23	; 0x17
    57d6:	98 8d       	ldd	r25, Y+24	; 0x18
    57d8:	20 e0       	ldi	r18, 0x00	; 0
    57da:	30 e0       	ldi	r19, 0x00	; 0
    57dc:	40 e8       	ldi	r20, 0x80	; 128
    57de:	5f e3       	ldi	r21, 0x3F	; 63
    57e0:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    57e4:	88 23       	and	r24, r24
    57e6:	2c f4       	brge	.+10     	; 0x57f2 <HKEYPAD_vCalculator+0x308>
		__ticks = 1;
    57e8:	81 e0       	ldi	r24, 0x01	; 1
    57ea:	90 e0       	ldi	r25, 0x00	; 0
    57ec:	9c 8b       	std	Y+20, r25	; 0x14
    57ee:	8b 8b       	std	Y+19, r24	; 0x13
    57f0:	3f c0       	rjmp	.+126    	; 0x5870 <HKEYPAD_vCalculator+0x386>
	else if (__tmp > 65535)
    57f2:	6d 89       	ldd	r22, Y+21	; 0x15
    57f4:	7e 89       	ldd	r23, Y+22	; 0x16
    57f6:	8f 89       	ldd	r24, Y+23	; 0x17
    57f8:	98 8d       	ldd	r25, Y+24	; 0x18
    57fa:	20 e0       	ldi	r18, 0x00	; 0
    57fc:	3f ef       	ldi	r19, 0xFF	; 255
    57fe:	4f e7       	ldi	r20, 0x7F	; 127
    5800:	57 e4       	ldi	r21, 0x47	; 71
    5802:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    5806:	18 16       	cp	r1, r24
    5808:	4c f5       	brge	.+82     	; 0x585c <HKEYPAD_vCalculator+0x372>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    580a:	69 8d       	ldd	r22, Y+25	; 0x19
    580c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    580e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5810:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5812:	20 e0       	ldi	r18, 0x00	; 0
    5814:	30 e0       	ldi	r19, 0x00	; 0
    5816:	40 e2       	ldi	r20, 0x20	; 32
    5818:	51 e4       	ldi	r21, 0x41	; 65
    581a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    581e:	dc 01       	movw	r26, r24
    5820:	cb 01       	movw	r24, r22
    5822:	bc 01       	movw	r22, r24
    5824:	cd 01       	movw	r24, r26
    5826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    582a:	dc 01       	movw	r26, r24
    582c:	cb 01       	movw	r24, r22
    582e:	9c 8b       	std	Y+20, r25	; 0x14
    5830:	8b 8b       	std	Y+19, r24	; 0x13
    5832:	0f c0       	rjmp	.+30     	; 0x5852 <HKEYPAD_vCalculator+0x368>
    5834:	88 ec       	ldi	r24, 0xC8	; 200
    5836:	90 e0       	ldi	r25, 0x00	; 0
    5838:	9a 8b       	std	Y+18, r25	; 0x12
    583a:	89 8b       	std	Y+17, r24	; 0x11
    583c:	89 89       	ldd	r24, Y+17	; 0x11
    583e:	9a 89       	ldd	r25, Y+18	; 0x12
    5840:	01 97       	sbiw	r24, 0x01	; 1
    5842:	f1 f7       	brne	.-4      	; 0x5840 <HKEYPAD_vCalculator+0x356>
    5844:	9a 8b       	std	Y+18, r25	; 0x12
    5846:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5848:	8b 89       	ldd	r24, Y+19	; 0x13
    584a:	9c 89       	ldd	r25, Y+20	; 0x14
    584c:	01 97       	sbiw	r24, 0x01	; 1
    584e:	9c 8b       	std	Y+20, r25	; 0x14
    5850:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5852:	8b 89       	ldd	r24, Y+19	; 0x13
    5854:	9c 89       	ldd	r25, Y+20	; 0x14
    5856:	00 97       	sbiw	r24, 0x00	; 0
    5858:	69 f7       	brne	.-38     	; 0x5834 <HKEYPAD_vCalculator+0x34a>
    585a:	14 c0       	rjmp	.+40     	; 0x5884 <HKEYPAD_vCalculator+0x39a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    585c:	6d 89       	ldd	r22, Y+21	; 0x15
    585e:	7e 89       	ldd	r23, Y+22	; 0x16
    5860:	8f 89       	ldd	r24, Y+23	; 0x17
    5862:	98 8d       	ldd	r25, Y+24	; 0x18
    5864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5868:	dc 01       	movw	r26, r24
    586a:	cb 01       	movw	r24, r22
    586c:	9c 8b       	std	Y+20, r25	; 0x14
    586e:	8b 8b       	std	Y+19, r24	; 0x13
    5870:	8b 89       	ldd	r24, Y+19	; 0x13
    5872:	9c 89       	ldd	r25, Y+20	; 0x14
    5874:	98 8b       	std	Y+16, r25	; 0x10
    5876:	8f 87       	std	Y+15, r24	; 0x0f
    5878:	8f 85       	ldd	r24, Y+15	; 0x0f
    587a:	98 89       	ldd	r25, Y+16	; 0x10
    587c:	01 97       	sbiw	r24, 0x01	; 1
    587e:	f1 f7       	brne	.-4      	; 0x587c <HKEYPAD_vCalculator+0x392>
    5880:	98 8b       	std	Y+16, r25	; 0x10
    5882:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(600);
HLCD_voidLCDCLR();
    5884:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <HLCD_voidLCDCLR>

// Perform the calculation based on the selected operator
switch (Operator) {
    5888:	8f ad       	ldd	r24, Y+63	; 0x3f
    588a:	28 2f       	mov	r18, r24
    588c:	30 e0       	ldi	r19, 0x00	; 0
    588e:	22 96       	adiw	r28, 0x02	; 2
    5890:	3f af       	std	Y+63, r19	; 0x3f
    5892:	2e af       	std	Y+62, r18	; 0x3e
    5894:	22 97       	sbiw	r28, 0x02	; 2
    5896:	22 96       	adiw	r28, 0x02	; 2
    5898:	4e ad       	ldd	r20, Y+62	; 0x3e
    589a:	5f ad       	ldd	r21, Y+63	; 0x3f
    589c:	22 97       	sbiw	r28, 0x02	; 2
    589e:	4b 32       	cpi	r20, 0x2B	; 43
    58a0:	51 05       	cpc	r21, r1
    58a2:	f1 f0       	breq	.+60     	; 0x58e0 <HKEYPAD_vCalculator+0x3f6>
    58a4:	22 96       	adiw	r28, 0x02	; 2
    58a6:	8e ad       	ldd	r24, Y+62	; 0x3e
    58a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    58aa:	22 97       	sbiw	r28, 0x02	; 2
    58ac:	8c 32       	cpi	r24, 0x2C	; 44
    58ae:	91 05       	cpc	r25, r1
    58b0:	44 f4       	brge	.+16     	; 0x58c2 <HKEYPAD_vCalculator+0x3d8>
    58b2:	22 96       	adiw	r28, 0x02	; 2
    58b4:	2e ad       	ldd	r18, Y+62	; 0x3e
    58b6:	3f ad       	ldd	r19, Y+63	; 0x3f
    58b8:	22 97       	sbiw	r28, 0x02	; 2
    58ba:	2a 32       	cpi	r18, 0x2A	; 42
    58bc:	31 05       	cpc	r19, r1
    58be:	11 f1       	breq	.+68     	; 0x5904 <HKEYPAD_vCalculator+0x41a>
    58c0:	46 c0       	rjmp	.+140    	; 0x594e <HKEYPAD_vCalculator+0x464>
    58c2:	22 96       	adiw	r28, 0x02	; 2
    58c4:	4e ad       	ldd	r20, Y+62	; 0x3e
    58c6:	5f ad       	ldd	r21, Y+63	; 0x3f
    58c8:	22 97       	sbiw	r28, 0x02	; 2
    58ca:	4d 32       	cpi	r20, 0x2D	; 45
    58cc:	51 05       	cpc	r21, r1
    58ce:	89 f0       	breq	.+34     	; 0x58f2 <HKEYPAD_vCalculator+0x408>
    58d0:	22 96       	adiw	r28, 0x02	; 2
    58d2:	8e ad       	ldd	r24, Y+62	; 0x3e
    58d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    58d6:	22 97       	sbiw	r28, 0x02	; 2
    58d8:	8f 32       	cpi	r24, 0x2F	; 47
    58da:	91 05       	cpc	r25, r1
    58dc:	11 f1       	breq	.+68     	; 0x5922 <HKEYPAD_vCalculator+0x438>
    58de:	37 c0       	rjmp	.+110    	; 0x594e <HKEYPAD_vCalculator+0x464>
    case '+':
        Result = NUM1 + NUM2;
    58e0:	8b ad       	ldd	r24, Y+59	; 0x3b
    58e2:	9c ad       	ldd	r25, Y+60	; 0x3c
    58e4:	2d ad       	ldd	r18, Y+61	; 0x3d
    58e6:	3e ad       	ldd	r19, Y+62	; 0x3e
    58e8:	82 0f       	add	r24, r18
    58ea:	93 1f       	adc	r25, r19
    58ec:	9a af       	std	Y+58, r25	; 0x3a
    58ee:	89 af       	std	Y+57, r24	; 0x39
    58f0:	35 c0       	rjmp	.+106    	; 0x595c <HKEYPAD_vCalculator+0x472>
        break;
    case '-':
        Result = NUM1 - NUM2;
    58f2:	8b ad       	ldd	r24, Y+59	; 0x3b
    58f4:	9c ad       	ldd	r25, Y+60	; 0x3c
    58f6:	2d ad       	ldd	r18, Y+61	; 0x3d
    58f8:	3e ad       	ldd	r19, Y+62	; 0x3e
    58fa:	82 1b       	sub	r24, r18
    58fc:	93 0b       	sbc	r25, r19
    58fe:	9a af       	std	Y+58, r25	; 0x3a
    5900:	89 af       	std	Y+57, r24	; 0x39
    5902:	2c c0       	rjmp	.+88     	; 0x595c <HKEYPAD_vCalculator+0x472>
        break;
    case '*':
        Result = NUM1 * NUM2;
    5904:	8b ad       	ldd	r24, Y+59	; 0x3b
    5906:	9c ad       	ldd	r25, Y+60	; 0x3c
    5908:	2d ad       	ldd	r18, Y+61	; 0x3d
    590a:	3e ad       	ldd	r19, Y+62	; 0x3e
    590c:	ac 01       	movw	r20, r24
    590e:	42 9f       	mul	r20, r18
    5910:	c0 01       	movw	r24, r0
    5912:	43 9f       	mul	r20, r19
    5914:	90 0d       	add	r25, r0
    5916:	52 9f       	mul	r21, r18
    5918:	90 0d       	add	r25, r0
    591a:	11 24       	eor	r1, r1
    591c:	9a af       	std	Y+58, r25	; 0x3a
    591e:	89 af       	std	Y+57, r24	; 0x39
    5920:	1d c0       	rjmp	.+58     	; 0x595c <HKEYPAD_vCalculator+0x472>
        break;
    case '/':
        if (NUM2 != 0) {
    5922:	8d ad       	ldd	r24, Y+61	; 0x3d
    5924:	9e ad       	ldd	r25, Y+62	; 0x3e
    5926:	00 97       	sbiw	r24, 0x00	; 0
    5928:	59 f0       	breq	.+22     	; 0x5940 <HKEYPAD_vCalculator+0x456>
            Result = NUM1 / NUM2;
    592a:	8b ad       	ldd	r24, Y+59	; 0x3b
    592c:	9c ad       	ldd	r25, Y+60	; 0x3c
    592e:	2d ad       	ldd	r18, Y+61	; 0x3d
    5930:	3e ad       	ldd	r19, Y+62	; 0x3e
    5932:	b9 01       	movw	r22, r18
    5934:	0e 94 ed 30 	call	0x61da	; 0x61da <__divmodhi4>
    5938:	cb 01       	movw	r24, r22
    593a:	9a af       	std	Y+58, r25	; 0x3a
    593c:	89 af       	std	Y+57, r24	; 0x39
    593e:	0e c0       	rjmp	.+28     	; 0x595c <HKEYPAD_vCalculator+0x472>
        } else {
            HLCD_voidSendString("Division by zero!", HLCD_enuFirstLine, HLCD_enuPosition0);
    5940:	89 e8       	ldi	r24, 0x89	; 137
    5942:	90 e0       	ldi	r25, 0x00	; 0
    5944:	60 e0       	ldi	r22, 0x00	; 0
    5946:	40 e0       	ldi	r20, 0x00	; 0
    5948:	0e 94 56 26 	call	0x4cac	; 0x4cac <HLCD_voidSendString>
    594c:	98 c0       	rjmp	.+304    	; 0x5a7e <HKEYPAD_vCalculator+0x594>
            return;
        }
        break;
    default:
        HLCD_voidSendString("Invalid Operator", HLCD_enuFirstLine, HLCD_enuPosition0);
    594e:	8b e9       	ldi	r24, 0x9B	; 155
    5950:	90 e0       	ldi	r25, 0x00	; 0
    5952:	60 e0       	ldi	r22, 0x00	; 0
    5954:	40 e0       	ldi	r20, 0x00	; 0
    5956:	0e 94 56 26 	call	0x4cac	; 0x4cac <HLCD_voidSendString>
    595a:	91 c0       	rjmp	.+290    	; 0x5a7e <HKEYPAD_vCalculator+0x594>
        return;
}

// Display the result
HLCD_voidSendString("Result = ", HLCD_enuSecondLine, HLCD_enuPosition0);
    595c:	8c ea       	ldi	r24, 0xAC	; 172
    595e:	90 e0       	ldi	r25, 0x00	; 0
    5960:	61 e0       	ldi	r22, 0x01	; 1
    5962:	40 e0       	ldi	r20, 0x00	; 0
    5964:	0e 94 56 26 	call	0x4cac	; 0x4cac <HLCD_voidSendString>
HLCD_enuWriteNumber(Result);
    5968:	89 ad       	ldd	r24, Y+57	; 0x39
    596a:	9a ad       	ldd	r25, Y+58	; 0x3a
    596c:	99 0f       	add	r25, r25
    596e:	88 0b       	sbc	r24, r24
    5970:	98 2f       	mov	r25, r24
    5972:	a9 ac       	ldd	r10, Y+57	; 0x39
    5974:	ba ac       	ldd	r11, Y+58	; 0x3a
    5976:	c8 2e       	mov	r12, r24
    5978:	d8 2e       	mov	r13, r24
    597a:	e8 2e       	mov	r14, r24
    597c:	f8 2e       	mov	r15, r24
    597e:	08 2f       	mov	r16, r24
    5980:	18 2f       	mov	r17, r24
    5982:	2a 2d       	mov	r18, r10
    5984:	3b 2d       	mov	r19, r11
    5986:	4c 2d       	mov	r20, r12
    5988:	5d 2d       	mov	r21, r13
    598a:	6e 2d       	mov	r22, r14
    598c:	7f 2d       	mov	r23, r15
    598e:	80 2f       	mov	r24, r16
    5990:	91 2f       	mov	r25, r17
    5992:	0e 94 88 26 	call	0x4d10	; 0x4d10 <HLCD_enuWriteNumber>
    5996:	80 e0       	ldi	r24, 0x00	; 0
    5998:	90 e0       	ldi	r25, 0x00	; 0
    599a:	aa e7       	ldi	r26, 0x7A	; 122
    599c:	b4 e4       	ldi	r27, 0x44	; 68
    599e:	8b 87       	std	Y+11, r24	; 0x0b
    59a0:	9c 87       	std	Y+12, r25	; 0x0c
    59a2:	ad 87       	std	Y+13, r26	; 0x0d
    59a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    59a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    59aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    59ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    59ae:	20 e0       	ldi	r18, 0x00	; 0
    59b0:	30 e0       	ldi	r19, 0x00	; 0
    59b2:	4a ef       	ldi	r20, 0xFA	; 250
    59b4:	54 e4       	ldi	r21, 0x44	; 68
    59b6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    59ba:	dc 01       	movw	r26, r24
    59bc:	cb 01       	movw	r24, r22
    59be:	8f 83       	std	Y+7, r24	; 0x07
    59c0:	98 87       	std	Y+8, r25	; 0x08
    59c2:	a9 87       	std	Y+9, r26	; 0x09
    59c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    59c6:	6f 81       	ldd	r22, Y+7	; 0x07
    59c8:	78 85       	ldd	r23, Y+8	; 0x08
    59ca:	89 85       	ldd	r24, Y+9	; 0x09
    59cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    59ce:	20 e0       	ldi	r18, 0x00	; 0
    59d0:	30 e0       	ldi	r19, 0x00	; 0
    59d2:	40 e8       	ldi	r20, 0x80	; 128
    59d4:	5f e3       	ldi	r21, 0x3F	; 63
    59d6:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    59da:	88 23       	and	r24, r24
    59dc:	2c f4       	brge	.+10     	; 0x59e8 <HKEYPAD_vCalculator+0x4fe>
		__ticks = 1;
    59de:	81 e0       	ldi	r24, 0x01	; 1
    59e0:	90 e0       	ldi	r25, 0x00	; 0
    59e2:	9e 83       	std	Y+6, r25	; 0x06
    59e4:	8d 83       	std	Y+5, r24	; 0x05
    59e6:	3f c0       	rjmp	.+126    	; 0x5a66 <HKEYPAD_vCalculator+0x57c>
	else if (__tmp > 65535)
    59e8:	6f 81       	ldd	r22, Y+7	; 0x07
    59ea:	78 85       	ldd	r23, Y+8	; 0x08
    59ec:	89 85       	ldd	r24, Y+9	; 0x09
    59ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    59f0:	20 e0       	ldi	r18, 0x00	; 0
    59f2:	3f ef       	ldi	r19, 0xFF	; 255
    59f4:	4f e7       	ldi	r20, 0x7F	; 127
    59f6:	57 e4       	ldi	r21, 0x47	; 71
    59f8:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    59fc:	18 16       	cp	r1, r24
    59fe:	4c f5       	brge	.+82     	; 0x5a52 <HKEYPAD_vCalculator+0x568>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a00:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a02:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a04:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a06:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a08:	20 e0       	ldi	r18, 0x00	; 0
    5a0a:	30 e0       	ldi	r19, 0x00	; 0
    5a0c:	40 e2       	ldi	r20, 0x20	; 32
    5a0e:	51 e4       	ldi	r21, 0x41	; 65
    5a10:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5a14:	dc 01       	movw	r26, r24
    5a16:	cb 01       	movw	r24, r22
    5a18:	bc 01       	movw	r22, r24
    5a1a:	cd 01       	movw	r24, r26
    5a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a20:	dc 01       	movw	r26, r24
    5a22:	cb 01       	movw	r24, r22
    5a24:	9e 83       	std	Y+6, r25	; 0x06
    5a26:	8d 83       	std	Y+5, r24	; 0x05
    5a28:	0f c0       	rjmp	.+30     	; 0x5a48 <HKEYPAD_vCalculator+0x55e>
    5a2a:	88 ec       	ldi	r24, 0xC8	; 200
    5a2c:	90 e0       	ldi	r25, 0x00	; 0
    5a2e:	9c 83       	std	Y+4, r25	; 0x04
    5a30:	8b 83       	std	Y+3, r24	; 0x03
    5a32:	8b 81       	ldd	r24, Y+3	; 0x03
    5a34:	9c 81       	ldd	r25, Y+4	; 0x04
    5a36:	01 97       	sbiw	r24, 0x01	; 1
    5a38:	f1 f7       	brne	.-4      	; 0x5a36 <HKEYPAD_vCalculator+0x54c>
    5a3a:	9c 83       	std	Y+4, r25	; 0x04
    5a3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    5a40:	9e 81       	ldd	r25, Y+6	; 0x06
    5a42:	01 97       	sbiw	r24, 0x01	; 1
    5a44:	9e 83       	std	Y+6, r25	; 0x06
    5a46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a48:	8d 81       	ldd	r24, Y+5	; 0x05
    5a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    5a4c:	00 97       	sbiw	r24, 0x00	; 0
    5a4e:	69 f7       	brne	.-38     	; 0x5a2a <HKEYPAD_vCalculator+0x540>
    5a50:	14 c0       	rjmp	.+40     	; 0x5a7a <HKEYPAD_vCalculator+0x590>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a52:	6f 81       	ldd	r22, Y+7	; 0x07
    5a54:	78 85       	ldd	r23, Y+8	; 0x08
    5a56:	89 85       	ldd	r24, Y+9	; 0x09
    5a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a5e:	dc 01       	movw	r26, r24
    5a60:	cb 01       	movw	r24, r22
    5a62:	9e 83       	std	Y+6, r25	; 0x06
    5a64:	8d 83       	std	Y+5, r24	; 0x05
    5a66:	8d 81       	ldd	r24, Y+5	; 0x05
    5a68:	9e 81       	ldd	r25, Y+6	; 0x06
    5a6a:	9a 83       	std	Y+2, r25	; 0x02
    5a6c:	89 83       	std	Y+1, r24	; 0x01
    5a6e:	89 81       	ldd	r24, Y+1	; 0x01
    5a70:	9a 81       	ldd	r25, Y+2	; 0x02
    5a72:	01 97       	sbiw	r24, 0x01	; 1
    5a74:	f1 f7       	brne	.-4      	; 0x5a72 <HKEYPAD_vCalculator+0x588>
    5a76:	9a 83       	std	Y+2, r25	; 0x02
    5a78:	89 83       	std	Y+1, r24	; 0x01

_delay_ms(1000);

HLCD_voidLCDCLR();
    5a7a:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <HLCD_voidLCDCLR>

}
    5a7e:	cf 5b       	subi	r28, 0xBF	; 191
    5a80:	df 4f       	sbci	r29, 0xFF	; 255
    5a82:	0f b6       	in	r0, 0x3f	; 63
    5a84:	f8 94       	cli
    5a86:	de bf       	out	0x3e, r29	; 62
    5a88:	0f be       	out	0x3f, r0	; 63
    5a8a:	cd bf       	out	0x3d, r28	; 61
    5a8c:	cf 91       	pop	r28
    5a8e:	df 91       	pop	r29
    5a90:	1f 91       	pop	r17
    5a92:	0f 91       	pop	r16
    5a94:	ff 90       	pop	r15
    5a96:	ef 90       	pop	r14
    5a98:	df 90       	pop	r13
    5a9a:	cf 90       	pop	r12
    5a9c:	bf 90       	pop	r11
    5a9e:	af 90       	pop	r10
    5aa0:	08 95       	ret

00005aa2 <main>:
//    return 0;
//}


int main (void)
{
    5aa2:	af 92       	push	r10
    5aa4:	bf 92       	push	r11
    5aa6:	cf 92       	push	r12
    5aa8:	df 92       	push	r13
    5aaa:	ef 92       	push	r14
    5aac:	ff 92       	push	r15
    5aae:	0f 93       	push	r16
    5ab0:	1f 93       	push	r17
    5ab2:	df 93       	push	r29
    5ab4:	cf 93       	push	r28
    5ab6:	cd b7       	in	r28, 0x3d	; 61
    5ab8:	de b7       	in	r29, 0x3e	; 62
    5aba:	c0 55       	subi	r28, 0x50	; 80
    5abc:	d0 40       	sbci	r29, 0x00	; 0
    5abe:	0f b6       	in	r0, 0x3f	; 63
    5ac0:	f8 94       	cli
    5ac2:	de bf       	out	0x3e, r29	; 62
    5ac4:	0f be       	out	0x3f, r0	; 63
    5ac6:	cd bf       	out	0x3d, r28	; 61
	    PORT_voidPortInit();
    5ac8:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <PORT_voidPortInit>
	    MADC_enuADCInit();
    5acc:	0e 94 88 12 	call	0x2510	; 0x2510 <MADC_enuADCInit>
	    HLCD_enuLCDPinConfigration();
    5ad0:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <HLCD_enuLCDPinConfigration>
	    HLCD_voidLCDInit();
    5ad4:	0e 94 b6 23 	call	0x476c	; 0x476c <HLCD_voidLCDInit>
	    HKEYPAD_enuInit();
    5ad8:	0e 94 46 28 	call	0x508c	; 0x508c <HKEYPAD_enuInit>

	       u8  static selectedOption ='0';
	       u16 temperatureReading = 0;
    5adc:	fe 01       	movw	r30, r28
    5ade:	e5 5b       	subi	r30, 0xB5	; 181
    5ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ae2:	11 82       	std	Z+1, r1	; 0x01
    5ae4:	10 82       	st	Z, r1
	       u16 lightIntensityReading = 0;
    5ae6:	fe 01       	movw	r30, r28
    5ae8:	e7 5b       	subi	r30, 0xB7	; 183
    5aea:	ff 4f       	sbci	r31, 0xFF	; 255
    5aec:	11 82       	std	Z+1, r1	; 0x01
    5aee:	10 82       	st	Z, r1
	       u16 voltmeterReading = 0;
    5af0:	fe 01       	movw	r30, r28
    5af2:	e9 5b       	subi	r30, 0xB9	; 185
    5af4:	ff 4f       	sbci	r31, 0xFF	; 255
    5af6:	11 82       	std	Z+1, r1	; 0x01
    5af8:	10 82       	st	Z, r1
	     //  u16 Local_u16light =0;
	       u16 Local_u16volt=0;
    5afa:	fe 01       	movw	r30, r28
    5afc:	e3 5b       	subi	r30, 0xB3	; 179
    5afe:	ff 4f       	sbci	r31, 0xFF	; 255
    5b00:	11 82       	std	Z+1, r1	; 0x01
    5b02:	10 82       	st	Z, r1
	       HLCD_voidLCDCLR();
    5b04:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <HLCD_voidLCDCLR>
	while(1)
	{           HKEYPAD_enuGetKey(&selectedOption);
    5b08:	8f e5       	ldi	r24, 0x5F	; 95
    5b0a:	92 e0       	ldi	r25, 0x02	; 2
    5b0c:	0e 94 c4 28 	call	0x5188	; 0x5188 <HKEYPAD_enuGetKey>
    5b10:	fe 01       	movw	r30, r28
    5b12:	ed 5b       	subi	r30, 0xBD	; 189
    5b14:	ff 4f       	sbci	r31, 0xFF	; 255
    5b16:	80 e0       	ldi	r24, 0x00	; 0
    5b18:	90 e0       	ldi	r25, 0x00	; 0
    5b1a:	aa ef       	ldi	r26, 0xFA	; 250
    5b1c:	b3 e4       	ldi	r27, 0x43	; 67
    5b1e:	80 83       	st	Z, r24
    5b20:	91 83       	std	Z+1, r25	; 0x01
    5b22:	a2 83       	std	Z+2, r26	; 0x02
    5b24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b26:	8e 01       	movw	r16, r28
    5b28:	01 5c       	subi	r16, 0xC1	; 193
    5b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    5b2c:	fe 01       	movw	r30, r28
    5b2e:	ed 5b       	subi	r30, 0xBD	; 189
    5b30:	ff 4f       	sbci	r31, 0xFF	; 255
    5b32:	60 81       	ld	r22, Z
    5b34:	71 81       	ldd	r23, Z+1	; 0x01
    5b36:	82 81       	ldd	r24, Z+2	; 0x02
    5b38:	93 81       	ldd	r25, Z+3	; 0x03
    5b3a:	20 e0       	ldi	r18, 0x00	; 0
    5b3c:	30 e0       	ldi	r19, 0x00	; 0
    5b3e:	4a ef       	ldi	r20, 0xFA	; 250
    5b40:	54 e4       	ldi	r21, 0x44	; 68
    5b42:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5b46:	dc 01       	movw	r26, r24
    5b48:	cb 01       	movw	r24, r22
    5b4a:	f8 01       	movw	r30, r16
    5b4c:	80 83       	st	Z, r24
    5b4e:	91 83       	std	Z+1, r25	; 0x01
    5b50:	a2 83       	std	Z+2, r26	; 0x02
    5b52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5b54:	fe 01       	movw	r30, r28
    5b56:	ff 96       	adiw	r30, 0x3f	; 63
    5b58:	60 81       	ld	r22, Z
    5b5a:	71 81       	ldd	r23, Z+1	; 0x01
    5b5c:	82 81       	ldd	r24, Z+2	; 0x02
    5b5e:	93 81       	ldd	r25, Z+3	; 0x03
    5b60:	20 e0       	ldi	r18, 0x00	; 0
    5b62:	30 e0       	ldi	r19, 0x00	; 0
    5b64:	40 e8       	ldi	r20, 0x80	; 128
    5b66:	5f e3       	ldi	r21, 0x3F	; 63
    5b68:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    5b6c:	88 23       	and	r24, r24
    5b6e:	2c f4       	brge	.+10     	; 0x5b7a <main+0xd8>
		__ticks = 1;
    5b70:	81 e0       	ldi	r24, 0x01	; 1
    5b72:	90 e0       	ldi	r25, 0x00	; 0
    5b74:	9e af       	std	Y+62, r25	; 0x3e
    5b76:	8d af       	std	Y+61, r24	; 0x3d
    5b78:	46 c0       	rjmp	.+140    	; 0x5c06 <main+0x164>
	else if (__tmp > 65535)
    5b7a:	fe 01       	movw	r30, r28
    5b7c:	ff 96       	adiw	r30, 0x3f	; 63
    5b7e:	60 81       	ld	r22, Z
    5b80:	71 81       	ldd	r23, Z+1	; 0x01
    5b82:	82 81       	ldd	r24, Z+2	; 0x02
    5b84:	93 81       	ldd	r25, Z+3	; 0x03
    5b86:	20 e0       	ldi	r18, 0x00	; 0
    5b88:	3f ef       	ldi	r19, 0xFF	; 255
    5b8a:	4f e7       	ldi	r20, 0x7F	; 127
    5b8c:	57 e4       	ldi	r21, 0x47	; 71
    5b8e:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    5b92:	18 16       	cp	r1, r24
    5b94:	64 f5       	brge	.+88     	; 0x5bee <main+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b96:	fe 01       	movw	r30, r28
    5b98:	ed 5b       	subi	r30, 0xBD	; 189
    5b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b9c:	60 81       	ld	r22, Z
    5b9e:	71 81       	ldd	r23, Z+1	; 0x01
    5ba0:	82 81       	ldd	r24, Z+2	; 0x02
    5ba2:	93 81       	ldd	r25, Z+3	; 0x03
    5ba4:	20 e0       	ldi	r18, 0x00	; 0
    5ba6:	30 e0       	ldi	r19, 0x00	; 0
    5ba8:	40 e2       	ldi	r20, 0x20	; 32
    5baa:	51 e4       	ldi	r21, 0x41	; 65
    5bac:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5bb0:	dc 01       	movw	r26, r24
    5bb2:	cb 01       	movw	r24, r22
    5bb4:	bc 01       	movw	r22, r24
    5bb6:	cd 01       	movw	r24, r26
    5bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bbc:	dc 01       	movw	r26, r24
    5bbe:	cb 01       	movw	r24, r22
    5bc0:	9e af       	std	Y+62, r25	; 0x3e
    5bc2:	8d af       	std	Y+61, r24	; 0x3d
    5bc4:	0f c0       	rjmp	.+30     	; 0x5be4 <main+0x142>
    5bc6:	88 ec       	ldi	r24, 0xC8	; 200
    5bc8:	90 e0       	ldi	r25, 0x00	; 0
    5bca:	9c af       	std	Y+60, r25	; 0x3c
    5bcc:	8b af       	std	Y+59, r24	; 0x3b
    5bce:	8b ad       	ldd	r24, Y+59	; 0x3b
    5bd0:	9c ad       	ldd	r25, Y+60	; 0x3c
    5bd2:	01 97       	sbiw	r24, 0x01	; 1
    5bd4:	f1 f7       	brne	.-4      	; 0x5bd2 <main+0x130>
    5bd6:	9c af       	std	Y+60, r25	; 0x3c
    5bd8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bda:	8d ad       	ldd	r24, Y+61	; 0x3d
    5bdc:	9e ad       	ldd	r25, Y+62	; 0x3e
    5bde:	01 97       	sbiw	r24, 0x01	; 1
    5be0:	9e af       	std	Y+62, r25	; 0x3e
    5be2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5be4:	8d ad       	ldd	r24, Y+61	; 0x3d
    5be6:	9e ad       	ldd	r25, Y+62	; 0x3e
    5be8:	00 97       	sbiw	r24, 0x00	; 0
    5bea:	69 f7       	brne	.-38     	; 0x5bc6 <main+0x124>
    5bec:	16 c0       	rjmp	.+44     	; 0x5c1a <main+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bee:	fe 01       	movw	r30, r28
    5bf0:	ff 96       	adiw	r30, 0x3f	; 63
    5bf2:	60 81       	ld	r22, Z
    5bf4:	71 81       	ldd	r23, Z+1	; 0x01
    5bf6:	82 81       	ldd	r24, Z+2	; 0x02
    5bf8:	93 81       	ldd	r25, Z+3	; 0x03
    5bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bfe:	dc 01       	movw	r26, r24
    5c00:	cb 01       	movw	r24, r22
    5c02:	9e af       	std	Y+62, r25	; 0x3e
    5c04:	8d af       	std	Y+61, r24	; 0x3d
    5c06:	8d ad       	ldd	r24, Y+61	; 0x3d
    5c08:	9e ad       	ldd	r25, Y+62	; 0x3e
    5c0a:	9a af       	std	Y+58, r25	; 0x3a
    5c0c:	89 af       	std	Y+57, r24	; 0x39
    5c0e:	89 ad       	ldd	r24, Y+57	; 0x39
    5c10:	9a ad       	ldd	r25, Y+58	; 0x3a
    5c12:	01 97       	sbiw	r24, 0x01	; 1
    5c14:	f1 f7       	brne	.-4      	; 0x5c12 <main+0x170>
    5c16:	9a af       	std	Y+58, r25	; 0x3a
    5c18:	89 af       	std	Y+57, r24	; 0x39
		        /*Read if There is a Pressed Key*/
		        _delay_ms(500);

		        switch(selectedOption)
    5c1a:	80 91 5f 02 	lds	r24, 0x025F
    5c1e:	28 2f       	mov	r18, r24
    5c20:	30 e0       	ldi	r19, 0x00	; 0
    5c22:	61 96       	adiw	r28, 0x11	; 17
    5c24:	3f af       	std	Y+63, r19	; 0x3f
    5c26:	2e af       	std	Y+62, r18	; 0x3e
    5c28:	61 97       	sbiw	r28, 0x11	; 17
    5c2a:	61 96       	adiw	r28, 0x11	; 17
    5c2c:	8e ad       	ldd	r24, Y+62	; 0x3e
    5c2e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5c30:	61 97       	sbiw	r28, 0x11	; 17
    5c32:	81 33       	cpi	r24, 0x31	; 49
    5c34:	91 05       	cpc	r25, r1
    5c36:	19 f1       	breq	.+70     	; 0x5c7e <main+0x1dc>
    5c38:	61 96       	adiw	r28, 0x11	; 17
    5c3a:	ee ad       	ldd	r30, Y+62	; 0x3e
    5c3c:	ff ad       	ldd	r31, Y+63	; 0x3f
    5c3e:	61 97       	sbiw	r28, 0x11	; 17
    5c40:	e2 33       	cpi	r30, 0x32	; 50
    5c42:	f1 05       	cpc	r31, r1
    5c44:	44 f4       	brge	.+16     	; 0x5c56 <main+0x1b4>
    5c46:	61 96       	adiw	r28, 0x11	; 17
    5c48:	2e ad       	ldd	r18, Y+62	; 0x3e
    5c4a:	3f ad       	ldd	r19, Y+63	; 0x3f
    5c4c:	61 97       	sbiw	r28, 0x11	; 17
    5c4e:	20 33       	cpi	r18, 0x30	; 48
    5c50:	31 05       	cpc	r19, r1
    5c52:	91 f0       	breq	.+36     	; 0x5c78 <main+0x1d6>
    5c54:	08 c2       	rjmp	.+1040   	; 0x6066 <main+0x5c4>
    5c56:	61 96       	adiw	r28, 0x11	; 17
    5c58:	8e ad       	ldd	r24, Y+62	; 0x3e
    5c5a:	9f ad       	ldd	r25, Y+63	; 0x3f
    5c5c:	61 97       	sbiw	r28, 0x11	; 17
    5c5e:	82 33       	cpi	r24, 0x32	; 50
    5c60:	91 05       	cpc	r25, r1
    5c62:	09 f4       	brne	.+2      	; 0x5c66 <main+0x1c4>
    5c64:	aa c0       	rjmp	.+340    	; 0x5dba <main+0x318>
    5c66:	61 96       	adiw	r28, 0x11	; 17
    5c68:	ee ad       	ldd	r30, Y+62	; 0x3e
    5c6a:	ff ad       	ldd	r31, Y+63	; 0x3f
    5c6c:	61 97       	sbiw	r28, 0x11	; 17
    5c6e:	e3 33       	cpi	r30, 0x33	; 51
    5c70:	f1 05       	cpc	r31, r1
    5c72:	09 f4       	brne	.+2      	; 0x5c76 <main+0x1d4>
    5c74:	3a c1       	rjmp	.+628    	; 0x5eea <main+0x448>
    5c76:	f7 c1       	rjmp	.+1006   	; 0x6066 <main+0x5c4>
		        {
		        case '0':
		        	HLCD_voidLCDCLR();
    5c78:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <HLCD_voidLCDCLR>
    5c7c:	45 cf       	rjmp	.-374    	; 0x5b08 <main+0x66>
//		            HLCD_voidSendString("2.Light", HLCD_enuSecondLine,HLCD_enuPosition0);
//		            HLCD_voidSendString("3.Volt", HLCD_enuFirstLine,HLCD_enuPosition9);
//		            _delay_ms(10);
		            break;
		        case '1':
		        	HLCD_voidLCDCLR();
    5c7e:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <HLCD_voidLCDCLR>
		        	HLCD_voidSendString("TEMP = ", HLCD_enuFirstLine, HLCD_enuPosition0);
    5c82:	86 eb       	ldi	r24, 0xB6	; 182
    5c84:	90 e0       	ldi	r25, 0x00	; 0
    5c86:	60 e0       	ldi	r22, 0x00	; 0
    5c88:	40 e0       	ldi	r20, 0x00	; 0
    5c8a:	0e 94 56 26 	call	0x4cac	; 0x4cac <HLCD_voidSendString>
		        	temperatureReading = HTEMPSENSOR_u16TEMP_SENSOR_Init(MADC_ADC0_SINGLE_ENDEDD);
    5c8e:	80 e0       	ldi	r24, 0x00	; 0
    5c90:	0e 94 b9 1c 	call	0x3972	; 0x3972 <HTEMPSENSOR_u16TEMP_SENSOR_Init>
    5c94:	fe 01       	movw	r30, r28
    5c96:	e5 5b       	subi	r30, 0xB5	; 181
    5c98:	ff 4f       	sbci	r31, 0xFF	; 255
    5c9a:	91 83       	std	Z+1, r25	; 0x01
    5c9c:	80 83       	st	Z, r24
		        	HLCD_enuWriteNumber(temperatureReading);
    5c9e:	fe 01       	movw	r30, r28
    5ca0:	e5 5b       	subi	r30, 0xB5	; 181
    5ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ca4:	80 81       	ld	r24, Z
    5ca6:	91 81       	ldd	r25, Z+1	; 0x01
    5ca8:	5c 01       	movw	r10, r24
    5caa:	cc 24       	eor	r12, r12
    5cac:	dd 24       	eor	r13, r13
    5cae:	ee 24       	eor	r14, r14
    5cb0:	ff 24       	eor	r15, r15
    5cb2:	87 01       	movw	r16, r14
    5cb4:	2a 2d       	mov	r18, r10
    5cb6:	3b 2d       	mov	r19, r11
    5cb8:	4c 2d       	mov	r20, r12
    5cba:	5d 2d       	mov	r21, r13
    5cbc:	6e 2d       	mov	r22, r14
    5cbe:	7f 2d       	mov	r23, r15
    5cc0:	80 2f       	mov	r24, r16
    5cc2:	91 2f       	mov	r25, r17
    5cc4:	0e 94 88 26 	call	0x4d10	; 0x4d10 <HLCD_enuWriteNumber>
		        	HLCD_voidSendString("C ", HLCD_enuFirstLine, HLCD_enuPosition11);
    5cc8:	8e eb       	ldi	r24, 0xBE	; 190
    5cca:	90 e0       	ldi	r25, 0x00	; 0
    5ccc:	60 e0       	ldi	r22, 0x00	; 0
    5cce:	4b e0       	ldi	r20, 0x0B	; 11
    5cd0:	0e 94 56 26 	call	0x4cac	; 0x4cac <HLCD_voidSendString>
    5cd4:	80 e0       	ldi	r24, 0x00	; 0
    5cd6:	90 e0       	ldi	r25, 0x00	; 0
    5cd8:	aa e7       	ldi	r26, 0x7A	; 122
    5cda:	b4 e4       	ldi	r27, 0x44	; 68
    5cdc:	8d ab       	std	Y+53, r24	; 0x35
    5cde:	9e ab       	std	Y+54, r25	; 0x36
    5ce0:	af ab       	std	Y+55, r26	; 0x37
    5ce2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ce4:	6d a9       	ldd	r22, Y+53	; 0x35
    5ce6:	7e a9       	ldd	r23, Y+54	; 0x36
    5ce8:	8f a9       	ldd	r24, Y+55	; 0x37
    5cea:	98 ad       	ldd	r25, Y+56	; 0x38
    5cec:	20 e0       	ldi	r18, 0x00	; 0
    5cee:	30 e0       	ldi	r19, 0x00	; 0
    5cf0:	4a ef       	ldi	r20, 0xFA	; 250
    5cf2:	54 e4       	ldi	r21, 0x44	; 68
    5cf4:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5cf8:	dc 01       	movw	r26, r24
    5cfa:	cb 01       	movw	r24, r22
    5cfc:	89 ab       	std	Y+49, r24	; 0x31
    5cfe:	9a ab       	std	Y+50, r25	; 0x32
    5d00:	ab ab       	std	Y+51, r26	; 0x33
    5d02:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5d04:	69 a9       	ldd	r22, Y+49	; 0x31
    5d06:	7a a9       	ldd	r23, Y+50	; 0x32
    5d08:	8b a9       	ldd	r24, Y+51	; 0x33
    5d0a:	9c a9       	ldd	r25, Y+52	; 0x34
    5d0c:	20 e0       	ldi	r18, 0x00	; 0
    5d0e:	30 e0       	ldi	r19, 0x00	; 0
    5d10:	40 e8       	ldi	r20, 0x80	; 128
    5d12:	5f e3       	ldi	r21, 0x3F	; 63
    5d14:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    5d18:	88 23       	and	r24, r24
    5d1a:	2c f4       	brge	.+10     	; 0x5d26 <main+0x284>
		__ticks = 1;
    5d1c:	81 e0       	ldi	r24, 0x01	; 1
    5d1e:	90 e0       	ldi	r25, 0x00	; 0
    5d20:	98 ab       	std	Y+48, r25	; 0x30
    5d22:	8f a7       	std	Y+47, r24	; 0x2f
    5d24:	3f c0       	rjmp	.+126    	; 0x5da4 <main+0x302>
	else if (__tmp > 65535)
    5d26:	69 a9       	ldd	r22, Y+49	; 0x31
    5d28:	7a a9       	ldd	r23, Y+50	; 0x32
    5d2a:	8b a9       	ldd	r24, Y+51	; 0x33
    5d2c:	9c a9       	ldd	r25, Y+52	; 0x34
    5d2e:	20 e0       	ldi	r18, 0x00	; 0
    5d30:	3f ef       	ldi	r19, 0xFF	; 255
    5d32:	4f e7       	ldi	r20, 0x7F	; 127
    5d34:	57 e4       	ldi	r21, 0x47	; 71
    5d36:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    5d3a:	18 16       	cp	r1, r24
    5d3c:	4c f5       	brge	.+82     	; 0x5d90 <main+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d3e:	6d a9       	ldd	r22, Y+53	; 0x35
    5d40:	7e a9       	ldd	r23, Y+54	; 0x36
    5d42:	8f a9       	ldd	r24, Y+55	; 0x37
    5d44:	98 ad       	ldd	r25, Y+56	; 0x38
    5d46:	20 e0       	ldi	r18, 0x00	; 0
    5d48:	30 e0       	ldi	r19, 0x00	; 0
    5d4a:	40 e2       	ldi	r20, 0x20	; 32
    5d4c:	51 e4       	ldi	r21, 0x41	; 65
    5d4e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5d52:	dc 01       	movw	r26, r24
    5d54:	cb 01       	movw	r24, r22
    5d56:	bc 01       	movw	r22, r24
    5d58:	cd 01       	movw	r24, r26
    5d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d5e:	dc 01       	movw	r26, r24
    5d60:	cb 01       	movw	r24, r22
    5d62:	98 ab       	std	Y+48, r25	; 0x30
    5d64:	8f a7       	std	Y+47, r24	; 0x2f
    5d66:	0f c0       	rjmp	.+30     	; 0x5d86 <main+0x2e4>
    5d68:	88 ec       	ldi	r24, 0xC8	; 200
    5d6a:	90 e0       	ldi	r25, 0x00	; 0
    5d6c:	9e a7       	std	Y+46, r25	; 0x2e
    5d6e:	8d a7       	std	Y+45, r24	; 0x2d
    5d70:	8d a5       	ldd	r24, Y+45	; 0x2d
    5d72:	9e a5       	ldd	r25, Y+46	; 0x2e
    5d74:	01 97       	sbiw	r24, 0x01	; 1
    5d76:	f1 f7       	brne	.-4      	; 0x5d74 <main+0x2d2>
    5d78:	9e a7       	std	Y+46, r25	; 0x2e
    5d7a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    5d7e:	98 a9       	ldd	r25, Y+48	; 0x30
    5d80:	01 97       	sbiw	r24, 0x01	; 1
    5d82:	98 ab       	std	Y+48, r25	; 0x30
    5d84:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d86:	8f a5       	ldd	r24, Y+47	; 0x2f
    5d88:	98 a9       	ldd	r25, Y+48	; 0x30
    5d8a:	00 97       	sbiw	r24, 0x00	; 0
    5d8c:	69 f7       	brne	.-38     	; 0x5d68 <main+0x2c6>
    5d8e:	bc ce       	rjmp	.-648    	; 0x5b08 <main+0x66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d90:	69 a9       	ldd	r22, Y+49	; 0x31
    5d92:	7a a9       	ldd	r23, Y+50	; 0x32
    5d94:	8b a9       	ldd	r24, Y+51	; 0x33
    5d96:	9c a9       	ldd	r25, Y+52	; 0x34
    5d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d9c:	dc 01       	movw	r26, r24
    5d9e:	cb 01       	movw	r24, r22
    5da0:	98 ab       	std	Y+48, r25	; 0x30
    5da2:	8f a7       	std	Y+47, r24	; 0x2f
    5da4:	8f a5       	ldd	r24, Y+47	; 0x2f
    5da6:	98 a9       	ldd	r25, Y+48	; 0x30
    5da8:	9c a7       	std	Y+44, r25	; 0x2c
    5daa:	8b a7       	std	Y+43, r24	; 0x2b
    5dac:	8b a5       	ldd	r24, Y+43	; 0x2b
    5dae:	9c a5       	ldd	r25, Y+44	; 0x2c
    5db0:	01 97       	sbiw	r24, 0x01	; 1
    5db2:	f1 f7       	brne	.-4      	; 0x5db0 <main+0x30e>
    5db4:	9c a7       	std	Y+44, r25	; 0x2c
    5db6:	8b a7       	std	Y+43, r24	; 0x2b
    5db8:	a7 ce       	rjmp	.-690    	; 0x5b08 <main+0x66>
		        //	 selectedOption = '1';
		            _delay_ms(1000);
		            break;
		        case '2':
		        	HLCD_voidLCDCLR();
    5dba:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <HLCD_voidLCDCLR>
		        	HLCD_voidSendString("LightInt = ", HLCD_enuFirstLine, HLCD_enuPosition0);
    5dbe:	81 ec       	ldi	r24, 0xC1	; 193
    5dc0:	90 e0       	ldi	r25, 0x00	; 0
    5dc2:	60 e0       	ldi	r22, 0x00	; 0
    5dc4:	40 e0       	ldi	r20, 0x00	; 0
    5dc6:	0e 94 56 26 	call	0x4cac	; 0x4cac <HLCD_voidSendString>
		        	lightIntensityReading=HLDRSENSOR_GetValue(MADC_ADC1_SINGLE_ENDEDD);
    5dca:	81 e0       	ldi	r24, 0x01	; 1
    5dcc:	0e 94 ef 1c 	call	0x39de	; 0x39de <HLDRSENSOR_GetValue>
    5dd0:	fe 01       	movw	r30, r28
    5dd2:	e7 5b       	subi	r30, 0xB7	; 183
    5dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    5dd6:	91 83       	std	Z+1, r25	; 0x01
    5dd8:	80 83       	st	Z, r24
		        	HLCD_enuWriteNumber(lightIntensityReading);
    5dda:	fe 01       	movw	r30, r28
    5ddc:	e7 5b       	subi	r30, 0xB7	; 183
    5dde:	ff 4f       	sbci	r31, 0xFF	; 255
    5de0:	80 81       	ld	r24, Z
    5de2:	91 81       	ldd	r25, Z+1	; 0x01
    5de4:	5c 01       	movw	r10, r24
    5de6:	cc 24       	eor	r12, r12
    5de8:	dd 24       	eor	r13, r13
    5dea:	ee 24       	eor	r14, r14
    5dec:	ff 24       	eor	r15, r15
    5dee:	87 01       	movw	r16, r14
    5df0:	2a 2d       	mov	r18, r10
    5df2:	3b 2d       	mov	r19, r11
    5df4:	4c 2d       	mov	r20, r12
    5df6:	5d 2d       	mov	r21, r13
    5df8:	6e 2d       	mov	r22, r14
    5dfa:	7f 2d       	mov	r23, r15
    5dfc:	80 2f       	mov	r24, r16
    5dfe:	91 2f       	mov	r25, r17
    5e00:	0e 94 88 26 	call	0x4d10	; 0x4d10 <HLCD_enuWriteNumber>
    5e04:	80 e0       	ldi	r24, 0x00	; 0
    5e06:	90 e0       	ldi	r25, 0x00	; 0
    5e08:	aa e7       	ldi	r26, 0x7A	; 122
    5e0a:	b4 e4       	ldi	r27, 0x44	; 68
    5e0c:	8f a3       	std	Y+39, r24	; 0x27
    5e0e:	98 a7       	std	Y+40, r25	; 0x28
    5e10:	a9 a7       	std	Y+41, r26	; 0x29
    5e12:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e14:	6f a1       	ldd	r22, Y+39	; 0x27
    5e16:	78 a5       	ldd	r23, Y+40	; 0x28
    5e18:	89 a5       	ldd	r24, Y+41	; 0x29
    5e1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    5e1c:	20 e0       	ldi	r18, 0x00	; 0
    5e1e:	30 e0       	ldi	r19, 0x00	; 0
    5e20:	4a ef       	ldi	r20, 0xFA	; 250
    5e22:	54 e4       	ldi	r21, 0x44	; 68
    5e24:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5e28:	dc 01       	movw	r26, r24
    5e2a:	cb 01       	movw	r24, r22
    5e2c:	8b a3       	std	Y+35, r24	; 0x23
    5e2e:	9c a3       	std	Y+36, r25	; 0x24
    5e30:	ad a3       	std	Y+37, r26	; 0x25
    5e32:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5e34:	6b a1       	ldd	r22, Y+35	; 0x23
    5e36:	7c a1       	ldd	r23, Y+36	; 0x24
    5e38:	8d a1       	ldd	r24, Y+37	; 0x25
    5e3a:	9e a1       	ldd	r25, Y+38	; 0x26
    5e3c:	20 e0       	ldi	r18, 0x00	; 0
    5e3e:	30 e0       	ldi	r19, 0x00	; 0
    5e40:	40 e8       	ldi	r20, 0x80	; 128
    5e42:	5f e3       	ldi	r21, 0x3F	; 63
    5e44:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    5e48:	88 23       	and	r24, r24
    5e4a:	2c f4       	brge	.+10     	; 0x5e56 <main+0x3b4>
		__ticks = 1;
    5e4c:	81 e0       	ldi	r24, 0x01	; 1
    5e4e:	90 e0       	ldi	r25, 0x00	; 0
    5e50:	9a a3       	std	Y+34, r25	; 0x22
    5e52:	89 a3       	std	Y+33, r24	; 0x21
    5e54:	3f c0       	rjmp	.+126    	; 0x5ed4 <main+0x432>
	else if (__tmp > 65535)
    5e56:	6b a1       	ldd	r22, Y+35	; 0x23
    5e58:	7c a1       	ldd	r23, Y+36	; 0x24
    5e5a:	8d a1       	ldd	r24, Y+37	; 0x25
    5e5c:	9e a1       	ldd	r25, Y+38	; 0x26
    5e5e:	20 e0       	ldi	r18, 0x00	; 0
    5e60:	3f ef       	ldi	r19, 0xFF	; 255
    5e62:	4f e7       	ldi	r20, 0x7F	; 127
    5e64:	57 e4       	ldi	r21, 0x47	; 71
    5e66:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    5e6a:	18 16       	cp	r1, r24
    5e6c:	4c f5       	brge	.+82     	; 0x5ec0 <main+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e6e:	6f a1       	ldd	r22, Y+39	; 0x27
    5e70:	78 a5       	ldd	r23, Y+40	; 0x28
    5e72:	89 a5       	ldd	r24, Y+41	; 0x29
    5e74:	9a a5       	ldd	r25, Y+42	; 0x2a
    5e76:	20 e0       	ldi	r18, 0x00	; 0
    5e78:	30 e0       	ldi	r19, 0x00	; 0
    5e7a:	40 e2       	ldi	r20, 0x20	; 32
    5e7c:	51 e4       	ldi	r21, 0x41	; 65
    5e7e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5e82:	dc 01       	movw	r26, r24
    5e84:	cb 01       	movw	r24, r22
    5e86:	bc 01       	movw	r22, r24
    5e88:	cd 01       	movw	r24, r26
    5e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e8e:	dc 01       	movw	r26, r24
    5e90:	cb 01       	movw	r24, r22
    5e92:	9a a3       	std	Y+34, r25	; 0x22
    5e94:	89 a3       	std	Y+33, r24	; 0x21
    5e96:	0f c0       	rjmp	.+30     	; 0x5eb6 <main+0x414>
    5e98:	88 ec       	ldi	r24, 0xC8	; 200
    5e9a:	90 e0       	ldi	r25, 0x00	; 0
    5e9c:	98 a3       	std	Y+32, r25	; 0x20
    5e9e:	8f 8f       	std	Y+31, r24	; 0x1f
    5ea0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5ea2:	98 a1       	ldd	r25, Y+32	; 0x20
    5ea4:	01 97       	sbiw	r24, 0x01	; 1
    5ea6:	f1 f7       	brne	.-4      	; 0x5ea4 <main+0x402>
    5ea8:	98 a3       	std	Y+32, r25	; 0x20
    5eaa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5eac:	89 a1       	ldd	r24, Y+33	; 0x21
    5eae:	9a a1       	ldd	r25, Y+34	; 0x22
    5eb0:	01 97       	sbiw	r24, 0x01	; 1
    5eb2:	9a a3       	std	Y+34, r25	; 0x22
    5eb4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5eb6:	89 a1       	ldd	r24, Y+33	; 0x21
    5eb8:	9a a1       	ldd	r25, Y+34	; 0x22
    5eba:	00 97       	sbiw	r24, 0x00	; 0
    5ebc:	69 f7       	brne	.-38     	; 0x5e98 <main+0x3f6>
    5ebe:	24 ce       	rjmp	.-952    	; 0x5b08 <main+0x66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ec0:	6b a1       	ldd	r22, Y+35	; 0x23
    5ec2:	7c a1       	ldd	r23, Y+36	; 0x24
    5ec4:	8d a1       	ldd	r24, Y+37	; 0x25
    5ec6:	9e a1       	ldd	r25, Y+38	; 0x26
    5ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ecc:	dc 01       	movw	r26, r24
    5ece:	cb 01       	movw	r24, r22
    5ed0:	9a a3       	std	Y+34, r25	; 0x22
    5ed2:	89 a3       	std	Y+33, r24	; 0x21
    5ed4:	89 a1       	ldd	r24, Y+33	; 0x21
    5ed6:	9a a1       	ldd	r25, Y+34	; 0x22
    5ed8:	9e 8f       	std	Y+30, r25	; 0x1e
    5eda:	8d 8f       	std	Y+29, r24	; 0x1d
    5edc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5ede:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5ee0:	01 97       	sbiw	r24, 0x01	; 1
    5ee2:	f1 f7       	brne	.-4      	; 0x5ee0 <main+0x43e>
    5ee4:	9e 8f       	std	Y+30, r25	; 0x1e
    5ee6:	8d 8f       	std	Y+29, r24	; 0x1d
    5ee8:	0f ce       	rjmp	.-994    	; 0x5b08 <main+0x66>
		        	// selectedOption = '2';
		            _delay_ms(1000);
		            break;
		        case '3':
		        	HLCD_voidLCDCLR();
    5eea:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <HLCD_voidLCDCLR>
		        	HLCD_voidSendString("Voltage = ", HLCD_enuFirstLine, HLCD_enuPosition0);
    5eee:	8d ec       	ldi	r24, 0xCD	; 205
    5ef0:	90 e0       	ldi	r25, 0x00	; 0
    5ef2:	60 e0       	ldi	r22, 0x00	; 0
    5ef4:	40 e0       	ldi	r20, 0x00	; 0
    5ef6:	0e 94 56 26 	call	0x4cac	; 0x4cac <HLCD_voidSendString>
		        	MADC_u8StartConversionSync(MADC_ADC2_SINGLE_ENDEDD,&Local_u16volt);
    5efa:	9e 01       	movw	r18, r28
    5efc:	23 5b       	subi	r18, 0xB3	; 179
    5efe:	3f 4f       	sbci	r19, 0xFF	; 255
    5f00:	82 e0       	ldi	r24, 0x02	; 2
    5f02:	b9 01       	movw	r22, r18
    5f04:	0e 94 c6 12 	call	0x258c	; 0x258c <MADC_u8StartConversionSync>
		            voltmeterReading = ((u32)(Local_u16volt * (u32)(REFRENCE_VOLTAGE * 1000)) / 1024UL/10);
    5f08:	fe 01       	movw	r30, r28
    5f0a:	e3 5b       	subi	r30, 0xB3	; 179
    5f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f0e:	80 81       	ld	r24, Z
    5f10:	91 81       	ldd	r25, Z+1	; 0x01
    5f12:	cc 01       	movw	r24, r24
    5f14:	a0 e0       	ldi	r26, 0x00	; 0
    5f16:	b0 e0       	ldi	r27, 0x00	; 0
    5f18:	28 e8       	ldi	r18, 0x88	; 136
    5f1a:	33 e1       	ldi	r19, 0x13	; 19
    5f1c:	40 e0       	ldi	r20, 0x00	; 0
    5f1e:	50 e0       	ldi	r21, 0x00	; 0
    5f20:	bc 01       	movw	r22, r24
    5f22:	cd 01       	movw	r24, r26
    5f24:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsi3>
    5f28:	dc 01       	movw	r26, r24
    5f2a:	cb 01       	movw	r24, r22
    5f2c:	20 e0       	ldi	r18, 0x00	; 0
    5f2e:	38 e2       	ldi	r19, 0x28	; 40
    5f30:	40 e0       	ldi	r20, 0x00	; 0
    5f32:	50 e0       	ldi	r21, 0x00	; 0
    5f34:	bc 01       	movw	r22, r24
    5f36:	cd 01       	movw	r24, r26
    5f38:	0e 94 00 31 	call	0x6200	; 0x6200 <__udivmodsi4>
    5f3c:	da 01       	movw	r26, r20
    5f3e:	c9 01       	movw	r24, r18
    5f40:	fe 01       	movw	r30, r28
    5f42:	e9 5b       	subi	r30, 0xB9	; 185
    5f44:	ff 4f       	sbci	r31, 0xFF	; 255
    5f46:	91 83       	std	Z+1, r25	; 0x01
    5f48:	80 83       	st	Z, r24
		            HLCD_enuWriteNumber(voltmeterReading);
    5f4a:	fe 01       	movw	r30, r28
    5f4c:	e9 5b       	subi	r30, 0xB9	; 185
    5f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5f50:	80 81       	ld	r24, Z
    5f52:	91 81       	ldd	r25, Z+1	; 0x01
    5f54:	5c 01       	movw	r10, r24
    5f56:	cc 24       	eor	r12, r12
    5f58:	dd 24       	eor	r13, r13
    5f5a:	ee 24       	eor	r14, r14
    5f5c:	ff 24       	eor	r15, r15
    5f5e:	87 01       	movw	r16, r14
    5f60:	2a 2d       	mov	r18, r10
    5f62:	3b 2d       	mov	r19, r11
    5f64:	4c 2d       	mov	r20, r12
    5f66:	5d 2d       	mov	r21, r13
    5f68:	6e 2d       	mov	r22, r14
    5f6a:	7f 2d       	mov	r23, r15
    5f6c:	80 2f       	mov	r24, r16
    5f6e:	91 2f       	mov	r25, r17
    5f70:	0e 94 88 26 	call	0x4d10	; 0x4d10 <HLCD_enuWriteNumber>
		           HLCD_voidSendString("mv", HLCD_enuFirstLine, HLCD_enuPosition14);
    5f74:	88 ed       	ldi	r24, 0xD8	; 216
    5f76:	90 e0       	ldi	r25, 0x00	; 0
    5f78:	60 e0       	ldi	r22, 0x00	; 0
    5f7a:	4e e0       	ldi	r20, 0x0E	; 14
    5f7c:	0e 94 56 26 	call	0x4cac	; 0x4cac <HLCD_voidSendString>
    5f80:	80 e0       	ldi	r24, 0x00	; 0
    5f82:	90 e0       	ldi	r25, 0x00	; 0
    5f84:	aa e7       	ldi	r26, 0x7A	; 122
    5f86:	b4 e4       	ldi	r27, 0x44	; 68
    5f88:	89 8f       	std	Y+25, r24	; 0x19
    5f8a:	9a 8f       	std	Y+26, r25	; 0x1a
    5f8c:	ab 8f       	std	Y+27, r26	; 0x1b
    5f8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f90:	69 8d       	ldd	r22, Y+25	; 0x19
    5f92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5f94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5f96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5f98:	20 e0       	ldi	r18, 0x00	; 0
    5f9a:	30 e0       	ldi	r19, 0x00	; 0
    5f9c:	4a ef       	ldi	r20, 0xFA	; 250
    5f9e:	54 e4       	ldi	r21, 0x44	; 68
    5fa0:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5fa4:	dc 01       	movw	r26, r24
    5fa6:	cb 01       	movw	r24, r22
    5fa8:	8d 8b       	std	Y+21, r24	; 0x15
    5faa:	9e 8b       	std	Y+22, r25	; 0x16
    5fac:	af 8b       	std	Y+23, r26	; 0x17
    5fae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5fb0:	6d 89       	ldd	r22, Y+21	; 0x15
    5fb2:	7e 89       	ldd	r23, Y+22	; 0x16
    5fb4:	8f 89       	ldd	r24, Y+23	; 0x17
    5fb6:	98 8d       	ldd	r25, Y+24	; 0x18
    5fb8:	20 e0       	ldi	r18, 0x00	; 0
    5fba:	30 e0       	ldi	r19, 0x00	; 0
    5fbc:	40 e8       	ldi	r20, 0x80	; 128
    5fbe:	5f e3       	ldi	r21, 0x3F	; 63
    5fc0:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    5fc4:	88 23       	and	r24, r24
    5fc6:	2c f4       	brge	.+10     	; 0x5fd2 <main+0x530>
		__ticks = 1;
    5fc8:	81 e0       	ldi	r24, 0x01	; 1
    5fca:	90 e0       	ldi	r25, 0x00	; 0
    5fcc:	9c 8b       	std	Y+20, r25	; 0x14
    5fce:	8b 8b       	std	Y+19, r24	; 0x13
    5fd0:	3f c0       	rjmp	.+126    	; 0x6050 <main+0x5ae>
	else if (__tmp > 65535)
    5fd2:	6d 89       	ldd	r22, Y+21	; 0x15
    5fd4:	7e 89       	ldd	r23, Y+22	; 0x16
    5fd6:	8f 89       	ldd	r24, Y+23	; 0x17
    5fd8:	98 8d       	ldd	r25, Y+24	; 0x18
    5fda:	20 e0       	ldi	r18, 0x00	; 0
    5fdc:	3f ef       	ldi	r19, 0xFF	; 255
    5fde:	4f e7       	ldi	r20, 0x7F	; 127
    5fe0:	57 e4       	ldi	r21, 0x47	; 71
    5fe2:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    5fe6:	18 16       	cp	r1, r24
    5fe8:	4c f5       	brge	.+82     	; 0x603c <main+0x59a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fea:	69 8d       	ldd	r22, Y+25	; 0x19
    5fec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5fee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5ff0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5ff2:	20 e0       	ldi	r18, 0x00	; 0
    5ff4:	30 e0       	ldi	r19, 0x00	; 0
    5ff6:	40 e2       	ldi	r20, 0x20	; 32
    5ff8:	51 e4       	ldi	r21, 0x41	; 65
    5ffa:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5ffe:	dc 01       	movw	r26, r24
    6000:	cb 01       	movw	r24, r22
    6002:	bc 01       	movw	r22, r24
    6004:	cd 01       	movw	r24, r26
    6006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    600a:	dc 01       	movw	r26, r24
    600c:	cb 01       	movw	r24, r22
    600e:	9c 8b       	std	Y+20, r25	; 0x14
    6010:	8b 8b       	std	Y+19, r24	; 0x13
    6012:	0f c0       	rjmp	.+30     	; 0x6032 <main+0x590>
    6014:	88 ec       	ldi	r24, 0xC8	; 200
    6016:	90 e0       	ldi	r25, 0x00	; 0
    6018:	9a 8b       	std	Y+18, r25	; 0x12
    601a:	89 8b       	std	Y+17, r24	; 0x11
    601c:	89 89       	ldd	r24, Y+17	; 0x11
    601e:	9a 89       	ldd	r25, Y+18	; 0x12
    6020:	01 97       	sbiw	r24, 0x01	; 1
    6022:	f1 f7       	brne	.-4      	; 0x6020 <main+0x57e>
    6024:	9a 8b       	std	Y+18, r25	; 0x12
    6026:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6028:	8b 89       	ldd	r24, Y+19	; 0x13
    602a:	9c 89       	ldd	r25, Y+20	; 0x14
    602c:	01 97       	sbiw	r24, 0x01	; 1
    602e:	9c 8b       	std	Y+20, r25	; 0x14
    6030:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6032:	8b 89       	ldd	r24, Y+19	; 0x13
    6034:	9c 89       	ldd	r25, Y+20	; 0x14
    6036:	00 97       	sbiw	r24, 0x00	; 0
    6038:	69 f7       	brne	.-38     	; 0x6014 <main+0x572>
    603a:	66 cd       	rjmp	.-1332   	; 0x5b08 <main+0x66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    603c:	6d 89       	ldd	r22, Y+21	; 0x15
    603e:	7e 89       	ldd	r23, Y+22	; 0x16
    6040:	8f 89       	ldd	r24, Y+23	; 0x17
    6042:	98 8d       	ldd	r25, Y+24	; 0x18
    6044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6048:	dc 01       	movw	r26, r24
    604a:	cb 01       	movw	r24, r22
    604c:	9c 8b       	std	Y+20, r25	; 0x14
    604e:	8b 8b       	std	Y+19, r24	; 0x13
    6050:	8b 89       	ldd	r24, Y+19	; 0x13
    6052:	9c 89       	ldd	r25, Y+20	; 0x14
    6054:	98 8b       	std	Y+16, r25	; 0x10
    6056:	8f 87       	std	Y+15, r24	; 0x0f
    6058:	8f 85       	ldd	r24, Y+15	; 0x0f
    605a:	98 89       	ldd	r25, Y+16	; 0x10
    605c:	01 97       	sbiw	r24, 0x01	; 1
    605e:	f1 f7       	brne	.-4      	; 0x605c <main+0x5ba>
    6060:	98 8b       	std	Y+16, r25	; 0x10
    6062:	8f 87       	std	Y+15, r24	; 0x0f
    6064:	51 cd       	rjmp	.-1374   	; 0x5b08 <main+0x66>
		          // selectedOption = '3';
		            _delay_ms(1000);
		            break;
		        default:
		        	HLCD_voidLCDCLR();
    6066:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <HLCD_voidLCDCLR>
		        	//HLCD_voidSendString("Wrong Option", HLCD_enuFirstLine, HLCD_enuPosition0);
		        	HLCD_voidSendString("1-temp", HLCD_enuFirstLine,HLCD_enuPosition0);
    606a:	8b ed       	ldi	r24, 0xDB	; 219
    606c:	90 e0       	ldi	r25, 0x00	; 0
    606e:	60 e0       	ldi	r22, 0x00	; 0
    6070:	40 e0       	ldi	r20, 0x00	; 0
    6072:	0e 94 56 26 	call	0x4cac	; 0x4cac <HLCD_voidSendString>
		            HLCD_voidSendString("2-Light", HLCD_enuSecondLine,HLCD_enuPosition0);
    6076:	82 ee       	ldi	r24, 0xE2	; 226
    6078:	90 e0       	ldi	r25, 0x00	; 0
    607a:	61 e0       	ldi	r22, 0x01	; 1
    607c:	40 e0       	ldi	r20, 0x00	; 0
    607e:	0e 94 56 26 	call	0x4cac	; 0x4cac <HLCD_voidSendString>
		            HLCD_voidSendString("3-Volt", HLCD_enuFirstLine,HLCD_enuPosition9);
    6082:	8a ee       	ldi	r24, 0xEA	; 234
    6084:	90 e0       	ldi	r25, 0x00	; 0
    6086:	60 e0       	ldi	r22, 0x00	; 0
    6088:	49 e0       	ldi	r20, 0x09	; 9
    608a:	0e 94 56 26 	call	0x4cac	; 0x4cac <HLCD_voidSendString>
    608e:	80 e0       	ldi	r24, 0x00	; 0
    6090:	90 e0       	ldi	r25, 0x00	; 0
    6092:	a8 e4       	ldi	r26, 0x48	; 72
    6094:	b2 e4       	ldi	r27, 0x42	; 66
    6096:	8b 87       	std	Y+11, r24	; 0x0b
    6098:	9c 87       	std	Y+12, r25	; 0x0c
    609a:	ad 87       	std	Y+13, r26	; 0x0d
    609c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    609e:	6b 85       	ldd	r22, Y+11	; 0x0b
    60a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    60a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    60a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    60a6:	20 e0       	ldi	r18, 0x00	; 0
    60a8:	30 e0       	ldi	r19, 0x00	; 0
    60aa:	4a ef       	ldi	r20, 0xFA	; 250
    60ac:	54 e4       	ldi	r21, 0x44	; 68
    60ae:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    60b2:	dc 01       	movw	r26, r24
    60b4:	cb 01       	movw	r24, r22
    60b6:	8f 83       	std	Y+7, r24	; 0x07
    60b8:	98 87       	std	Y+8, r25	; 0x08
    60ba:	a9 87       	std	Y+9, r26	; 0x09
    60bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    60be:	6f 81       	ldd	r22, Y+7	; 0x07
    60c0:	78 85       	ldd	r23, Y+8	; 0x08
    60c2:	89 85       	ldd	r24, Y+9	; 0x09
    60c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    60c6:	20 e0       	ldi	r18, 0x00	; 0
    60c8:	30 e0       	ldi	r19, 0x00	; 0
    60ca:	40 e8       	ldi	r20, 0x80	; 128
    60cc:	5f e3       	ldi	r21, 0x3F	; 63
    60ce:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__ltsf2>
    60d2:	88 23       	and	r24, r24
    60d4:	2c f4       	brge	.+10     	; 0x60e0 <main+0x63e>
		__ticks = 1;
    60d6:	81 e0       	ldi	r24, 0x01	; 1
    60d8:	90 e0       	ldi	r25, 0x00	; 0
    60da:	9e 83       	std	Y+6, r25	; 0x06
    60dc:	8d 83       	std	Y+5, r24	; 0x05
    60de:	3f c0       	rjmp	.+126    	; 0x615e <main+0x6bc>
	else if (__tmp > 65535)
    60e0:	6f 81       	ldd	r22, Y+7	; 0x07
    60e2:	78 85       	ldd	r23, Y+8	; 0x08
    60e4:	89 85       	ldd	r24, Y+9	; 0x09
    60e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    60e8:	20 e0       	ldi	r18, 0x00	; 0
    60ea:	3f ef       	ldi	r19, 0xFF	; 255
    60ec:	4f e7       	ldi	r20, 0x7F	; 127
    60ee:	57 e4       	ldi	r21, 0x47	; 71
    60f0:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__gtsf2>
    60f4:	18 16       	cp	r1, r24
    60f6:	4c f5       	brge	.+82     	; 0x614a <main+0x6a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    60fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    60fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    60fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    6100:	20 e0       	ldi	r18, 0x00	; 0
    6102:	30 e0       	ldi	r19, 0x00	; 0
    6104:	40 e2       	ldi	r20, 0x20	; 32
    6106:	51 e4       	ldi	r21, 0x41	; 65
    6108:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    610c:	dc 01       	movw	r26, r24
    610e:	cb 01       	movw	r24, r22
    6110:	bc 01       	movw	r22, r24
    6112:	cd 01       	movw	r24, r26
    6114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6118:	dc 01       	movw	r26, r24
    611a:	cb 01       	movw	r24, r22
    611c:	9e 83       	std	Y+6, r25	; 0x06
    611e:	8d 83       	std	Y+5, r24	; 0x05
    6120:	0f c0       	rjmp	.+30     	; 0x6140 <main+0x69e>
    6122:	88 ec       	ldi	r24, 0xC8	; 200
    6124:	90 e0       	ldi	r25, 0x00	; 0
    6126:	9c 83       	std	Y+4, r25	; 0x04
    6128:	8b 83       	std	Y+3, r24	; 0x03
    612a:	8b 81       	ldd	r24, Y+3	; 0x03
    612c:	9c 81       	ldd	r25, Y+4	; 0x04
    612e:	01 97       	sbiw	r24, 0x01	; 1
    6130:	f1 f7       	brne	.-4      	; 0x612e <main+0x68c>
    6132:	9c 83       	std	Y+4, r25	; 0x04
    6134:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6136:	8d 81       	ldd	r24, Y+5	; 0x05
    6138:	9e 81       	ldd	r25, Y+6	; 0x06
    613a:	01 97       	sbiw	r24, 0x01	; 1
    613c:	9e 83       	std	Y+6, r25	; 0x06
    613e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6140:	8d 81       	ldd	r24, Y+5	; 0x05
    6142:	9e 81       	ldd	r25, Y+6	; 0x06
    6144:	00 97       	sbiw	r24, 0x00	; 0
    6146:	69 f7       	brne	.-38     	; 0x6122 <main+0x680>
    6148:	df cc       	rjmp	.-1602   	; 0x5b08 <main+0x66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    614a:	6f 81       	ldd	r22, Y+7	; 0x07
    614c:	78 85       	ldd	r23, Y+8	; 0x08
    614e:	89 85       	ldd	r24, Y+9	; 0x09
    6150:	9a 85       	ldd	r25, Y+10	; 0x0a
    6152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6156:	dc 01       	movw	r26, r24
    6158:	cb 01       	movw	r24, r22
    615a:	9e 83       	std	Y+6, r25	; 0x06
    615c:	8d 83       	std	Y+5, r24	; 0x05
    615e:	8d 81       	ldd	r24, Y+5	; 0x05
    6160:	9e 81       	ldd	r25, Y+6	; 0x06
    6162:	9a 83       	std	Y+2, r25	; 0x02
    6164:	89 83       	std	Y+1, r24	; 0x01
    6166:	89 81       	ldd	r24, Y+1	; 0x01
    6168:	9a 81       	ldd	r25, Y+2	; 0x02
    616a:	01 97       	sbiw	r24, 0x01	; 1
    616c:	f1 f7       	brne	.-4      	; 0x616a <main+0x6c8>
    616e:	9a 83       	std	Y+2, r25	; 0x02
    6170:	89 83       	std	Y+1, r24	; 0x01
    6172:	ca cc       	rjmp	.-1644   	; 0x5b08 <main+0x66>

00006174 <__mulsi3>:
    6174:	62 9f       	mul	r22, r18
    6176:	d0 01       	movw	r26, r0
    6178:	73 9f       	mul	r23, r19
    617a:	f0 01       	movw	r30, r0
    617c:	82 9f       	mul	r24, r18
    617e:	e0 0d       	add	r30, r0
    6180:	f1 1d       	adc	r31, r1
    6182:	64 9f       	mul	r22, r20
    6184:	e0 0d       	add	r30, r0
    6186:	f1 1d       	adc	r31, r1
    6188:	92 9f       	mul	r25, r18
    618a:	f0 0d       	add	r31, r0
    618c:	83 9f       	mul	r24, r19
    618e:	f0 0d       	add	r31, r0
    6190:	74 9f       	mul	r23, r20
    6192:	f0 0d       	add	r31, r0
    6194:	65 9f       	mul	r22, r21
    6196:	f0 0d       	add	r31, r0
    6198:	99 27       	eor	r25, r25
    619a:	72 9f       	mul	r23, r18
    619c:	b0 0d       	add	r27, r0
    619e:	e1 1d       	adc	r30, r1
    61a0:	f9 1f       	adc	r31, r25
    61a2:	63 9f       	mul	r22, r19
    61a4:	b0 0d       	add	r27, r0
    61a6:	e1 1d       	adc	r30, r1
    61a8:	f9 1f       	adc	r31, r25
    61aa:	bd 01       	movw	r22, r26
    61ac:	cf 01       	movw	r24, r30
    61ae:	11 24       	eor	r1, r1
    61b0:	08 95       	ret

000061b2 <__udivmodhi4>:
    61b2:	aa 1b       	sub	r26, r26
    61b4:	bb 1b       	sub	r27, r27
    61b6:	51 e1       	ldi	r21, 0x11	; 17
    61b8:	07 c0       	rjmp	.+14     	; 0x61c8 <__udivmodhi4_ep>

000061ba <__udivmodhi4_loop>:
    61ba:	aa 1f       	adc	r26, r26
    61bc:	bb 1f       	adc	r27, r27
    61be:	a6 17       	cp	r26, r22
    61c0:	b7 07       	cpc	r27, r23
    61c2:	10 f0       	brcs	.+4      	; 0x61c8 <__udivmodhi4_ep>
    61c4:	a6 1b       	sub	r26, r22
    61c6:	b7 0b       	sbc	r27, r23

000061c8 <__udivmodhi4_ep>:
    61c8:	88 1f       	adc	r24, r24
    61ca:	99 1f       	adc	r25, r25
    61cc:	5a 95       	dec	r21
    61ce:	a9 f7       	brne	.-22     	; 0x61ba <__udivmodhi4_loop>
    61d0:	80 95       	com	r24
    61d2:	90 95       	com	r25
    61d4:	bc 01       	movw	r22, r24
    61d6:	cd 01       	movw	r24, r26
    61d8:	08 95       	ret

000061da <__divmodhi4>:
    61da:	97 fb       	bst	r25, 7
    61dc:	09 2e       	mov	r0, r25
    61de:	07 26       	eor	r0, r23
    61e0:	0a d0       	rcall	.+20     	; 0x61f6 <__divmodhi4_neg1>
    61e2:	77 fd       	sbrc	r23, 7
    61e4:	04 d0       	rcall	.+8      	; 0x61ee <__divmodhi4_neg2>
    61e6:	e5 df       	rcall	.-54     	; 0x61b2 <__udivmodhi4>
    61e8:	06 d0       	rcall	.+12     	; 0x61f6 <__divmodhi4_neg1>
    61ea:	00 20       	and	r0, r0
    61ec:	1a f4       	brpl	.+6      	; 0x61f4 <__divmodhi4_exit>

000061ee <__divmodhi4_neg2>:
    61ee:	70 95       	com	r23
    61f0:	61 95       	neg	r22
    61f2:	7f 4f       	sbci	r23, 0xFF	; 255

000061f4 <__divmodhi4_exit>:
    61f4:	08 95       	ret

000061f6 <__divmodhi4_neg1>:
    61f6:	f6 f7       	brtc	.-4      	; 0x61f4 <__divmodhi4_exit>
    61f8:	90 95       	com	r25
    61fa:	81 95       	neg	r24
    61fc:	9f 4f       	sbci	r25, 0xFF	; 255
    61fe:	08 95       	ret

00006200 <__udivmodsi4>:
    6200:	a1 e2       	ldi	r26, 0x21	; 33
    6202:	1a 2e       	mov	r1, r26
    6204:	aa 1b       	sub	r26, r26
    6206:	bb 1b       	sub	r27, r27
    6208:	fd 01       	movw	r30, r26
    620a:	0d c0       	rjmp	.+26     	; 0x6226 <__udivmodsi4_ep>

0000620c <__udivmodsi4_loop>:
    620c:	aa 1f       	adc	r26, r26
    620e:	bb 1f       	adc	r27, r27
    6210:	ee 1f       	adc	r30, r30
    6212:	ff 1f       	adc	r31, r31
    6214:	a2 17       	cp	r26, r18
    6216:	b3 07       	cpc	r27, r19
    6218:	e4 07       	cpc	r30, r20
    621a:	f5 07       	cpc	r31, r21
    621c:	20 f0       	brcs	.+8      	; 0x6226 <__udivmodsi4_ep>
    621e:	a2 1b       	sub	r26, r18
    6220:	b3 0b       	sbc	r27, r19
    6222:	e4 0b       	sbc	r30, r20
    6224:	f5 0b       	sbc	r31, r21

00006226 <__udivmodsi4_ep>:
    6226:	66 1f       	adc	r22, r22
    6228:	77 1f       	adc	r23, r23
    622a:	88 1f       	adc	r24, r24
    622c:	99 1f       	adc	r25, r25
    622e:	1a 94       	dec	r1
    6230:	69 f7       	brne	.-38     	; 0x620c <__udivmodsi4_loop>
    6232:	60 95       	com	r22
    6234:	70 95       	com	r23
    6236:	80 95       	com	r24
    6238:	90 95       	com	r25
    623a:	9b 01       	movw	r18, r22
    623c:	ac 01       	movw	r20, r24
    623e:	bd 01       	movw	r22, r26
    6240:	cf 01       	movw	r24, r30
    6242:	08 95       	ret

00006244 <__prologue_saves__>:
    6244:	2f 92       	push	r2
    6246:	3f 92       	push	r3
    6248:	4f 92       	push	r4
    624a:	5f 92       	push	r5
    624c:	6f 92       	push	r6
    624e:	7f 92       	push	r7
    6250:	8f 92       	push	r8
    6252:	9f 92       	push	r9
    6254:	af 92       	push	r10
    6256:	bf 92       	push	r11
    6258:	cf 92       	push	r12
    625a:	df 92       	push	r13
    625c:	ef 92       	push	r14
    625e:	ff 92       	push	r15
    6260:	0f 93       	push	r16
    6262:	1f 93       	push	r17
    6264:	cf 93       	push	r28
    6266:	df 93       	push	r29
    6268:	cd b7       	in	r28, 0x3d	; 61
    626a:	de b7       	in	r29, 0x3e	; 62
    626c:	ca 1b       	sub	r28, r26
    626e:	db 0b       	sbc	r29, r27
    6270:	0f b6       	in	r0, 0x3f	; 63
    6272:	f8 94       	cli
    6274:	de bf       	out	0x3e, r29	; 62
    6276:	0f be       	out	0x3f, r0	; 63
    6278:	cd bf       	out	0x3d, r28	; 61
    627a:	09 94       	ijmp

0000627c <__epilogue_restores__>:
    627c:	2a 88       	ldd	r2, Y+18	; 0x12
    627e:	39 88       	ldd	r3, Y+17	; 0x11
    6280:	48 88       	ldd	r4, Y+16	; 0x10
    6282:	5f 84       	ldd	r5, Y+15	; 0x0f
    6284:	6e 84       	ldd	r6, Y+14	; 0x0e
    6286:	7d 84       	ldd	r7, Y+13	; 0x0d
    6288:	8c 84       	ldd	r8, Y+12	; 0x0c
    628a:	9b 84       	ldd	r9, Y+11	; 0x0b
    628c:	aa 84       	ldd	r10, Y+10	; 0x0a
    628e:	b9 84       	ldd	r11, Y+9	; 0x09
    6290:	c8 84       	ldd	r12, Y+8	; 0x08
    6292:	df 80       	ldd	r13, Y+7	; 0x07
    6294:	ee 80       	ldd	r14, Y+6	; 0x06
    6296:	fd 80       	ldd	r15, Y+5	; 0x05
    6298:	0c 81       	ldd	r16, Y+4	; 0x04
    629a:	1b 81       	ldd	r17, Y+3	; 0x03
    629c:	aa 81       	ldd	r26, Y+2	; 0x02
    629e:	b9 81       	ldd	r27, Y+1	; 0x01
    62a0:	ce 0f       	add	r28, r30
    62a2:	d1 1d       	adc	r29, r1
    62a4:	0f b6       	in	r0, 0x3f	; 63
    62a6:	f8 94       	cli
    62a8:	de bf       	out	0x3e, r29	; 62
    62aa:	0f be       	out	0x3f, r0	; 63
    62ac:	cd bf       	out	0x3d, r28	; 61
    62ae:	ed 01       	movw	r28, r26
    62b0:	08 95       	ret

000062b2 <_exit>:
    62b2:	f8 94       	cli

000062b4 <__stop_program>:
    62b4:	ff cf       	rjmp	.-2      	; 0x62b4 <__stop_program>
